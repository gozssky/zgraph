// Code generated by goyacc - DO NOT EDIT.

// Copyright 2013 The ql Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSES/QL-LICENSE file.

// Copyright 2022 zGraph Authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Initial yacc source generated by ebnf2y[1]
// at 2013-10-04 23:10:47.861401015 +0200 CEST
//
//  $ ebnf2y -o ql.y -oe ql.ebnf -start StatementList -pkg ql -p _
//
//   [1]: http://github.com/cznic/ebnf2y

// The parser implements the PGQL specification
//
// - https://pgql-lang.org/spec/1.5/
//

package parser

import __yyfmt__ "fmt"

import (
	"github.com/vescale/zgraph/parser/ast"
	"github.com/vescale/zgraph/parser/model"
)

type yySymType struct {
	yys       int
	offset    int // offset
	item      interface{}
	ident     string
	expr      ast.ExprNode
	statement ast.StmtNode
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault          = 57491
	yyEofCode          = 57344
	abs                = 57455
	all                = 57416
	allProp            = 57484
	and                = 57395
	andand             = 57351
	andnot             = 57464
	any                = 57417
	array_agg          = 57430
	as                 = 57353
	asc                = 57354
	assignmentEq       = 57465
	avg                = 57431
	bLeftArrow         = 57480
	bRightArrow        = 57481
	begin              = 57404
	between            = 57396
	bigIntType         = 57355
	booleanType        = 57406
	bracketDash        = 57479
	by                 = 57356
	caseKwd            = 57399
	cast               = 57441
	ceil               = 57456
	ceiling            = 57457
	cheapest           = 57419
	commit             = 57405
	cost               = 57421
	count              = 57432
	create             = 57357
	dashBracket        = 57478
	dashSlash          = 57476
	dateType           = 57409
	day                = 57410
	decLit             = 57462
	defaultKwd         = 57358
	deleteKwd          = 57359
	desc               = 57360
	distinct           = 57437
	div                = 57488
	doubleAtIdentifier = 57349
	doubleType         = 57361
	drop               = 57362
	edge               = 57363
	element_number     = 57458
	elseKwd            = 57403
	empty              = 57485
	end                = 57400
	eq                 = 57466
	yyErrCode          = 57345
	exists             = 57364
	explain            = 57407
	extract            = 57438
	falseKwd           = 57365
	floatType          = 57366
	floor              = 57459
	forkKwd            = 57429
	from               = 57367
	ge                 = 57467
	graph              = 57415
	group              = 57368
	has_label          = 57460
	having             = 57369
	hour               = 57424
	id                 = 57461
	identifier         = 57346
	ifKwd              = 57370
	in                 = 57446
	in_degree          = 57450
	index              = 57371
	insert             = 57372
	intLit             = 57463
	intType            = 57375
	integerType        = 57373
	interval           = 57423
	into               = 57374
	invalid            = 57350
	is                 = 57376
	java_regexp_like   = 57451
	jss                = 57469
	juss               = 57470
	label              = 57452
	labels             = 57397
	le                 = 57468
	leftArrow          = 57475
	limit              = 57377
	listagg            = 57433
	long               = 57442
	lower              = 57448
	lowerThanOn        = 57486
	match              = 57378
	match_number       = 57453
	max                = 57434
	min                = 57435
	minute             = 57425
	mod                = 57489
	month              = 57426
	neg                = 57490
	neq                = 57471
	neqSynonym         = 57472
	not                = 57379
	null               = 57380
	nulleq             = 57473
	offset             = 57414
	on                 = 57381
	or                 = 57394
	order              = 57382
	out_degree         = 57454
	paramMarker        = 57474
	path               = 57422
	pipes              = 57352
	pipesAsOr          = 57487
	precisionType      = 57383
	prefix             = 57447
	primary            = 57384
	properties         = 57398
	rollback           = 57413
	sLeftArrow         = 57482
	sRightArrow        = 57483
	second             = 57427
	selectKwd          = 57385
	set                = 57386
	shortest           = 57418
	singleAtIdentifier = 57348
	slashDash          = 57477
	stringKwd          = 57443
	stringLit          = 57347
	substring          = 57428
	sum                = 57436
	then               = 57401
	timeType           = 57412
	timestampType      = 57411
	timezone_hour      = 57439
	timezone_minute    = 57440
	top                = 57420
	trueKwd            = 57387
	unique             = 57388
	update             = 57389
	uppper             = 57449
	use                = 57390
	vertex             = 57391
	when               = 57402
	where              = 57392
	with               = 57444
	xor                = 57393
	yearType           = 57408
	zone               = 57445

	yyMaxDepth = 200
	yyTabOfs   = -323
)

var (
	yyPrec = map[int]int{
		empty:        0,
		insert:       1,
		'(':          2,
		')':          3,
		lowerThanOn:  4,
		on:           5,
		assignmentEq: 6,
		pipes:        7,
		or:           7,
		pipesAsOr:    7,
		xor:          8,
		andand:       9,
		and:          9,
		between:      10,
		eq:           11,
		ge:           11,
		le:           11,
		neq:          11,
		neqSynonym:   11,
		'>':          11,
		'<':          11,
		is:           11,
		in:           11,
		'|':          12,
		'&':          13,
		'-':          14,
		'+':          14,
		'*':          15,
		'/':          15,
		'%':          15,
		div:          15,
		mod:          15,
		'^':          16,
		'~':          17,
		neg:          17,
		not:          18,
		',':          19,
	}

	yyXLAT = map[int]int{
		41:    0,   // ')' (220x)
		57344: 1,   // $end (210x)
		59:    2,   // ';' (209x)
		57346: 3,   // identifier (191x)
		44:    4,   // ',' (189x)
		45:    5,   // '-' (185x)
		57379: 6,   // not (178x)
		57347: 7,   // stringLit (158x)
		57377: 8,   // limit (155x)
		57382: 9,   // order (150x)
		57369: 10,  // having (145x)
		57367: 11,  // from (143x)
		42:    12,  // '*' (136x)
		43:    13,  // '+' (134x)
		40:    14,  // '(' (131x)
		57376: 15,  // is (128x)
		57368: 16,  // group (127x)
		57395: 17,  // and (122x)
		57446: 18,  // in (121x)
		37:    19,  // '%' (120x)
		47:    20,  // '/' (120x)
		60:    21,  // '<' (120x)
		62:    22,  // '>' (120x)
		57466: 23,  // eq (120x)
		57467: 24,  // ge (120x)
		57468: 25,  // le (120x)
		57472: 26,  // neqSynonym (120x)
		57394: 27,  // or (120x)
		57352: 28,  // pipes (120x)
		57385: 29,  // selectKwd (120x)
		57393: 30,  // xor (120x)
		57422: 31,  // path (118x)
		57359: 32,  // deleteKwd (116x)
		57372: 33,  // insert (116x)
		57389: 34,  // update (116x)
		57421: 35,  // cost (105x)
		57354: 36,  // asc (101x)
		57360: 37,  // desc (101x)
		57400: 38,  // end (101x)
		57402: 39,  // when (100x)
		57403: 40,  // elseKwd (98x)
		57353: 41,  // as (97x)
		57429: 42,  // forkKwd (95x)
		57401: 43,  // then (94x)
		57545: 44,  // Identifier (80x)
		57463: 45,  // intLit (63x)
		57397: 46,  // labels (62x)
		57412: 47,  // timeType (59x)
		63:    48,  // '?' (58x)
		57364: 49,  // exists (58x)
		57409: 50,  // dateType (57x)
		57411: 51,  // timestampType (57x)
		57455: 52,  // abs (56x)
		57430: 53,  // array_agg (56x)
		57431: 54,  // avg (56x)
		57399: 55,  // caseKwd (56x)
		57441: 56,  // cast (56x)
		57456: 57,  // ceil (56x)
		57457: 58,  // ceiling (56x)
		57432: 59,  // count (56x)
		57462: 60,  // decLit (56x)
		57458: 61,  // element_number (56x)
		57438: 62,  // extract (56x)
		57365: 63,  // falseKwd (56x)
		57459: 64,  // floor (56x)
		57460: 65,  // has_label (56x)
		57461: 66,  // id (56x)
		57450: 67,  // in_degree (56x)
		57423: 68,  // interval (56x)
		57451: 69,  // java_regexp_like (56x)
		57452: 70,  // label (56x)
		57433: 71,  // listagg (56x)
		57448: 72,  // lower (56x)
		57453: 73,  // match_number (56x)
		57434: 74,  // max (56x)
		57435: 75,  // min (56x)
		57454: 76,  // out_degree (56x)
		57428: 77,  // substring (56x)
		57436: 78,  // sum (56x)
		57387: 79,  // trueKwd (56x)
		57449: 80,  // uppper (56x)
		57620: 81,  // VariableName (54x)
		57622: 82,  // VariableReference (54x)
		57588: 83,  // PropertyAccess (50x)
		57498: 84,  // BindVariable (49x)
		57609: 85,  // StringLiteral (49x)
		57610: 86,  // SubSelect (48x)
		57492: 87,  // Aggregation (47x)
		57495: 88,  // ArithmeticExpression (47x)
		57499: 89,  // BooleanLiteral (47x)
		57500: 90,  // BracketedValueExpression (47x)
		57503: 91,  // CaseExpression (47x)
		57504: 92,  // CastSpecification (47x)
		57505: 93,  // CharacterSubstring (47x)
		57513: 94,  // DateLiteral (47x)
		57523: 95,  // ExistsPredicate (47x)
		57527: 96,  // ExtractFunction (47x)
		57533: 97,  // FunctionInvocation (47x)
		57534: 98,  // FunctionName (47x)
		57548: 99,  // InPredicate (47x)
		57553: 100, // IntervalLiteral (47x)
		57556: 101, // IsNotNullPredicate (47x)
		57557: 102, // IsNullPredicate (47x)
		57571: 103, // Literal (47x)
		57572: 104, // LogicalExpression (47x)
		57575: 105, // NotInPredicate (47x)
		57576: 106, // NumericLiteral (47x)
		57595: 107, // RelationalExpression (47x)
		57598: 108, // ScalarSubquery (47x)
		57599: 109, // SearchedCase (47x)
		57603: 110, // SimpleCase (47x)
		57608: 111, // StringConcat (47x)
		57613: 112, // TimeLiteral (47x)
		57614: 113, // TimestampLiteral (47x)
		57617: 114, // ValueExpression (47x)
		57392: 115, // where (40x)
		57381: 116, // on (22x)
		57474: 117, // paramMarker (18x)
		57477: 118, // slashDash (17x)
		57625: 119, // VertexPattern (17x)
		123:   120, // '{' (15x)
		57483: 121, // sRightArrow (15x)
		57479: 122, // bracketDash (13x)
		57481: 123, // bRightArrow (11x)
		58:    124, // ':' (9x)
		57480: 125, // bLeftArrow (9x)
		57478: 126, // dashBracket (9x)
		57363: 127, // edge (9x)
		57469: 128, // jss (9x)
		57475: 129, // leftArrow (9x)
		57398: 130, // properties (9x)
		57391: 131, // vertex (9x)
		57437: 132, // distinct (8x)
		57516: 133, // DistinctOpt (8x)
		57539: 134, // GraphName (8x)
		57619: 135, // VariableLengthPathPattern (8x)
		46:    136, // '.' (7x)
		57567: 137, // LengthNum (7x)
		57581: 138, // PathPatternMacro (6x)
		57621: 139, // VariableNameOpt (6x)
		57630: 140, // WhereClauseOpt (6x)
		61:    141, // '=' (5x)
		124:   142, // '|' (5x)
		125:   143, // '}' (5x)
		57476: 144, // dashSlash (5x)
		57524: 145, // ExpAsVar (5x)
		57582: 146, // PathPatternMacroList (5x)
		57583: 147, // PathPatternMacroOpt (5x)
		57602: 148, // SelectStmt (5x)
		57482: 149, // sLeftArrow (5x)
		57416: 150, // all (4x)
		57417: 151, // any (4x)
		57396: 152, // between (4x)
		57419: 153, // cheapest (4x)
		57532: 154, // FromClause (4x)
		57543: 155, // GroupByClauseOpt (4x)
		57544: 156, // HavingClauseOpt (4x)
		57370: 157, // ifKwd (4x)
		57371: 158, // index (4x)
		57568: 159, // LimitClauseOpt (4x)
		57414: 160, // offset (4x)
		57578: 161, // OrderByClauseOpt (4x)
		57579: 162, // PathPattern (4x)
		57584: 163, // PatternQuantifier (4x)
		57585: 164, // PatternQuantifierOpt (4x)
		57386: 165, // set (4x)
		57418: 166, // shortest (4x)
		57604: 167, // SimplePathPattern (4x)
		57420: 168, // top (4x)
		57624: 169, // VariableSpec (4x)
		57629: 170, // WhenClause (4x)
		57501: 171, // ByItem (3x)
		57506: 172, // ColonOrIsKeyword (3x)
		57519: 173, // EdgePattern (3x)
		57535: 174, // GraphElementInsertion (3x)
		57562: 175, // LabelPredicate (3x)
		57569: 176, // LimitOption (3x)
		57589: 177, // PropertyAssignment (3x)
		57591: 178, // PropertyName (3x)
		57484: 179, // allProp (2x)
		57404: 180, // begin (2x)
		57497: 181, // BeginStmt (2x)
		57356: 182, // by (2x)
		57502: 183, // ByList (2x)
		57405: 184, // commit (2x)
		57507: 185, // CommitStmt (2x)
		57357: 186, // create (2x)
		57510: 187, // CreateGraphStmt (2x)
		57511: 188, // CreateIndexStmt (2x)
		57410: 189, // day (2x)
		57515: 190, // DeleteStmt (2x)
		57362: 191, // drop (2x)
		57517: 192, // DropGraphStmt (2x)
		57518: 193, // DropIndexStmt (2x)
		57520: 194, // ElseClauseOpt (2x)
		57521: 195, // EmptyStmt (2x)
		57407: 196, // explain (2x)
		57525: 197, // ExplainStmt (2x)
		57528: 198, // Field (2x)
		57415: 199, // graph (2x)
		57536: 200, // GraphElementInsertionList (2x)
		57537: 201, // GraphElementUpdate (2x)
		57424: 202, // hour (2x)
		57546: 203, // IfExists (2x)
		57547: 204, // IfNotExists (2x)
		57552: 205, // InsertStmt (2x)
		57374: 206, // into (2x)
		57554: 207, // IntoClause (2x)
		57555: 208, // IntoClauseOpt (2x)
		57549: 209, // InValueList (2x)
		57560: 210, // LabelName (2x)
		57566: 211, // LabelsAndProperties (2x)
		57564: 212, // LabelSpecification (2x)
		57565: 213, // LabelSpecificationOpt (2x)
		57378: 214, // match (2x)
		57573: 215, // MatchClause (2x)
		57425: 216, // minute (2x)
		57426: 217, // month (2x)
		57380: 218, // null (2x)
		57590: 219, // PropertyAssignmentList (2x)
		57413: 220, // rollback (2x)
		57596: 221, // RollbackStmt (2x)
		57427: 222, // second (2x)
		57600: 223, // SelectClause (2x)
		57606: 224, // Statement (2x)
		57615: 225, // UpdateStmt (2x)
		57390: 226, // use (2x)
		57616: 227, // UseStmt (2x)
		57626: 228, // VertexPatternOpt (2x)
		57627: 229, // VertexReference (2x)
		57628: 230, // WhenCaluseList (2x)
		57444: 231, // with (2x)
		57408: 232, // yearType (2x)
		57445: 233, // zone (2x)
		57493: 234, // AllPropertiesPrefixOpt (1x)
		57494: 235, // ArgumentList (1x)
		57406: 236, // booleanType (1x)
		57508: 237, // CostClause (1x)
		57509: 238, // CostClauseOpt (1x)
		57512: 239, // DataType (1x)
		57514: 240, // DateTimeField (1x)
		57361: 241, // doubleType (1x)
		57522: 242, // Entry (1x)
		57526: 243, // ExtractField (1x)
		57529: 244, // FieldAsName (1x)
		57530: 245, // FieldAsNameOpt (1x)
		57366: 246, // floatType (1x)
		57531: 247, // ForStringLengthOpt (1x)
		57538: 248, // GraphElementUpdateList (1x)
		57540: 249, // GraphOnClause (1x)
		57541: 250, // GraphOnClauseOpt (1x)
		57542: 251, // GraphPattern (1x)
		57550: 252, // IndexKeyTypeOpt (1x)
		57373: 253, // integerType (1x)
		57375: 254, // intType (1x)
		57559: 255, // LabelList (1x)
		57561: 256, // LabelNameList (1x)
		57563: 257, // LabelPredicateOpt (1x)
		57570: 258, // ListaggSeparatorOpt (1x)
		57442: 259, // long (1x)
		57574: 260, // MatchClauseList (1x)
		57577: 261, // Order (1x)
		57580: 262, // PathPatternList (1x)
		57447: 263, // prefix (1x)
		57586: 264, // PropertiesSpecification (1x)
		57587: 265, // PropertiesSpecificationOpt (1x)
		57592: 266, // PropertyNameList (1x)
		57593: 267, // QuantifiedPathExpr (1x)
		57594: 268, // ReachabilityPathExpr (1x)
		57597: 269, // RowsPerMatchOpt (1x)
		57601: 270, // SelectElementList (1x)
		57605: 271, // StartPosition (1x)
		57607: 272, // StatementList (1x)
		57443: 273, // stringKwd (1x)
		57439: 274, // timezone_hour (1x)
		57440: 275, // timezone_minute (1x)
		57388: 276, // unique (1x)
		57618: 277, // ValueExpressionList (1x)
		57623: 278, // VariableReferenceList (1x)
		57491: 279, // $default (0x)
		38:    280, // '&' (0x)
		94:    281, // '^' (0x)
		126:   282, // '~' (0x)
		57351: 283, // andand (0x)
		57464: 284, // andnot (0x)
		57496: 285, // Assignment (0x)
		57465: 286, // assignmentEq (0x)
		57355: 287, // bigIntType (0x)
		57358: 288, // defaultKwd (0x)
		57488: 289, // div (0x)
		57349: 290, // doubleAtIdentifier (0x)
		57485: 291, // empty (0x)
		57345: 292, // error (0x)
		57551: 293, // IndexName (0x)
		57350: 294, // invalid (0x)
		57470: 295, // juss (0x)
		57558: 296, // Label (0x)
		57486: 297, // lowerThanOn (0x)
		57489: 298, // mod (0x)
		57490: 299, // neg (0x)
		57471: 300, // neq (0x)
		57473: 301, // nulleq (0x)
		57487: 302, // pipesAsOr (0x)
		57383: 303, // precisionType (0x)
		57384: 304, // primary (0x)
		57348: 305, // singleAtIdentifier (0x)
		57611: 306, // TableAsName (0x)
		57612: 307, // TableAsNameOpt (0x)
	}

	yySymNames = []string{
		"')'",
		"$end",
		"';'",
		"identifier",
		"','",
		"'-'",
		"not",
		"stringLit",
		"limit",
		"order",
		"having",
		"from",
		"'*'",
		"'+'",
		"'('",
		"is",
		"group",
		"and",
		"in",
		"'%'",
		"'/'",
		"'<'",
		"'>'",
		"eq",
		"ge",
		"le",
		"neqSynonym",
		"or",
		"pipes",
		"selectKwd",
		"xor",
		"path",
		"deleteKwd",
		"insert",
		"update",
		"cost",
		"asc",
		"desc",
		"end",
		"when",
		"elseKwd",
		"as",
		"forkKwd",
		"then",
		"Identifier",
		"intLit",
		"labels",
		"timeType",
		"'?'",
		"exists",
		"dateType",
		"timestampType",
		"abs",
		"array_agg",
		"avg",
		"caseKwd",
		"cast",
		"ceil",
		"ceiling",
		"count",
		"decLit",
		"element_number",
		"extract",
		"falseKwd",
		"floor",
		"has_label",
		"id",
		"in_degree",
		"interval",
		"java_regexp_like",
		"label",
		"listagg",
		"lower",
		"match_number",
		"max",
		"min",
		"out_degree",
		"substring",
		"sum",
		"trueKwd",
		"uppper",
		"VariableName",
		"VariableReference",
		"PropertyAccess",
		"BindVariable",
		"StringLiteral",
		"SubSelect",
		"Aggregation",
		"ArithmeticExpression",
		"BooleanLiteral",
		"BracketedValueExpression",
		"CaseExpression",
		"CastSpecification",
		"CharacterSubstring",
		"DateLiteral",
		"ExistsPredicate",
		"ExtractFunction",
		"FunctionInvocation",
		"FunctionName",
		"InPredicate",
		"IntervalLiteral",
		"IsNotNullPredicate",
		"IsNullPredicate",
		"Literal",
		"LogicalExpression",
		"NotInPredicate",
		"NumericLiteral",
		"RelationalExpression",
		"ScalarSubquery",
		"SearchedCase",
		"SimpleCase",
		"StringConcat",
		"TimeLiteral",
		"TimestampLiteral",
		"ValueExpression",
		"where",
		"on",
		"paramMarker",
		"slashDash",
		"VertexPattern",
		"'{'",
		"sRightArrow",
		"bracketDash",
		"bRightArrow",
		"':'",
		"bLeftArrow",
		"dashBracket",
		"edge",
		"jss",
		"leftArrow",
		"properties",
		"vertex",
		"distinct",
		"DistinctOpt",
		"GraphName",
		"VariableLengthPathPattern",
		"'.'",
		"LengthNum",
		"PathPatternMacro",
		"VariableNameOpt",
		"WhereClauseOpt",
		"'='",
		"'|'",
		"'}'",
		"dashSlash",
		"ExpAsVar",
		"PathPatternMacroList",
		"PathPatternMacroOpt",
		"SelectStmt",
		"sLeftArrow",
		"all",
		"any",
		"between",
		"cheapest",
		"FromClause",
		"GroupByClauseOpt",
		"HavingClauseOpt",
		"ifKwd",
		"index",
		"LimitClauseOpt",
		"offset",
		"OrderByClauseOpt",
		"PathPattern",
		"PatternQuantifier",
		"PatternQuantifierOpt",
		"set",
		"shortest",
		"SimplePathPattern",
		"top",
		"VariableSpec",
		"WhenClause",
		"ByItem",
		"ColonOrIsKeyword",
		"EdgePattern",
		"GraphElementInsertion",
		"LabelPredicate",
		"LimitOption",
		"PropertyAssignment",
		"PropertyName",
		"allProp",
		"begin",
		"BeginStmt",
		"by",
		"ByList",
		"commit",
		"CommitStmt",
		"create",
		"CreateGraphStmt",
		"CreateIndexStmt",
		"day",
		"DeleteStmt",
		"drop",
		"DropGraphStmt",
		"DropIndexStmt",
		"ElseClauseOpt",
		"EmptyStmt",
		"explain",
		"ExplainStmt",
		"Field",
		"graph",
		"GraphElementInsertionList",
		"GraphElementUpdate",
		"hour",
		"IfExists",
		"IfNotExists",
		"InsertStmt",
		"into",
		"IntoClause",
		"IntoClauseOpt",
		"InValueList",
		"LabelName",
		"LabelsAndProperties",
		"LabelSpecification",
		"LabelSpecificationOpt",
		"match",
		"MatchClause",
		"minute",
		"month",
		"null",
		"PropertyAssignmentList",
		"rollback",
		"RollbackStmt",
		"second",
		"SelectClause",
		"Statement",
		"UpdateStmt",
		"use",
		"UseStmt",
		"VertexPatternOpt",
		"VertexReference",
		"WhenCaluseList",
		"with",
		"yearType",
		"zone",
		"AllPropertiesPrefixOpt",
		"ArgumentList",
		"booleanType",
		"CostClause",
		"CostClauseOpt",
		"DataType",
		"DateTimeField",
		"doubleType",
		"Entry",
		"ExtractField",
		"FieldAsName",
		"FieldAsNameOpt",
		"floatType",
		"ForStringLengthOpt",
		"GraphElementUpdateList",
		"GraphOnClause",
		"GraphOnClauseOpt",
		"GraphPattern",
		"IndexKeyTypeOpt",
		"integerType",
		"intType",
		"LabelList",
		"LabelNameList",
		"LabelPredicateOpt",
		"ListaggSeparatorOpt",
		"long",
		"MatchClauseList",
		"Order",
		"PathPatternList",
		"prefix",
		"PropertiesSpecification",
		"PropertiesSpecificationOpt",
		"PropertyNameList",
		"QuantifiedPathExpr",
		"ReachabilityPathExpr",
		"RowsPerMatchOpt",
		"SelectElementList",
		"StartPosition",
		"StatementList",
		"stringKwd",
		"timezone_hour",
		"timezone_minute",
		"unique",
		"ValueExpressionList",
		"VariableReferenceList",
		"$default",
		"'&'",
		"'^'",
		"'~'",
		"andand",
		"andnot",
		"Assignment",
		"assignmentEq",
		"bigIntType",
		"defaultKwd",
		"div",
		"doubleAtIdentifier",
		"empty",
		"error",
		"IndexName",
		"invalid",
		"juss",
		"Label",
		"lowerThanOn",
		"mod",
		"neg",
		"neq",
		"nulleq",
		"pipesAsOr",
		"precisionType",
		"primary",
		"singleAtIdentifier",
		"TableAsName",
		"TableAsNameOpt",
	}

	yyTokenLiteralStrings = map[int]string{
		57346: "identifier",
		57379: "NOT",
		57347: "string literal",
		57377: "LIMIT",
		57382: "ORDER",
		57369: "HAVING",
		57367: "FROM",
		57376: "IS",
		57368: "GROUP",
		57395: "AND",
		57446: "IN",
		57466: "=",
		57467: ">=",
		57468: "<=",
		57472: "<>",
		57394: "OR",
		57352: "||",
		57385: "SELECT",
		57393: "XOR",
		57422: "PATH",
		57359: "DELETE",
		57372: "INSERT",
		57389: "UPDATE",
		57421: "COST",
		57354: "ASC",
		57360: "DESC",
		57400: "END",
		57402: "WHEN",
		57403: "ELSE",
		57353: "AS",
		57429: "FOR",
		57401: "THEN",
		57463: "integer literal",
		57397: "LABELS",
		57412: "TIME",
		57364: "EXISTS",
		57409: "DATE",
		57411: "TIMESTAMP",
		57455: "ABS",
		57430: "ARRAY_AGG",
		57431: "AVG",
		57399: "CASE",
		57441: "CAST",
		57456: "CEIL",
		57457: "CEILING",
		57432: "COUNT",
		57462: "decimal literal",
		57458: "ELEMENT_NUMBER",
		57438: "EXTRACT",
		57365: "FALSE",
		57459: "FLOOR",
		57460: "HAS_LABEL",
		57461: "ID",
		57450: "IN_DEGREE",
		57423: "INTERVAL",
		57451: "JAVA_REGEXP_LIKE",
		57452: "LABEL",
		57433: "LISTAGG",
		57448: "LOWER",
		57453: "MATCH_NUMBER",
		57434: "MAX",
		57435: "MIN",
		57454: "OUT_DEGREE",
		57428: "SUBSTRING",
		57436: "SUM",
		57387: "TRUE",
		57449: "UPPER",
		57392: "WHERE",
		57381: "ON",
		57474: "?",
		57477: "/-",
		57483: "/->",
		57479: "]-",
		57481: "]->",
		57480: "<-[",
		57478: "-[",
		57363: "EDGE",
		57469: "->",
		57475: "<-",
		57398: "PROPERTIES",
		57391: "VERTEX",
		57437: "DISTINCT",
		57476: "-/",
		57482: "<-/",
		57416: "ALL",
		57417: "ANY",
		57396: "BETWEEN",
		57419: "CHEAPEST",
		57370: "IF",
		57371: "INDEX",
		57414: "OFFSET",
		57386: "SET",
		57418: "SHORTEST",
		57420: "TOP",
		57484: ".*",
		57404: "BEGIN",
		57356: "BY",
		57405: "COMMIT",
		57357: "CREATE",
		57410: "DAY",
		57362: "DROP",
		57407: "EXPLAIN",
		57415: "GRAPH",
		57424: "HOUR",
		57374: "INTO",
		57378: "MATCH",
		57425: "MINUTE",
		57426: "MONTH",
		57380: "NULL",
		57413: "ROLLBACK",
		57427: "SECOND",
		57390: "USE",
		57444: "WITH",
		57408: "YEAR",
		57445: "ZONE",
		57406: "BOOLEAN",
		57361: "DOUBLE",
		57366: "FLOAT",
		57373: "INTEGER",
		57375: "INT",
		57442: "LONG",
		57447: "PREFIX",
		57443: "STRING",
		57439: "TIMEZONE_HOUR",
		57440: "TIMEZONE_MINUTE",
		57388: "UNIQUE",
		57351: "&&",
		57464: "&^",
		57465: ":=",
		57355: "BIGINT",
		57358: "DEFAULT",
		57349: "identifier with double leading at",
		57350: "a special token never used by parser, used by lexer to indicate error",
		57470: "->>",
		57471: "!=",
		57473: "<=>",
		57383: "PRECISION",
		57384: "PRIMARY",
		57348: "identifier with single leading at",
	}

	yyReductions = map[int]struct{ xsym, components int }{
		0:   {0, 1},
		1:   {242, 1},
		2:   {272, 1},
		3:   {272, 3},
		4:   {224, 1},
		5:   {224, 1},
		6:   {224, 1},
		7:   {224, 1},
		8:   {224, 1},
		9:   {224, 1},
		10:  {224, 1},
		11:  {224, 1},
		12:  {224, 1},
		13:  {224, 1},
		14:  {224, 1},
		15:  {224, 1},
		16:  {224, 1},
		17:  {224, 1},
		18:  {195, 0},
		19:  {181, 1},
		20:  {185, 1},
		21:  {187, 4},
		22:  {188, 10},
		23:  {252, 0},
		24:  {252, 1},
		25:  {190, 9},
		26:  {278, 1},
		27:  {278, 3},
		28:  {307, 0},
		29:  {307, 1},
		30:  {306, 1},
		31:  {306, 2},
		32:  {192, 4},
		33:  {193, 6},
		34:  {197, 2},
		35:  {205, 3},
		36:  {205, 10},
		37:  {208, 0},
		38:  {208, 1},
		39:  {207, 2},
		40:  {200, 1},
		41:  {200, 3},
		42:  {174, 3},
		43:  {174, 7},
		44:  {229, 1},
		45:  {211, 2},
		46:  {213, 0},
		47:  {213, 1},
		48:  {212, 4},
		49:  {265, 0},
		50:  {265, 1},
		51:  {264, 4},
		52:  {219, 1},
		53:  {219, 3},
		54:  {177, 3},
		55:  {83, 3},
		56:  {114, 1},
		57:  {114, 1},
		58:  {114, 1},
		59:  {114, 1},
		60:  {114, 1},
		61:  {114, 1},
		62:  {114, 1},
		63:  {114, 1},
		64:  {114, 1},
		65:  {114, 1},
		66:  {114, 1},
		67:  {114, 1},
		68:  {114, 1},
		69:  {114, 1},
		70:  {114, 1},
		71:  {114, 1},
		72:  {114, 1},
		73:  {114, 1},
		74:  {114, 1},
		75:  {114, 1},
		76:  {114, 1},
		77:  {82, 1},
		78:  {103, 1},
		79:  {103, 1},
		80:  {103, 1},
		81:  {103, 1},
		82:  {103, 1},
		83:  {103, 1},
		84:  {103, 1},
		85:  {85, 1},
		86:  {106, 1},
		87:  {106, 1},
		88:  {89, 1},
		89:  {89, 1},
		90:  {94, 2},
		91:  {112, 2},
		92:  {113, 2},
		93:  {100, 3},
		94:  {240, 1},
		95:  {240, 1},
		96:  {240, 1},
		97:  {240, 1},
		98:  {240, 1},
		99:  {240, 1},
		100: {84, 1},
		101: {88, 2},
		102: {88, 3},
		103: {88, 3},
		104: {88, 3},
		105: {88, 3},
		106: {88, 3},
		107: {107, 3},
		108: {107, 3},
		109: {107, 3},
		110: {107, 3},
		111: {107, 3},
		112: {107, 3},
		113: {104, 3},
		114: {104, 3},
		115: {104, 3},
		116: {104, 2},
		117: {285, 3},
		118: {111, 3},
		119: {90, 3},
		120: {97, 4},
		121: {98, 1},
		122: {98, 1},
		123: {98, 1},
		124: {98, 1},
		125: {98, 1},
		126: {98, 1},
		127: {98, 1},
		128: {98, 1},
		129: {98, 1},
		130: {98, 1},
		131: {98, 1},
		132: {98, 1},
		133: {98, 1},
		134: {98, 1},
		135: {98, 1},
		136: {235, 1},
		137: {235, 3},
		138: {93, 7},
		139: {271, 1},
		140: {247, 0},
		141: {247, 2},
		142: {87, 4},
		143: {87, 5},
		144: {87, 5},
		145: {87, 5},
		146: {87, 5},
		147: {87, 5},
		148: {87, 5},
		149: {87, 6},
		150: {133, 0},
		151: {133, 1},
		152: {258, 0},
		153: {258, 2},
		154: {96, 6},
		155: {243, 1},
		156: {243, 1},
		157: {243, 1},
		158: {243, 1},
		159: {243, 1},
		160: {243, 1},
		161: {243, 1},
		162: {243, 1},
		163: {102, 3},
		164: {101, 4},
		165: {92, 6},
		166: {239, 1},
		167: {239, 1},
		168: {239, 1},
		169: {239, 1},
		170: {239, 1},
		171: {239, 1},
		172: {239, 1},
		173: {239, 1},
		174: {239, 1},
		175: {239, 4},
		176: {239, 1},
		177: {239, 4},
		178: {91, 1},
		179: {91, 1},
		180: {110, 5},
		181: {109, 4},
		182: {230, 1},
		183: {230, 2},
		184: {170, 4},
		185: {194, 0},
		186: {194, 2},
		187: {99, 3},
		188: {105, 4},
		189: {209, 3},
		190: {209, 1},
		191: {277, 1},
		192: {277, 3},
		193: {95, 2},
		194: {108, 1},
		195: {221, 1},
		196: {86, 3},
		197: {148, 8},
		198: {223, 3},
		199: {223, 2},
		200: {270, 1},
		201: {270, 3},
		202: {198, 1},
		203: {198, 3},
		204: {145, 2},
		205: {234, 0},
		206: {234, 2},
		207: {245, 0},
		208: {245, 1},
		209: {244, 1},
		210: {244, 2},
		211: {244, 1},
		212: {244, 2},
		213: {154, 2},
		214: {260, 1},
		215: {260, 3},
		216: {215, 4},
		217: {249, 2},
		218: {250, 0},
		219: {250, 1},
		220: {269, 0},
		221: {251, 1},
		222: {251, 3},
		223: {262, 1},
		224: {262, 3},
		225: {162, 1},
		226: {162, 2},
		227: {162, 3},
		228: {162, 3},
		229: {162, 4},
		230: {162, 3},
		231: {162, 3},
		232: {162, 4},
		233: {162, 2},
		234: {167, 1},
		235: {167, 3},
		236: {167, 3},
		237: {135, 3},
		238: {268, 4},
		239: {268, 4},
		240: {268, 4},
		241: {119, 3},
		242: {228, 0},
		243: {228, 1},
		244: {173, 3},
		245: {173, 1},
		246: {173, 3},
		247: {173, 1},
		248: {173, 3},
		249: {173, 1},
		250: {169, 2},
		251: {139, 0},
		252: {139, 1},
		253: {175, 2},
		254: {257, 0},
		255: {257, 1},
		256: {172, 1},
		257: {172, 1},
		258: {255, 0},
		259: {296, 0},
		260: {296, 3},
		261: {296, 1},
		262: {256, 1},
		263: {256, 3},
		264: {267, 2},
		265: {267, 8},
		266: {237, 2},
		267: {238, 0},
		268: {238, 1},
		269: {163, 1},
		270: {163, 1},
		271: {163, 1},
		272: {163, 3},
		273: {163, 4},
		274: {163, 5},
		275: {163, 4},
		276: {164, 0},
		277: {164, 1},
		278: {147, 0},
		279: {147, 1},
		280: {146, 1},
		281: {146, 2},
		282: {138, 5},
		283: {140, 0},
		284: {140, 2},
		285: {155, 0},
		286: {155, 3},
		287: {183, 1},
		288: {183, 3},
		289: {171, 1},
		290: {171, 2},
		291: {261, 1},
		292: {261, 1},
		293: {156, 0},
		294: {156, 2},
		295: {161, 0},
		296: {161, 3},
		297: {159, 0},
		298: {159, 2},
		299: {159, 4},
		300: {159, 4},
		301: {176, 1},
		302: {176, 1},
		303: {137, 1},
		304: {225, 9},
		305: {248, 1},
		306: {248, 3},
		307: {201, 5},
		308: {227, 2},
		309: {203, 0},
		310: {203, 2},
		311: {204, 0},
		312: {204, 3},
		313: {134, 1},
		314: {178, 1},
		315: {178, 3},
		316: {293, 0},
		317: {293, 1},
		318: {210, 1},
		319: {81, 1},
		320: {44, 1},
		321: {266, 1},
		322: {266, 3},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [549][]uint16{
		// 0
		{1: 305, 305, 29: 45, 31: 351, 45, 347, 45, 138: 350, 146: 349, 344, 338, 180: 341, 328, 184: 342, 329, 343, 330, 331, 190: 332, 345, 333, 334, 195: 327, 346, 335, 205: 336, 220: 348, 337, 224: 326, 339, 352, 340, 242: 324, 272: 325},
		{1: 323},
		{1: 322, 870},
		{1: 321, 321},
		{1: 319, 319},
		// 5
		{1: 318, 318},
		{1: 317, 317},
		{1: 316, 316},
		{1: 315, 315},
		{1: 314, 314},
		// 10
		{1: 313, 313},
		{1: 312, 312},
		{1: 311, 311},
		{1: 310, 310},
		{1: 309, 309},
		// 15
		{1: 308, 308},
		{1: 307, 307},
		{1: 306, 306},
		{1: 304, 304},
		{1: 303, 303},
		// 20
		{158: 300, 199: 851, 252: 852, 276: 853},
		{29: 447, 32: 815, 816, 817, 223: 446},
		{158: 806, 199: 805},
		{29: 45, 31: 351, 138: 350, 146: 349, 445, 804},
		{127: 286, 131: 286, 206: 768, 767, 766},
		// 25
		{1: 128, 128},
		{29: 44, 31: 351, 44, 44, 44, 138: 765},
		{29: 43, 31: 43, 43, 43, 43},
		{3: 355, 44: 356},
		{3: 355, 44: 354, 134: 353},
		// 30
		{1: 15, 15},
		{10, 10, 10, 10, 10, 8: 10, 10, 10, 14: 10, 16: 10, 115: 10, 127: 10, 131: 10},
		{3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 46: 3, 115: 3, 3, 3, 3, 120: 3, 3, 3, 3, 3, 127: 3, 130: 3, 3, 136: 3, 141: 3, 3, 152: 3, 165: 3, 179: 3},
		{41: 357},
		{14: 363, 119: 362, 150: 360, 359, 162: 364, 167: 358, 361},
		// 35
		{98, 98, 98, 4: 98, 706, 8: 98, 98, 98, 16: 98, 29: 98, 31: 98, 98, 98, 98, 115: 98, 98, 125: 704, 702, 128: 703, 705, 144: 754, 149: 755, 173: 753, 268: 752},
		{14: 363, 119: 700, 135: 747, 153: 749, 166: 748},
		{14: 363, 119: 700, 135: 744, 153: 743, 166: 742},
		{45: 573, 137: 696},
		{89, 89, 89, 4: 89, 89, 8: 89, 89, 89, 16: 89, 29: 89, 31: 89, 89, 89, 89, 115: 89, 89, 125: 89, 89, 128: 89, 89, 144: 89, 149: 89},
		// 40
		{72, 3: 355, 15: 72, 44: 527, 124: 72, 139: 526, 169: 525},
		{29: 40, 31: 40, 40, 40, 40, 115: 366, 140: 365},
		{29: 41, 31: 41, 41, 41, 41},
		{3: 355, 5: 406, 408, 396, 14: 409, 44: 441, 397, 420, 402, 405, 439, 401, 403, 414, 432, 430, 438, 435, 415, 416, 427, 398, 423, 434, 399, 417, 421, 418, 424, 404, 413, 419, 433, 411, 422, 429, 428, 425, 426, 431, 400, 412, 388, 367, 368, 370, 389, 440, 378, 371, 391, 375, 383, 382, 377, 392, 386, 379, 376, 410, 384, 395, 381, 380, 369, 373, 385, 390, 372, 387, 437, 436, 374, 393, 394, 407},
		{267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 15: 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 136: 691},
		// 45
		{266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 15: 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266},
		{265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 15: 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265},
		{264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 15: 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264},
		{263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 15: 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263},
		{262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 15: 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262},
		// 50
		{261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 15: 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261},
		{260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 15: 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260},
		{259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 15: 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259},
		{258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 15: 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258},
		{257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 15: 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257},
		// 55
		{256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 15: 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256},
		{255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 15: 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255},
		{254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 15: 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254},
		{253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 15: 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253},
		{252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 15: 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252},
		// 60
		{251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 15: 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251},
		{250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 15: 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250},
		{249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 15: 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249},
		{248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 15: 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248},
		{247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 15: 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247},
		// 65
		{246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 15: 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 136: 246, 165: 246},
		{245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 15: 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245},
		{244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 15: 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244},
		{243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 15: 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243},
		{242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 15: 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242},
		// 70
		{241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 15: 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241},
		{240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 15: 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240},
		{239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 15: 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239},
		{238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 15: 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238},
		{237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 15: 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237},
		// 75
		{236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 15: 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236},
		{235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 15: 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235},
		{234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 15: 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234},
		{7: 690},
		{7: 689},
		// 80
		{7: 688},
		{7: 680},
		{223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 15: 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223},
		{3: 355, 5: 406, 408, 396, 14: 409, 44: 441, 397, 420, 402, 405, 439, 401, 403, 414, 432, 430, 438, 435, 415, 416, 427, 398, 423, 434, 399, 417, 421, 418, 424, 404, 413, 419, 433, 411, 422, 429, 428, 425, 426, 431, 400, 412, 388, 367, 368, 370, 389, 440, 378, 371, 391, 375, 383, 382, 377, 392, 386, 379, 376, 410, 384, 395, 381, 380, 369, 373, 385, 390, 372, 387, 437, 436, 374, 393, 394, 679},
		{39, 39, 39, 5: 466, 479, 8: 39, 39, 39, 12: 462, 465, 15: 477, 39, 475, 478, 464, 463, 470, 469, 467, 471, 472, 468, 473, 476, 39, 474, 39, 39, 39, 39, 39},
		// 85
		{3: 355, 5: 406, 408, 396, 14: 409, 44: 441, 397, 420, 402, 405, 439, 401, 403, 414, 432, 430, 438, 435, 415, 416, 427, 398, 423, 434, 399, 417, 421, 418, 424, 404, 413, 419, 433, 411, 422, 429, 428, 425, 426, 431, 400, 412, 388, 367, 368, 370, 389, 440, 378, 371, 391, 375, 383, 382, 377, 392, 386, 379, 376, 410, 384, 395, 381, 380, 369, 373, 385, 390, 372, 387, 437, 436, 374, 393, 394, 678},
		{3: 355, 5: 406, 408, 396, 14: 409, 29: 45, 31: 351, 44: 441, 397, 420, 402, 405, 439, 401, 403, 414, 432, 430, 438, 435, 415, 416, 427, 398, 423, 434, 399, 417, 421, 418, 424, 404, 413, 419, 433, 411, 422, 429, 428, 425, 426, 431, 400, 412, 388, 367, 368, 370, 389, 440, 378, 371, 391, 375, 383, 382, 377, 392, 386, 379, 376, 410, 384, 395, 381, 380, 369, 373, 385, 390, 372, 387, 437, 436, 374, 393, 394, 676, 138: 350, 146: 349, 445, 444},
		{14: 670},
		{14: 202},
		{14: 201},
		// 90
		{14: 200},
		{14: 199},
		{14: 198},
		{14: 197},
		{14: 196},
		// 95
		{14: 195},
		{14: 194},
		{14: 193},
		{14: 192},
		{14: 191},
		// 100
		{14: 190},
		{14: 189},
		{14: 188},
		{14: 661},
		{14: 655},
		// 105
		{14: 651},
		{14: 647},
		{14: 643},
		{14: 639},
		{14: 635},
		// 110
		{14: 628},
		{14: 615},
		{14: 594},
		{145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 15: 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145},
		{144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 15: 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144},
		// 115
		{3: 355, 5: 406, 408, 396, 14: 409, 39: 582, 44: 441, 397, 420, 402, 405, 439, 401, 403, 414, 432, 430, 438, 435, 415, 416, 427, 398, 423, 434, 399, 417, 421, 418, 424, 404, 413, 419, 433, 411, 422, 429, 428, 425, 426, 431, 400, 412, 388, 367, 368, 370, 389, 440, 378, 371, 391, 375, 383, 382, 377, 392, 386, 379, 376, 410, 384, 395, 381, 380, 369, 373, 385, 390, 372, 387, 437, 436, 374, 393, 394, 579, 170: 581, 230: 580},
		{14: 443, 86: 442},
		{129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 15: 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129},
		{4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 15: 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 136: 4, 165: 4},
		{130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 15: 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130},
		// 120
		{29: 45, 31: 351, 138: 350, 146: 349, 445, 444},
		{578},
		{29: 447, 223: 446},
		{11: 516, 154: 515},
		{3: 173, 5: 173, 173, 173, 12: 450, 14: 173, 45: 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 132: 448, 449},
		// 125
		{3: 172, 5: 172, 172, 172, 14: 172, 45: 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172},
		{3: 355, 5: 406, 408, 396, 14: 409, 44: 455, 397, 420, 402, 405, 439, 401, 403, 414, 432, 430, 438, 435, 415, 416, 427, 398, 423, 434, 399, 417, 421, 418, 424, 404, 413, 419, 433, 411, 422, 429, 428, 425, 426, 431, 400, 412, 388, 367, 368, 370, 389, 440, 378, 371, 391, 375, 383, 382, 377, 392, 386, 379, 376, 410, 384, 395, 381, 380, 369, 373, 385, 390, 372, 387, 437, 436, 374, 393, 394, 451, 145: 454, 198: 453, 270: 452},
		{11: 124},
		{116, 116, 116, 355, 116, 466, 479, 484, 116, 116, 116, 116, 462, 465, 15: 477, 17: 475, 478, 464, 463, 470, 469, 467, 471, 472, 468, 473, 476, 30: 474, 36: 116, 116, 41: 483, 44: 482, 244: 481, 480},
		{4: 460, 11: 125},
		// 130
		{4: 123, 11: 123},
		{4: 121, 11: 121},
		{3: 4, 4, 4, 4, 4, 11: 4, 4, 4, 15: 4, 17: 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 30: 4, 41: 4, 136: 4, 179: 456},
		{4: 118, 11: 118, 234: 457, 263: 458},
		{4: 120, 11: 120},
		// 135
		{7: 396, 85: 459},
		{4: 117, 11: 117},
		{3: 355, 5: 406, 408, 396, 14: 409, 44: 455, 397, 420, 402, 405, 439, 401, 403, 414, 432, 430, 438, 435, 415, 416, 427, 398, 423, 434, 399, 417, 421, 418, 424, 404, 413, 419, 433, 411, 422, 429, 428, 425, 426, 431, 400, 412, 388, 367, 368, 370, 389, 440, 378, 371, 391, 375, 383, 382, 377, 392, 386, 379, 376, 410, 384, 395, 381, 380, 369, 373, 385, 390, 372, 387, 437, 436, 374, 393, 394, 451, 145: 454, 198: 461},
		{4: 122, 11: 122},
		{3: 355, 5: 406, 408, 396, 14: 409, 44: 441, 397, 420, 402, 405, 439, 401, 403, 414, 432, 430, 438, 435, 415, 416, 427, 398, 423, 434, 399, 417, 421, 418, 424, 404, 413, 419, 433, 411, 422, 429, 428, 425, 426, 431, 400, 412, 388, 367, 368, 370, 389, 440, 378, 371, 391, 375, 383, 382, 377, 392, 386, 379, 376, 410, 384, 395, 381, 380, 369, 373, 385, 390, 372, 387, 437, 436, 374, 393, 394, 514},
		// 140
		{3: 355, 5: 406, 408, 396, 14: 409, 44: 441, 397, 420, 402, 405, 439, 401, 403, 414, 432, 430, 438, 435, 415, 416, 427, 398, 423, 434, 399, 417, 421, 418, 424, 404, 413, 419, 433, 411, 422, 429, 428, 425, 426, 431, 400, 412, 388, 367, 368, 370, 389, 440, 378, 371, 391, 375, 383, 382, 377, 392, 386, 379, 376, 410, 384, 395, 381, 380, 369, 373, 385, 390, 372, 387, 437, 436, 374, 393, 394, 513},
		{3: 355, 5: 406, 408, 396, 14: 409, 44: 441, 397, 420, 402, 405, 439, 401, 403, 414, 432, 430, 438, 435, 415, 416, 427, 398, 423, 434, 399, 417, 421, 418, 424, 404, 413, 419, 433, 411, 422, 429, 428, 425, 426, 431, 400, 412, 388, 367, 368, 370, 389, 440, 378, 371, 391, 375, 383, 382, 377, 392, 386, 379, 376, 410, 384, 395, 381, 380, 369, 373, 385, 390, 372, 387, 437, 436, 374, 393, 394, 512},
		{3: 355, 5: 406, 408, 396, 14: 409, 44: 441, 397, 420, 402, 405, 439, 401, 403, 414, 432, 430, 438, 435, 415, 416, 427, 398, 423, 434, 399, 417, 421, 418, 424, 404, 413, 419, 433, 411, 422, 429, 428, 425, 426, 431, 400, 412, 388, 367, 368, 370, 389, 440, 378, 371, 391, 375, 383, 382, 377, 392, 386, 379, 376, 410, 384, 395, 381, 380, 369, 373, 385, 390, 372, 387, 437, 436, 374, 393, 394, 511},
		{3: 355, 5: 406, 408, 396, 14: 409, 44: 441, 397, 420, 402, 405, 439, 401, 403, 414, 432, 430, 438, 435, 415, 416, 427, 398, 423, 434, 399, 417, 421, 418, 424, 404, 413, 419, 433, 411, 422, 429, 428, 425, 426, 431, 400, 412, 388, 367, 368, 370, 389, 440, 378, 371, 391, 375, 383, 382, 377, 392, 386, 379, 376, 410, 384, 395, 381, 380, 369, 373, 385, 390, 372, 387, 437, 436, 374, 393, 394, 510},
		{3: 355, 5: 406, 408, 396, 14: 409, 44: 441, 397, 420, 402, 405, 439, 401, 403, 414, 432, 430, 438, 435, 415, 416, 427, 398, 423, 434, 399, 417, 421, 418, 424, 404, 413, 419, 433, 411, 422, 429, 428, 425, 426, 431, 400, 412, 388, 367, 368, 370, 389, 440, 378, 371, 391, 375, 383, 382, 377, 392, 386, 379, 376, 410, 384, 395, 381, 380, 369, 373, 385, 390, 372, 387, 437, 436, 374, 393, 394, 509},
		// 145
		{3: 355, 5: 406, 408, 396, 14: 409, 44: 441, 397, 420, 402, 405, 439, 401, 403, 414, 432, 430, 438, 435, 415, 416, 427, 398, 423, 434, 399, 417, 421, 418, 424, 404, 413, 419, 433, 411, 422, 429, 428, 425, 426, 431, 400, 412, 388, 367, 368, 370, 389, 440, 378, 371, 391, 375, 383, 382, 377, 392, 386, 379, 376, 410, 384, 395, 381, 380, 369, 373, 385, 390, 372, 387, 437, 436, 374, 393, 394, 508},
		{3: 355, 5: 406, 408, 396, 14: 409, 44: 441, 397, 420, 402, 405, 439, 401, 403, 414, 432, 430, 438, 435, 415, 416, 427, 398, 423, 434, 399, 417, 421, 418, 424, 404, 413, 419, 433, 411, 422, 429, 428, 425, 426, 431, 400, 412, 388, 367, 368, 370, 389, 440, 378, 371, 391, 375, 383, 382, 377, 392, 386, 379, 376, 410, 384, 395, 381, 380, 369, 373, 385, 390, 372, 387, 437, 436, 374, 393, 394, 507},
		{3: 355, 5: 406, 408, 396, 14: 409, 44: 441, 397, 420, 402, 405, 439, 401, 403, 414, 432, 430, 438, 435, 415, 416, 427, 398, 423, 434, 399, 417, 421, 418, 424, 404, 413, 419, 433, 411, 422, 429, 428, 425, 426, 431, 400, 412, 388, 367, 368, 370, 389, 440, 378, 371, 391, 375, 383, 382, 377, 392, 386, 379, 376, 410, 384, 395, 381, 380, 369, 373, 385, 390, 372, 387, 437, 436, 374, 393, 394, 506},
		{3: 355, 5: 406, 408, 396, 14: 409, 44: 441, 397, 420, 402, 405, 439, 401, 403, 414, 432, 430, 438, 435, 415, 416, 427, 398, 423, 434, 399, 417, 421, 418, 424, 404, 413, 419, 433, 411, 422, 429, 428, 425, 426, 431, 400, 412, 388, 367, 368, 370, 389, 440, 378, 371, 391, 375, 383, 382, 377, 392, 386, 379, 376, 410, 384, 395, 381, 380, 369, 373, 385, 390, 372, 387, 437, 436, 374, 393, 394, 505},
		{3: 355, 5: 406, 408, 396, 14: 409, 44: 441, 397, 420, 402, 405, 439, 401, 403, 414, 432, 430, 438, 435, 415, 416, 427, 398, 423, 434, 399, 417, 421, 418, 424, 404, 413, 419, 433, 411, 422, 429, 428, 425, 426, 431, 400, 412, 388, 367, 368, 370, 389, 440, 378, 371, 391, 375, 383, 382, 377, 392, 386, 379, 376, 410, 384, 395, 381, 380, 369, 373, 385, 390, 372, 387, 437, 436, 374, 393, 394, 504},
		// 150
		{3: 355, 5: 406, 408, 396, 14: 409, 44: 441, 397, 420, 402, 405, 439, 401, 403, 414, 432, 430, 438, 435, 415, 416, 427, 398, 423, 434, 399, 417, 421, 418, 424, 404, 413, 419, 433, 411, 422, 429, 428, 425, 426, 431, 400, 412, 388, 367, 368, 370, 389, 440, 378, 371, 391, 375, 383, 382, 377, 392, 386, 379, 376, 410, 384, 395, 381, 380, 369, 373, 385, 390, 372, 387, 437, 436, 374, 393, 394, 503},
		{3: 355, 5: 406, 408, 396, 14: 409, 44: 441, 397, 420, 402, 405, 439, 401, 403, 414, 432, 430, 438, 435, 415, 416, 427, 398, 423, 434, 399, 417, 421, 418, 424, 404, 413, 419, 433, 411, 422, 429, 428, 425, 426, 431, 400, 412, 388, 367, 368, 370, 389, 440, 378, 371, 391, 375, 383, 382, 377, 392, 386, 379, 376, 410, 384, 395, 381, 380, 369, 373, 385, 390, 372, 387, 437, 436, 374, 393, 394, 502},
		{3: 355, 5: 406, 408, 396, 14: 409, 44: 441, 397, 420, 402, 405, 439, 401, 403, 414, 432, 430, 438, 435, 415, 416, 427, 398, 423, 434, 399, 417, 421, 418, 424, 404, 413, 419, 433, 411, 422, 429, 428, 425, 426, 431, 400, 412, 388, 367, 368, 370, 389, 440, 378, 371, 391, 375, 383, 382, 377, 392, 386, 379, 376, 410, 384, 395, 381, 380, 369, 373, 385, 390, 372, 387, 437, 436, 374, 393, 394, 501},
		{3: 355, 5: 406, 408, 396, 14: 409, 44: 441, 397, 420, 402, 405, 439, 401, 403, 414, 432, 430, 438, 435, 415, 416, 427, 398, 423, 434, 399, 417, 421, 418, 424, 404, 413, 419, 433, 411, 422, 429, 428, 425, 426, 431, 400, 412, 388, 367, 368, 370, 389, 440, 378, 371, 391, 375, 383, 382, 377, 392, 386, 379, 376, 410, 384, 395, 381, 380, 369, 373, 385, 390, 372, 387, 437, 436, 374, 393, 394, 500},
		{6: 498, 218: 497},
		// 155
		{14: 489, 48: 405, 84: 490, 209: 496},
		{18: 487},
		{119, 119, 119, 4: 119, 8: 119, 119, 119, 119, 36: 119, 119},
		{115, 115, 115, 4: 115, 8: 115, 115, 115, 115, 36: 115, 115},
		{114, 114, 114, 4: 114, 8: 114, 114, 114, 114, 36: 114, 114},
		// 160
		{3: 355, 7: 486, 44: 485},
		{112, 112, 112, 4: 112, 8: 112, 112, 112, 112, 36: 112, 112},
		{113, 113, 113, 4: 113, 8: 113, 113, 113, 113, 36: 113, 113},
		{111, 111, 111, 4: 111, 8: 111, 111, 111, 111, 36: 111, 111},
		{14: 489, 48: 405, 84: 490, 209: 488},
		// 165
		{135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 15: 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135},
		{3: 355, 5: 406, 408, 396, 14: 409, 44: 441, 397, 420, 402, 405, 439, 401, 403, 414, 432, 430, 438, 435, 415, 416, 427, 398, 423, 434, 399, 417, 421, 418, 424, 404, 413, 419, 433, 411, 422, 429, 428, 425, 426, 431, 400, 412, 388, 367, 368, 370, 389, 440, 378, 371, 391, 375, 383, 382, 377, 392, 386, 379, 376, 410, 384, 395, 381, 380, 369, 373, 385, 390, 372, 387, 437, 436, 374, 393, 394, 491, 277: 492},
		{133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 15: 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133},
		{132, 4: 132, 466, 479, 12: 462, 465, 15: 477, 17: 475, 478, 464, 463, 470, 469, 467, 471, 472, 468, 473, 476, 30: 474},
		{493, 4: 494},
		// 170
		{134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 15: 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134},
		{3: 355, 5: 406, 408, 396, 14: 409, 44: 441, 397, 420, 402, 405, 439, 401, 403, 414, 432, 430, 438, 435, 415, 416, 427, 398, 423, 434, 399, 417, 421, 418, 424, 404, 413, 419, 433, 411, 422, 429, 428, 425, 426, 431, 400, 412, 388, 367, 368, 370, 389, 440, 378, 371, 391, 375, 383, 382, 377, 392, 386, 379, 376, 410, 384, 395, 381, 380, 369, 373, 385, 390, 372, 387, 437, 436, 374, 393, 394, 495},
		{131, 4: 131, 466, 479, 12: 462, 465, 15: 477, 17: 475, 478, 464, 463, 470, 469, 467, 471, 472, 468, 473, 476, 30: 474},
		{136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 15: 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136},
		{160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 15: 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160},
		// 175
		{218: 499},
		{159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 15: 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159},
		{205, 205, 205, 205, 205, 466, 479, 205, 205, 205, 205, 205, 462, 465, 15: 477, 205, 475, 478, 464, 463, 470, 469, 467, 471, 472, 468, 205, 205, 205, 474, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205},
		{208, 208, 208, 208, 208, 466, 479, 208, 208, 208, 208, 208, 462, 465, 15: 477, 208, 208, 478, 464, 463, 470, 469, 467, 471, 472, 468, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208},
		{209, 209, 209, 209, 209, 466, 479, 209, 209, 209, 209, 209, 462, 465, 15: 477, 209, 475, 478, 464, 463, 470, 469, 467, 471, 472, 468, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209},
		// 180
		{210, 210, 210, 210, 210, 466, 479, 210, 210, 210, 210, 210, 462, 465, 15: 477, 210, 475, 478, 464, 463, 470, 469, 467, 471, 472, 468, 210, 210, 210, 474, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210},
		{211, 211, 211, 211, 211, 466, 479, 211, 211, 211, 211, 211, 462, 465, 15: 211, 211, 211, 211, 464, 463, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211},
		{212, 212, 212, 212, 212, 466, 479, 212, 212, 212, 212, 212, 462, 465, 15: 212, 212, 212, 212, 464, 463, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212},
		{213, 213, 213, 213, 213, 466, 479, 213, 213, 213, 213, 213, 462, 465, 15: 213, 213, 213, 213, 464, 463, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213},
		{214, 214, 214, 214, 214, 466, 479, 214, 214, 214, 214, 214, 462, 465, 15: 214, 214, 214, 214, 464, 463, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214},
		// 185
		{215, 215, 215, 215, 215, 466, 479, 215, 215, 215, 215, 215, 462, 465, 15: 215, 215, 215, 215, 464, 463, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215},
		{216, 216, 216, 216, 216, 466, 479, 216, 216, 216, 216, 216, 462, 465, 15: 216, 216, 216, 216, 464, 463, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216},
		{217, 217, 217, 217, 217, 217, 479, 217, 217, 217, 217, 217, 462, 217, 15: 217, 217, 217, 217, 464, 463, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217},
		{218, 218, 218, 218, 218, 218, 479, 218, 218, 218, 218, 218, 462, 218, 15: 218, 218, 218, 218, 464, 463, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218},
		{219, 219, 219, 219, 219, 219, 479, 219, 219, 219, 219, 219, 219, 219, 15: 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219},
		// 190
		{220, 220, 220, 220, 220, 220, 479, 220, 220, 220, 220, 220, 220, 220, 15: 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220},
		{221, 221, 221, 221, 221, 221, 479, 221, 221, 221, 221, 221, 221, 221, 15: 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221},
		{40, 40, 40, 8: 40, 40, 40, 16: 40, 115: 366, 140: 549},
		{214: 519, 518, 260: 517},
		{110, 110, 110, 4: 547, 8: 110, 110, 110, 16: 110, 115: 110},
		// 195
		{109, 109, 109, 4: 109, 8: 109, 109, 109, 16: 109, 115: 109},
		{14: 522, 119: 362, 150: 360, 359, 162: 521, 167: 358, 361, 251: 520},
		{105, 105, 105, 4: 105, 8: 105, 105, 105, 16: 105, 115: 105, 543, 249: 544, 542},
		{102, 102, 102, 4: 102, 8: 102, 102, 102, 16: 102, 115: 102, 102},
		{72, 3: 355, 14: 363, 72, 44: 527, 119: 362, 124: 72, 139: 526, 150: 360, 359, 162: 524, 167: 358, 361, 525, 262: 523},
		// 200
		{539, 4: 540},
		{100, 4: 100},
		{538},
		{69, 15: 532, 122: 69, 69, 531, 172: 529, 175: 530, 257: 528},
		{71, 71, 71, 4: 71, 11: 71, 15: 71, 46: 71, 122: 71, 71, 71, 130: 71, 152: 71},
		// 205
		{73, 122: 73, 73},
		{3: 355, 44: 535, 210: 534, 256: 533},
		{68, 122: 68, 68},
		{3: 67},
		{3: 66},
		// 210
		{70, 12: 70, 70, 117: 70, 70, 120: 70, 70, 70, 70, 142: 536},
		{61, 12: 61, 61, 117: 61, 61, 120: 61, 61, 61, 61, 142: 61},
		{5, 12: 5, 5, 117: 5, 5, 120: 5, 5, 5, 5, 142: 5},
		{3: 355, 44: 535, 210: 537},
		{60, 12: 60, 60, 117: 60, 60, 120: 60, 60, 60, 60, 142: 60},
		// 215
		{82, 82, 82, 4: 82, 82, 8: 82, 82, 82, 14: 82, 16: 82, 29: 82, 31: 82, 82, 82, 82, 82, 115: 82, 82, 125: 82, 82, 128: 82, 82, 144: 82, 149: 82},
		{101, 101, 101, 4: 101, 8: 101, 101, 101, 16: 101, 115: 101, 101},
		{14: 363, 119: 362, 150: 360, 359, 162: 541, 167: 358, 361},
		{99, 4: 99},
		{103, 103, 103, 4: 103, 8: 103, 103, 103, 16: 103, 115: 103, 269: 546},
		// 220
		{3: 355, 44: 354, 134: 545},
		{104, 104, 104, 4: 104, 8: 104, 104, 104, 16: 104, 115: 104},
		{106, 106, 106, 4: 106, 8: 106, 106, 106, 16: 106, 115: 106},
		{107, 107, 107, 4: 107, 8: 107, 107, 107, 16: 107, 115: 107},
		{214: 519, 548},
		// 225
		{108, 108, 108, 4: 108, 8: 108, 108, 108, 16: 108, 115: 108},
		{38, 38, 38, 8: 38, 38, 38, 16: 551, 155: 550},
		{30, 30, 30, 8: 30, 30, 562, 156: 561},
		{182: 552},
		{3: 355, 5: 406, 408, 396, 14: 409, 44: 441, 397, 420, 402, 405, 439, 401, 403, 414, 432, 430, 438, 435, 415, 416, 427, 398, 423, 434, 399, 417, 421, 418, 424, 404, 413, 419, 433, 411, 422, 429, 428, 425, 426, 431, 400, 412, 388, 367, 368, 370, 389, 440, 378, 371, 391, 375, 383, 382, 377, 392, 386, 379, 376, 410, 384, 395, 381, 380, 369, 373, 385, 390, 372, 387, 437, 436, 374, 393, 394, 451, 145: 555, 171: 554, 183: 553},
		// 230
		{37, 37, 37, 4: 559, 8: 37, 37, 37},
		{36, 36, 36, 4: 36, 8: 36, 36, 36},
		{34, 34, 34, 4: 34, 8: 34, 34, 34, 36: 557, 558, 261: 556},
		{33, 33, 33, 4: 33, 8: 33, 33, 33},
		{32, 32, 32, 4: 32, 8: 32, 32, 32},
		// 235
		{31, 31, 31, 4: 31, 8: 31, 31, 31},
		{3: 355, 5: 406, 408, 396, 14: 409, 44: 441, 397, 420, 402, 405, 439, 401, 403, 414, 432, 430, 438, 435, 415, 416, 427, 398, 423, 434, 399, 417, 421, 418, 424, 404, 413, 419, 433, 411, 422, 429, 428, 425, 426, 431, 400, 412, 388, 367, 368, 370, 389, 440, 378, 371, 391, 375, 383, 382, 377, 392, 386, 379, 376, 410, 384, 395, 381, 380, 369, 373, 385, 390, 372, 387, 437, 436, 374, 393, 394, 451, 145: 555, 171: 560},
		{35, 35, 35, 4: 35, 8: 35, 35, 35},
		{28, 28, 28, 8: 28, 565, 161: 564},
		{3: 355, 5: 406, 408, 396, 14: 409, 44: 441, 397, 420, 402, 405, 439, 401, 403, 414, 432, 430, 438, 435, 415, 416, 427, 398, 423, 434, 399, 417, 421, 418, 424, 404, 413, 419, 433, 411, 422, 429, 428, 425, 426, 431, 400, 412, 388, 367, 368, 370, 389, 440, 378, 371, 391, 375, 383, 382, 377, 392, 386, 379, 376, 410, 384, 395, 381, 380, 369, 373, 385, 390, 372, 387, 437, 436, 374, 393, 394, 563},
		// 240
		{29, 29, 29, 5: 466, 479, 8: 29, 29, 12: 462, 465, 15: 477, 17: 475, 478, 464, 463, 470, 469, 467, 471, 472, 468, 473, 476, 30: 474},
		{26, 26, 26, 8: 569, 159: 568},
		{182: 566},
		{3: 355, 5: 406, 408, 396, 14: 409, 44: 441, 397, 420, 402, 405, 439, 401, 403, 414, 432, 430, 438, 435, 415, 416, 427, 398, 423, 434, 399, 417, 421, 418, 424, 404, 413, 419, 433, 411, 422, 429, 428, 425, 426, 431, 400, 412, 388, 367, 368, 370, 389, 440, 378, 371, 391, 375, 383, 382, 377, 392, 386, 379, 376, 410, 384, 395, 381, 380, 369, 373, 385, 390, 372, 387, 437, 436, 374, 393, 394, 451, 145: 555, 171: 554, 183: 567},
		{27, 27, 27, 4: 559, 8: 27},
		// 245
		{126, 126, 126},
		{45: 573, 117: 572, 137: 571, 176: 570},
		{25, 25, 25, 4: 574, 160: 575},
		{22, 22, 22, 4: 22, 160: 22},
		{21, 21, 21, 4: 21, 160: 21},
		// 250
		{20, 20, 20, 4: 20, 143: 20, 153: 20, 160: 20, 166: 20},
		{45: 573, 117: 572, 137: 571, 176: 577},
		{45: 573, 117: 572, 137: 571, 176: 576},
		{23, 23, 23},
		{24, 24, 24},
		// 255
		{127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 15: 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127},
		{5: 466, 479, 12: 462, 465, 15: 477, 17: 475, 478, 464, 463, 470, 469, 467, 471, 472, 468, 473, 476, 30: 474, 39: 582, 170: 581, 230: 591},
		{38: 138, 582, 588, 170: 587, 194: 586},
		{38: 141, 141, 141},
		{3: 355, 5: 406, 408, 396, 14: 409, 44: 441, 397, 420, 402, 405, 439, 401, 403, 414, 432, 430, 438, 435, 415, 416, 427, 398, 423, 434, 399, 417, 421, 418, 424, 404, 413, 419, 433, 411, 422, 429, 428, 425, 426, 431, 400, 412, 388, 367, 368, 370, 389, 440, 378, 371, 391, 375, 383, 382, 377, 392, 386, 379, 376, 410, 384, 395, 381, 380, 369, 373, 385, 390, 372, 387, 437, 436, 374, 393, 394, 583},
		// 260
		{5: 466, 479, 12: 462, 465, 15: 477, 17: 475, 478, 464, 463, 470, 469, 467, 471, 472, 468, 473, 476, 30: 474, 43: 584},
		{3: 355, 5: 406, 408, 396, 14: 409, 44: 441, 397, 420, 402, 405, 439, 401, 403, 414, 432, 430, 438, 435, 415, 416, 427, 398, 423, 434, 399, 417, 421, 418, 424, 404, 413, 419, 433, 411, 422, 429, 428, 425, 426, 431, 400, 412, 388, 367, 368, 370, 389, 440, 378, 371, 391, 375, 383, 382, 377, 392, 386, 379, 376, 410, 384, 395, 381, 380, 369, 373, 385, 390, 372, 387, 437, 436, 374, 393, 394, 585},
		{5: 466, 479, 12: 462, 465, 15: 477, 17: 475, 478, 464, 463, 470, 469, 467, 471, 472, 468, 473, 476, 30: 474, 38: 139, 139, 139},
		{38: 590},
		{38: 140, 140, 140},
		// 265
		{3: 355, 5: 406, 408, 396, 14: 409, 44: 441, 397, 420, 402, 405, 439, 401, 403, 414, 432, 430, 438, 435, 415, 416, 427, 398, 423, 434, 399, 417, 421, 418, 424, 404, 413, 419, 433, 411, 422, 429, 428, 425, 426, 431, 400, 412, 388, 367, 368, 370, 389, 440, 378, 371, 391, 375, 383, 382, 377, 392, 386, 379, 376, 410, 384, 395, 381, 380, 369, 373, 385, 390, 372, 387, 437, 436, 374, 393, 394, 589},
		{5: 466, 479, 12: 462, 465, 15: 477, 17: 475, 478, 464, 463, 470, 469, 467, 471, 472, 468, 473, 476, 30: 474, 38: 137},
		{142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 15: 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142},
		{38: 138, 582, 588, 170: 587, 194: 592},
		{38: 593},
		// 270
		{143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 15: 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143},
		{3: 355, 5: 406, 408, 396, 14: 409, 44: 441, 397, 420, 402, 405, 439, 401, 403, 414, 432, 430, 438, 435, 415, 416, 427, 398, 423, 434, 399, 417, 421, 418, 424, 404, 413, 419, 433, 411, 422, 429, 428, 425, 426, 431, 400, 412, 388, 367, 368, 370, 389, 440, 378, 371, 391, 375, 383, 382, 377, 392, 386, 379, 376, 410, 384, 395, 381, 380, 369, 373, 385, 390, 372, 387, 437, 436, 374, 393, 394, 595},
		{5: 466, 479, 12: 462, 465, 15: 477, 17: 475, 478, 464, 463, 470, 469, 467, 471, 472, 468, 473, 476, 30: 474, 41: 596},
		{47: 606, 50: 605, 607, 236: 599, 239: 597, 241: 604, 246: 603, 253: 600, 601, 259: 602, 273: 598},
		{614},
		// 275
		{157},
		{156},
		{155},
		{154},
		{153},
		// 280
		{152},
		{151},
		{150},
		{149, 231: 611},
		{147, 231: 608},
		// 285
		{47: 609},
		{233: 610},
		{146},
		{47: 612},
		{233: 613},
		// 290
		{148},
		{158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 15: 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158},
		{189: 619, 202: 620, 216: 621, 618, 222: 622, 232: 617, 243: 616, 274: 623, 624},
		{11: 625},
		{11: 168},
		// 295
		{11: 167},
		{11: 166},
		{11: 165},
		{11: 164},
		{11: 163},
		// 300
		{11: 162},
		{11: 161},
		{3: 355, 5: 406, 408, 396, 14: 409, 44: 441, 397, 420, 402, 405, 439, 401, 403, 414, 432, 430, 438, 435, 415, 416, 427, 398, 423, 434, 399, 417, 421, 418, 424, 404, 413, 419, 433, 411, 422, 429, 428, 425, 426, 431, 400, 412, 388, 367, 368, 370, 389, 440, 378, 371, 391, 375, 383, 382, 377, 392, 386, 379, 376, 410, 384, 395, 381, 380, 369, 373, 385, 390, 372, 387, 437, 436, 374, 393, 394, 626},
		{627, 5: 466, 479, 12: 462, 465, 15: 477, 17: 475, 478, 464, 463, 470, 469, 467, 471, 472, 468, 473, 476, 30: 474},
		{169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 15: 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169},
		// 305
		{3: 173, 5: 173, 173, 173, 14: 173, 45: 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 132: 448, 629},
		{3: 355, 5: 406, 408, 396, 14: 409, 44: 441, 397, 420, 402, 405, 439, 401, 403, 414, 432, 430, 438, 435, 415, 416, 427, 398, 423, 434, 399, 417, 421, 418, 424, 404, 413, 419, 433, 411, 422, 429, 428, 425, 426, 431, 400, 412, 388, 367, 368, 370, 389, 440, 378, 371, 391, 375, 383, 382, 377, 392, 386, 379, 376, 410, 384, 395, 381, 380, 369, 373, 385, 390, 372, 387, 437, 436, 374, 393, 394, 630},
		{171, 4: 632, 466, 479, 12: 462, 465, 15: 477, 17: 475, 478, 464, 463, 470, 469, 467, 471, 472, 468, 473, 476, 30: 474, 258: 631},
		{634},
		{7: 396, 85: 633},
		// 310
		{170},
		{174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 15: 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174},
		{3: 173, 5: 173, 173, 173, 14: 173, 45: 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 132: 448, 636},
		{3: 355, 5: 406, 408, 396, 14: 409, 44: 441, 397, 420, 402, 405, 439, 401, 403, 414, 432, 430, 438, 435, 415, 416, 427, 398, 423, 434, 399, 417, 421, 418, 424, 404, 413, 419, 433, 411, 422, 429, 428, 425, 426, 431, 400, 412, 388, 367, 368, 370, 389, 440, 378, 371, 391, 375, 383, 382, 377, 392, 386, 379, 376, 410, 384, 395, 381, 380, 369, 373, 385, 390, 372, 387, 437, 436, 374, 393, 394, 637},
		{638, 5: 466, 479, 12: 462, 465, 15: 477, 17: 475, 478, 464, 463, 470, 469, 467, 471, 472, 468, 473, 476, 30: 474},
		// 315
		{175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 15: 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175},
		{3: 173, 5: 173, 173, 173, 14: 173, 45: 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 132: 448, 640},
		{3: 355, 5: 406, 408, 396, 14: 409, 44: 441, 397, 420, 402, 405, 439, 401, 403, 414, 432, 430, 438, 435, 415, 416, 427, 398, 423, 434, 399, 417, 421, 418, 424, 404, 413, 419, 433, 411, 422, 429, 428, 425, 426, 431, 400, 412, 388, 367, 368, 370, 389, 440, 378, 371, 391, 375, 383, 382, 377, 392, 386, 379, 376, 410, 384, 395, 381, 380, 369, 373, 385, 390, 372, 387, 437, 436, 374, 393, 394, 641},
		{642, 5: 466, 479, 12: 462, 465, 15: 477, 17: 475, 478, 464, 463, 470, 469, 467, 471, 472, 468, 473, 476, 30: 474},
		{176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 15: 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176},
		// 320
		{3: 173, 5: 173, 173, 173, 14: 173, 45: 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 132: 448, 644},
		{3: 355, 5: 406, 408, 396, 14: 409, 44: 441, 397, 420, 402, 405, 439, 401, 403, 414, 432, 430, 438, 435, 415, 416, 427, 398, 423, 434, 399, 417, 421, 418, 424, 404, 413, 419, 433, 411, 422, 429, 428, 425, 426, 431, 400, 412, 388, 367, 368, 370, 389, 440, 378, 371, 391, 375, 383, 382, 377, 392, 386, 379, 376, 410, 384, 395, 381, 380, 369, 373, 385, 390, 372, 387, 437, 436, 374, 393, 394, 645},
		{646, 5: 466, 479, 12: 462, 465, 15: 477, 17: 475, 478, 464, 463, 470, 469, 467, 471, 472, 468, 473, 476, 30: 474},
		{177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 15: 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177},
		{3: 173, 5: 173, 173, 173, 14: 173, 45: 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 132: 448, 648},
		// 325
		{3: 355, 5: 406, 408, 396, 14: 409, 44: 441, 397, 420, 402, 405, 439, 401, 403, 414, 432, 430, 438, 435, 415, 416, 427, 398, 423, 434, 399, 417, 421, 418, 424, 404, 413, 419, 433, 411, 422, 429, 428, 425, 426, 431, 400, 412, 388, 367, 368, 370, 389, 440, 378, 371, 391, 375, 383, 382, 377, 392, 386, 379, 376, 410, 384, 395, 381, 380, 369, 373, 385, 390, 372, 387, 437, 436, 374, 393, 394, 649},
		{650, 5: 466, 479, 12: 462, 465, 15: 477, 17: 475, 478, 464, 463, 470, 469, 467, 471, 472, 468, 473, 476, 30: 474},
		{178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 15: 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178},
		{3: 173, 5: 173, 173, 173, 14: 173, 45: 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 132: 448, 652},
		{3: 355, 5: 406, 408, 396, 14: 409, 44: 441, 397, 420, 402, 405, 439, 401, 403, 414, 432, 430, 438, 435, 415, 416, 427, 398, 423, 434, 399, 417, 421, 418, 424, 404, 413, 419, 433, 411, 422, 429, 428, 425, 426, 431, 400, 412, 388, 367, 368, 370, 389, 440, 378, 371, 391, 375, 383, 382, 377, 392, 386, 379, 376, 410, 384, 395, 381, 380, 369, 373, 385, 390, 372, 387, 437, 436, 374, 393, 394, 653},
		// 330
		{654, 5: 466, 479, 12: 462, 465, 15: 477, 17: 475, 478, 464, 463, 470, 469, 467, 471, 472, 468, 473, 476, 30: 474},
		{179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 15: 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179},
		{3: 173, 5: 173, 173, 173, 12: 656, 14: 173, 45: 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 132: 448, 657},
		{660},
		{3: 355, 5: 406, 408, 396, 14: 409, 44: 441, 397, 420, 402, 405, 439, 401, 403, 414, 432, 430, 438, 435, 415, 416, 427, 398, 423, 434, 399, 417, 421, 418, 424, 404, 413, 419, 433, 411, 422, 429, 428, 425, 426, 431, 400, 412, 388, 367, 368, 370, 389, 440, 378, 371, 391, 375, 383, 382, 377, 392, 386, 379, 376, 410, 384, 395, 381, 380, 369, 373, 385, 390, 372, 387, 437, 436, 374, 393, 394, 658},
		// 335
		{659, 5: 466, 479, 12: 462, 465, 15: 477, 17: 475, 478, 464, 463, 470, 469, 467, 471, 472, 468, 473, 476, 30: 474},
		{180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 15: 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180},
		{181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 15: 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181},
		{3: 355, 5: 406, 408, 396, 14: 409, 44: 441, 397, 420, 402, 405, 439, 401, 403, 414, 432, 430, 438, 435, 415, 416, 427, 398, 423, 434, 399, 417, 421, 418, 424, 404, 413, 419, 433, 411, 422, 429, 428, 425, 426, 431, 400, 412, 388, 367, 368, 370, 389, 440, 378, 371, 391, 375, 383, 382, 377, 392, 386, 379, 376, 410, 384, 395, 381, 380, 369, 373, 385, 390, 372, 387, 437, 436, 374, 393, 394, 662},
		{5: 466, 479, 11: 663, 462, 465, 15: 477, 17: 475, 478, 464, 463, 470, 469, 467, 471, 472, 468, 473, 476, 30: 474},
		// 340
		{3: 355, 5: 406, 408, 396, 14: 409, 44: 441, 397, 420, 402, 405, 439, 401, 403, 414, 432, 430, 438, 435, 415, 416, 427, 398, 423, 434, 399, 417, 421, 418, 424, 404, 413, 419, 433, 411, 422, 429, 428, 425, 426, 431, 400, 412, 388, 367, 368, 370, 389, 440, 378, 371, 391, 375, 383, 382, 377, 392, 386, 379, 376, 410, 384, 395, 381, 380, 369, 373, 385, 390, 372, 387, 437, 436, 374, 393, 394, 664, 271: 665},
		{184, 5: 466, 479, 12: 462, 465, 15: 477, 17: 475, 478, 464, 463, 470, 469, 467, 471, 472, 468, 473, 476, 30: 474, 42: 184},
		{183, 42: 667, 247: 666},
		{669},
		{3: 355, 5: 406, 408, 396, 14: 409, 44: 441, 397, 420, 402, 405, 439, 401, 403, 414, 432, 430, 438, 435, 415, 416, 427, 398, 423, 434, 399, 417, 421, 418, 424, 404, 413, 419, 433, 411, 422, 429, 428, 425, 426, 431, 400, 412, 388, 367, 368, 370, 389, 440, 378, 371, 391, 375, 383, 382, 377, 392, 386, 379, 376, 410, 384, 395, 381, 380, 369, 373, 385, 390, 372, 387, 437, 436, 374, 393, 394, 668},
		// 345
		{182, 5: 466, 479, 12: 462, 465, 15: 477, 17: 475, 478, 464, 463, 470, 469, 467, 471, 472, 468, 473, 476, 30: 474},
		{185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 15: 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185},
		{3: 355, 5: 406, 408, 396, 14: 409, 44: 441, 397, 420, 402, 405, 439, 401, 403, 414, 432, 430, 438, 435, 415, 416, 427, 398, 423, 434, 399, 417, 421, 418, 424, 404, 413, 419, 433, 411, 422, 429, 428, 425, 426, 431, 400, 412, 388, 367, 368, 370, 389, 440, 378, 371, 391, 375, 383, 382, 377, 392, 386, 379, 376, 410, 384, 395, 381, 380, 369, 373, 385, 390, 372, 387, 437, 436, 374, 393, 394, 671, 235: 672},
		{187, 4: 187, 466, 479, 12: 462, 465, 15: 477, 17: 475, 478, 464, 463, 470, 469, 467, 471, 472, 468, 473, 476, 30: 474},
		{673, 4: 674},
		// 350
		{203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 15: 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203},
		{3: 355, 5: 406, 408, 396, 14: 409, 44: 441, 397, 420, 402, 405, 439, 401, 403, 414, 432, 430, 438, 435, 415, 416, 427, 398, 423, 434, 399, 417, 421, 418, 424, 404, 413, 419, 433, 411, 422, 429, 428, 425, 426, 431, 400, 412, 388, 367, 368, 370, 389, 440, 378, 371, 391, 375, 383, 382, 377, 392, 386, 379, 376, 410, 384, 395, 381, 380, 369, 373, 385, 390, 372, 387, 437, 436, 374, 393, 394, 675},
		{186, 4: 186, 466, 479, 12: 462, 465, 15: 477, 17: 475, 478, 464, 463, 470, 469, 467, 471, 472, 468, 473, 476, 30: 474},
		{677, 5: 466, 479, 12: 462, 465, 15: 477, 17: 475, 478, 464, 463, 470, 469, 467, 471, 472, 468, 473, 476, 30: 474},
		{204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 15: 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204},
		// 355
		{207, 207, 207, 207, 207, 207, 479, 207, 207, 207, 207, 207, 207, 207, 15: 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207},
		{222, 222, 222, 222, 222, 222, 479, 222, 222, 222, 222, 222, 222, 222, 15: 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222},
		{189: 684, 202: 685, 216: 686, 683, 222: 687, 232: 682, 240: 681},
		{230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 15: 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230},
		{229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 15: 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229},
		// 360
		{228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 15: 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228},
		{227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 15: 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227},
		{226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 15: 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226},
		{225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 15: 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225},
		{224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 15: 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224},
		// 365
		{231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 15: 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231},
		{232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 15: 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232},
		{233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 15: 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233},
		{3: 355, 44: 693, 178: 692},
		{268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 15: 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 141: 268},
		// 370
		{9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 15: 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 136: 694, 141: 9},
		{3: 355, 44: 695},
		{8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 15: 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 141: 8},
		{153: 698, 166: 697},
		{14: 363, 119: 700, 135: 741},
		// 375
		{14: 363, 119: 700, 135: 699},
		{91, 91, 91, 4: 91, 8: 91, 91, 91, 16: 91, 29: 91, 31: 91, 91, 91, 91, 115: 91, 91},
		{5: 706, 14: 708, 125: 704, 702, 128: 703, 705, 173: 707, 267: 701},
		{14: 363, 119: 740},
		{3: 355, 15: 72, 44: 527, 122: 72, 72, 72, 139: 526, 169: 737},
		// 380
		{78, 12: 78, 78, 78, 35: 78, 115: 78, 117: 78, 120: 78},
		{3: 355, 15: 72, 44: 527, 122: 72, 124: 72, 139: 526, 169: 735},
		{76, 12: 76, 76, 76, 35: 76, 115: 76, 117: 76, 120: 76},
		{74, 12: 74, 74, 74, 35: 74, 115: 74, 117: 74, 120: 74},
		{12: 720, 721, 47, 117: 722, 120: 723, 163: 724, 734},
		// 385
		{5: 81, 14: 363, 119: 709, 125: 81, 81, 128: 81, 81, 228: 710},
		{80, 5: 80, 35: 80, 115: 80, 125: 80, 80, 128: 80, 80},
		{5: 706, 125: 704, 702, 128: 703, 705, 173: 711},
		{81, 14: 363, 35: 81, 115: 81, 119: 709, 228: 712},
		{40, 35: 40, 115: 366, 140: 713},
		// 390
		{56, 35: 715, 237: 716, 714},
		{718},
		{3: 355, 5: 406, 408, 396, 14: 409, 44: 441, 397, 420, 402, 405, 439, 401, 403, 414, 432, 430, 438, 435, 415, 416, 427, 398, 423, 434, 399, 417, 421, 418, 424, 404, 413, 419, 433, 411, 422, 429, 428, 425, 426, 431, 400, 412, 388, 367, 368, 370, 389, 440, 378, 371, 391, 375, 383, 382, 377, 392, 386, 379, 376, 410, 384, 395, 381, 380, 369, 373, 385, 390, 372, 387, 437, 436, 374, 393, 394, 717},
		{55},
		{57, 5: 466, 479, 12: 462, 465, 15: 477, 17: 475, 478, 464, 463, 470, 469, 467, 471, 472, 468, 473, 476, 30: 474},
		// 395
		{12: 720, 721, 47, 117: 722, 120: 723, 163: 724, 719},
		{14: 58},
		{14: 54, 118: 54, 121: 54},
		{14: 53, 118: 53, 121: 53},
		{14: 52, 118: 52, 121: 52},
		// 400
		{4: 726, 45: 573, 137: 725},
		{14: 46, 118: 46, 121: 46},
		{4: 730, 143: 729},
		{45: 573, 137: 727},
		{143: 728},
		// 405
		{14: 48, 118: 48, 121: 48},
		{14: 51, 118: 51, 121: 51},
		{45: 573, 137: 732, 143: 731},
		{14: 50, 118: 50, 121: 50},
		{143: 733},
		// 410
		{14: 49, 118: 49, 121: 49},
		{14: 59},
		{122: 736},
		{77, 12: 77, 77, 77, 35: 77, 115: 77, 117: 77, 120: 77},
		{122: 739, 738},
		// 415
		{79, 12: 79, 79, 79, 35: 79, 115: 79, 117: 79, 120: 79},
		{75, 12: 75, 75, 75, 35: 75, 115: 75, 117: 75, 120: 75},
		{86, 86, 86, 4: 86, 8: 86, 86, 86, 16: 86, 29: 86, 31: 86, 86, 86, 86, 115: 86, 86},
		{94, 94, 94, 4: 94, 8: 94, 94, 94, 16: 94, 29: 94, 31: 94, 94, 94, 94, 115: 94, 94},
		{14: 363, 119: 700, 135: 746},
		// 420
		{14: 363, 119: 700, 135: 745},
		{90, 90, 90, 4: 90, 8: 90, 90, 90, 16: 90, 29: 90, 31: 90, 90, 90, 90, 115: 90, 90},
		{92, 92, 92, 4: 92, 8: 92, 92, 92, 16: 92, 29: 92, 31: 92, 92, 92, 92, 115: 92, 92},
		{95, 95, 95, 4: 95, 8: 95, 95, 95, 16: 95, 29: 95, 31: 95, 95, 95, 95, 115: 95, 95},
		{97, 97, 97, 4: 97, 8: 97, 97, 97, 16: 97, 29: 97, 31: 97, 97, 97, 97, 115: 97, 97},
		// 425
		{14: 363, 119: 700, 135: 751},
		{14: 363, 119: 700, 135: 750},
		{93, 93, 93, 4: 93, 8: 93, 93, 93, 16: 93, 29: 93, 31: 93, 93, 93, 93, 115: 93, 93},
		{96, 96, 96, 4: 96, 8: 96, 96, 96, 16: 96, 29: 96, 31: 96, 96, 96, 96, 115: 96, 96},
		{14: 363, 119: 764},
		// 430
		{14: 363, 119: 763},
		{15: 532, 124: 531, 172: 529, 175: 759},
		{15: 532, 124: 531, 172: 529, 175: 756},
		{12: 720, 721, 117: 722, 47, 120: 723, 163: 724, 757},
		{118: 758},
		// 435
		{14: 84},
		{12: 720, 721, 117: 722, 47, 120: 723, 47, 163: 724, 760},
		{118: 762, 121: 761},
		{14: 85},
		{14: 83},
		// 440
		{87, 87, 87, 4: 87, 87, 8: 87, 87, 87, 16: 87, 29: 87, 31: 87, 87, 87, 87, 115: 87, 87, 125: 87, 87, 128: 87, 87, 144: 87, 149: 87},
		{88, 88, 88, 4: 88, 88, 8: 88, 88, 88, 16: 88, 29: 88, 31: 88, 88, 88, 88, 115: 88, 88, 125: 88, 88, 128: 88, 88, 144: 88, 149: 88},
		{29: 42, 31: 42, 42, 42, 42},
		{127: 773, 131: 772, 174: 771, 200: 770},
		{127: 285, 131: 285},
		// 445
		{3: 355, 44: 354, 134: 769},
		{127: 284, 131: 284},
		{1: 288, 288, 4: 802},
		{1: 283, 283, 4: 283, 11: 283},
		{1: 72, 72, 355, 72, 11: 72, 44: 527, 46: 72, 130: 72, 139: 800},
		// 450
		{3: 355, 44: 527, 139: 774, 152: 72},
		{152: 775},
		{3: 355, 44: 777, 229: 776},
		{17: 778},
		{1: 279, 279, 4: 279, 11: 279, 17: 279, 46: 279, 130: 279},
		// 455
		{3: 355, 44: 777, 229: 779},
		{1: 277, 277, 4: 277, 11: 277, 46: 783, 130: 277, 211: 780, 782, 781},
		{1: 280, 280, 4: 280, 11: 280},
		{1: 274, 274, 4: 274, 11: 274, 130: 789, 264: 788, 787},
		{1: 276, 276, 4: 276, 11: 276, 130: 276},
		// 460
		{14: 784},
		{65, 255: 785},
		{786},
		{1: 275, 275, 4: 275, 11: 275, 130: 275},
		{1: 278, 278, 4: 278, 11: 278},
		// 465
		{1: 273, 273, 4: 273, 11: 273},
		{14: 790},
		{3: 355, 44: 441, 81: 388, 794, 793, 177: 792, 219: 791},
		{797, 4: 798},
		{271, 4: 271},
		// 470
		{141: 795},
		{136: 691},
		{3: 355, 5: 406, 408, 396, 14: 409, 44: 441, 397, 420, 402, 405, 439, 401, 403, 414, 432, 430, 438, 435, 415, 416, 427, 398, 423, 434, 399, 417, 421, 418, 424, 404, 413, 419, 433, 411, 422, 429, 428, 425, 426, 431, 400, 412, 388, 367, 368, 370, 389, 440, 378, 371, 391, 375, 383, 382, 377, 392, 386, 379, 376, 410, 384, 395, 381, 380, 369, 373, 385, 390, 372, 387, 437, 436, 374, 393, 394, 796},
		{269, 4: 269, 466, 479, 12: 462, 465, 15: 477, 17: 475, 478, 464, 463, 470, 469, 467, 471, 472, 468, 473, 476, 30: 474},
		{1: 272, 272, 4: 272, 11: 272},
		// 475
		{3: 355, 44: 441, 81: 388, 794, 793, 177: 799},
		{270, 4: 270},
		{1: 277, 277, 4: 277, 11: 277, 46: 783, 130: 277, 211: 801, 782, 781},
		{1: 281, 281, 4: 281, 11: 281},
		{127: 773, 131: 772, 174: 803},
		// 480
		{1: 282, 282, 4: 282, 11: 282},
		{1: 289, 289},
		{3: 14, 157: 808, 203: 813},
		{3: 14, 157: 808, 203: 807},
		{3: 355, 44: 810},
		// 485
		{49: 809},
		{3: 13},
		{116: 811},
		{3: 355, 44: 354, 134: 812},
		{1: 290, 290},
		// 490
		{3: 355, 44: 354, 134: 814},
		{1: 291, 291},
		{3: 355, 44: 441, 81: 388, 842, 278: 841},
		{127: 286, 131: 286, 206: 768, 767, 833},
		{3: 355, 44: 441, 81: 388, 820, 201: 819, 248: 818},
		// 495
		{4: 826, 11: 516, 154: 825},
		{4: 18, 11: 18},
		{165: 821},
		{14: 822},
		{3: 355, 44: 441, 81: 388, 794, 793, 177: 792, 219: 823},
		// 500
		{824, 4: 798},
		{4: 16, 11: 16},
		{1: 40, 40, 8: 40, 40, 40, 16: 40, 115: 366, 140: 828},
		{3: 355, 44: 441, 81: 388, 820, 201: 827},
		{4: 17, 11: 17},
		// 505
		{1: 38, 38, 8: 38, 38, 38, 16: 551, 155: 829},
		{1: 30, 30, 8: 30, 30, 562, 156: 830},
		{1: 28, 28, 8: 28, 565, 161: 831},
		{1: 26, 26, 8: 569, 159: 832},
		{1: 19, 19},
		// 510
		{127: 773, 131: 772, 174: 771, 200: 834},
		{4: 802, 11: 516, 154: 835},
		{1: 40, 40, 8: 40, 40, 40, 16: 40, 115: 366, 140: 836},
		{1: 38, 38, 8: 38, 38, 38, 16: 551, 155: 837},
		{1: 30, 30, 8: 30, 30, 562, 156: 838},
		// 515
		{1: 28, 28, 8: 28, 565, 161: 839},
		{1: 26, 26, 8: 569, 159: 840},
		{1: 287, 287},
		{4: 844, 11: 516, 154: 843},
		{4: 297, 11: 297},
		// 520
		{1: 40, 40, 8: 40, 40, 40, 16: 40, 115: 366, 140: 846},
		{3: 355, 44: 441, 81: 388, 845},
		{4: 296, 11: 296},
		{1: 38, 38, 8: 38, 38, 38, 16: 551, 155: 847},
		{1: 30, 30, 8: 30, 30, 562, 156: 848},
		// 525
		{1: 28, 28, 8: 28, 565, 161: 849},
		{1: 26, 26, 8: 569, 159: 850},
		{1: 298, 298},
		{3: 12, 157: 856, 204: 868},
		{158: 854},
		// 530
		{158: 299},
		{116: 12, 157: 856, 204: 855},
		{116: 859},
		{6: 857},
		{49: 858},
		// 535
		{3: 11, 116: 11},
		{3: 355, 44: 354, 134: 860},
		{3: 355, 44: 354, 134: 861},
		{14: 862},
		{3: 355, 44: 693, 178: 864, 266: 863},
		// 540
		{865, 4: 866},
		{2, 4: 2},
		{1: 301, 301},
		{3: 355, 44: 693, 178: 867},
		{1, 4: 1},
		// 545
		{3: 355, 44: 354, 134: 869},
		{1: 302, 302},
		{1: 305, 305, 29: 45, 31: 351, 45, 347, 45, 138: 350, 146: 349, 344, 338, 180: 341, 328, 184: 342, 329, 343, 330, 331, 190: 332, 345, 333, 334, 195: 327, 346, 335, 205: 336, 220: 348, 337, 224: 871, 339, 352, 340},
		{1: 320, 320},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 292

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 2:
		{
			yyVAL.item = yyS[yypt-0].statement
		}
	case 23:
		{
			yyVAL.item = ast.IndexKeyTypeNone
		}
	case 24:
		{
			yyVAL.item = ast.IndexKeyTypeUnique
		}
	case 28:
		{
			yyVAL.item = model.CIStr{}
		}
	case 30:
		{
			yyVAL.item = model.NewCIStr(yyS[yypt-0].ident)
		}
	case 31:
		{
			yyVAL.item = model.NewCIStr(yyS[yypt-0].ident)
		}
	case 207:
		{
			yyVAL.ident = ""
		}
	case 214:
		{
			yyVAL.item = &ast.MatchClauseList{Matches: []*ast.MatchClause{yyS[yypt-0].item.(*ast.MatchClause)}}
		}
	case 215:
		{
			ml := yyS[yypt-2].item.(*ast.MatchClauseList)
			ml.Matches = append(ml.Matches, yyS[yypt-0].item.(*ast.MatchClause))
			yyVAL.item = ml
		}
	case 216:
		{
			yyVAL.item = &ast.MatchClause{
				Graph: yyS[yypt-1].item.(*ast.GraphName),
				Paths: yyS[yypt-2].item.([]*ast.PathPattern),
			}
		}
	case 217:
		{
			yyVAL.item = yyS[yypt-0].ident
		}
	case 218:
		{
			yyVAL.item = (*ast.GraphName)(nil)
		}
	case 221:
		{
			yyVAL.item = []*ast.PathPattern{yyS[yypt-0].item.(*ast.PathPattern)}
		}
	case 222:
		{
			yyVAL.item = yyS[yypt-1].item.([]*ast.PathPattern)
		}
	case 223:
		{
			yyVAL.item = yyS[yypt-0].item.(*ast.PathPattern)
		}
	case 224:
		{
			yyVAL.item = append(yyS[yypt-2].item.([]*ast.PathPattern), yyS[yypt-0].item.(*ast.PathPattern))
		}
	case 225:
		{
			pp := yyS[yypt-0].item.(*ast.PathPattern)
			pp.Tp = ast.PathPatternSimple
			yyVAL.item = pp
		}
	case 226:
		{
			pp := yyS[yypt-0].item.(*ast.PathPattern)
			pp.Tp = ast.PathPatternAny
			yyVAL.item = pp
		}
	case 227:
		{
			pp := yyS[yypt-0].item.(*ast.PathPattern)
			pp.Tp = ast.PathPatternAnyShortest
			yyVAL.item = pp
		}
	case 228:
		{
			pp := yyS[yypt-0].item.(*ast.PathPattern)
			pp.Tp = ast.PathPatternAllShortest
			yyVAL.item = pp
		}
	case 229:
		{
			pp := yyS[yypt-0].item.(*ast.PathPattern)
			pp.Tp = ast.PathPatternTopKShortest
			pp.TopK = yyS[yypt-2].item.(uint64)
			yyVAL.item = pp
		}
	case 230:
		{
			pp := yyS[yypt-0].item.(*ast.PathPattern)
			pp.Tp = ast.PathPatternAnyCheapest
			yyVAL.item = pp
		}
	case 231:
		{
			pp := yyS[yypt-0].item.(*ast.PathPattern)
			pp.Tp = ast.PathPatternAllCheapest
			yyVAL.item = pp
		}
	case 232:
		{
			pp := yyS[yypt-0].item.(*ast.PathPattern)
			pp.Tp = ast.PathPatternTopKCheapest
			pp.TopK = yyS[yypt-2].item.(uint64)
			yyVAL.item = pp
		}
	case 233:
		{
			pp := yyS[yypt-0].item.(*ast.PathPattern)
			pp.Tp = ast.PathPatternAll
			yyVAL.item = pp
		}
	case 234:
		{
			yyVAL.item = &ast.PathPattern{Vertices: []*ast.VertexPattern{yyS[yypt-0].item.(*ast.VertexPattern)}}
		}
	case 235:
		{
			pp := yyS[yypt-2].item.(*ast.PathPattern)
			pp.Vertices = append(pp.Vertices, yyS[yypt-0].item.(*ast.VertexPattern))
			pp.Connections = append(pp.Connections, yyS[yypt-1].item.(*ast.ReachabilityPathExpr))
			yyVAL.item = pp
		}
	case 236:
		{
			pp := yyS[yypt-2].item.(*ast.PathPattern)
			pp.Vertices = append(pp.Vertices, yyS[yypt-0].item.(*ast.VertexPattern))
			pp.Connections = append(pp.Connections, yyS[yypt-1].item.(*ast.EdgePattern))
			yyVAL.item = pp
		}
	case 237:
		{
			yyVAL.item = &ast.PathPattern{
				Vertices:    []*ast.VertexPattern{yyS[yypt-2].item.(*ast.VertexPattern), yyS[yypt-0].item.(*ast.VertexPattern)},
				Connections: []ast.VertexPairConnection{yyS[yypt-1].item.(*ast.QuantifiedPathExpr)},
			}
		}
	case 238:
		{
			yyVAL.item = &ast.ReachabilityPathExpr{
				Labels:     yyS[yypt-2].item.([]model.CIStr),
				Direction:  ast.EdgeDirectionOutgoing,
				Quantifier: yyS[yypt-1].item.(*ast.PatternQuantifier),
			}
		}
	case 239:
		{
			yyVAL.item = &ast.ReachabilityPathExpr{
				Labels:     yyS[yypt-2].item.([]model.CIStr),
				Direction:  ast.EdgeDirectionIncoming,
				Quantifier: yyS[yypt-1].item.(*ast.PatternQuantifier),
			}
		}
	case 240:
		{
			yyVAL.item = &ast.ReachabilityPathExpr{
				Labels:     yyS[yypt-2].item.([]model.CIStr),
				Direction:  ast.EdgeDirectionAnyDirected,
				Quantifier: yyS[yypt-1].item.(*ast.PatternQuantifier),
			}
		}
	case 241:
		{
			yyVAL.item = &ast.VertexPattern{Variable: yyS[yypt-1].item.(*ast.VariableSpec)}
		}
	case 242:
		{
			yyVAL.item = (*ast.VertexPattern)(nil)
		}
	case 244:
		{
			yyVAL.item = &ast.EdgePattern{
				Variable:  yyS[yypt-1].item.(*ast.VariableSpec),
				Direction: ast.EdgeDirectionOutgoing,
			}
		}
	case 245:
		{
			yyVAL.item = &ast.EdgePattern{Direction: ast.EdgeDirectionOutgoing}
		}
	case 246:
		{
			yyVAL.item = &ast.EdgePattern{
				Variable:  yyS[yypt-1].item.(*ast.VariableSpec),
				Direction: ast.EdgeDirectionIncoming,
			}
		}
	case 247:
		{
			yyVAL.item = &ast.EdgePattern{Direction: ast.EdgeDirectionIncoming}
		}
	case 248:
		{
			yyVAL.item = &ast.EdgePattern{
				Variable:  yyS[yypt-1].item.(*ast.VariableSpec),
				Direction: ast.EdgeDirectionAnyDirected,
			}
		}
	case 249:
		{
			yyVAL.item = &ast.EdgePattern{Direction: ast.EdgeDirectionAnyDirected}
		}
	case 250:
		{
			v := &ast.VariableSpec{
				Name:   yyS[yypt-1].item.(model.CIStr),
				Labels: yyS[yypt-0].item.([]model.CIStr),
			}
			if v.Name.L == "" {
				v.Anonymous = true
			}
			yyVAL.item = v
		}
	case 251:
		{
			yyVAL.item = model.CIStr{}
		}
	case 252:
		{
			yyVAL.item = model.NewCIStr(yyS[yypt-0].ident)
		}
	case 253:
		{
			yyVAL.item = yyS[yypt-0].item.([]model.CIStr)
		}
	case 254:
		{
			yyVAL.item = []model.CIStr(nil)
		}
	case 262:
		{
			yyVAL.item = []model.CIStr{yyS[yypt-0].item.(model.CIStr)}
		}
	case 263:
		{
			yyVAL.item = append(yyS[yypt-2].item.([]model.CIStr), yyS[yypt-0].item.(model.CIStr))
		}
	case 264:
		{
			yyVAL.item = &ast.QuantifiedPathExpr{
				Edge:       yyS[yypt-1].item.(*ast.EdgePattern),
				Quantifier: yyS[yypt-0].item.(*ast.PatternQuantifier),
			}
		}
	case 265:
		{
			q := &ast.QuantifiedPathExpr{
				Edge:        yyS[yypt-5].item.(*ast.EdgePattern),
				Quantifier:  yyS[yypt-0].item.(*ast.PatternQuantifier),
				Source:      yyS[yypt-6].item.(*ast.VertexPattern),
				Destination: yyS[yypt-4].item.(*ast.VertexPattern),
			}
			if yyS[yypt-3].item != nil {
				q.Where = yyS[yypt-3].item.(ast.ExprNode)
			}
			if yyS[yypt-2].item != nil {
				q.Cost = yyS[yypt-2].item.(ast.ExprNode)
			}
			yyVAL.item = q
		}
	case 266:
		{
			yyVAL.item = yyS[yypt-0].expr.(ast.ExprNode)
		}
	case 267:
		{
			yyVAL.item = nil
		}
	case 269:
		{
			yyVAL.item = &ast.PatternQuantifier{Tp: ast.PatternQuantifierZeroOrMore, M: 18446744073709551615}
		}
	case 270:
		{
			yyVAL.item = &ast.PatternQuantifier{Tp: ast.PatternQuantifierOneOrMore, N: 1, M: 18446744073709551615}
		}
	case 271:
		{
			yyVAL.item = &ast.PatternQuantifier{Tp: ast.PatternQuantifierOptional, N: 0, M: 1}
		}
	case 272:
		{
			yyVAL.item = &ast.PatternQuantifier{Tp: ast.PatternQuantifierExactlyN, N: yyS[yypt-1].item.(uint64), M: yyS[yypt-1].item.(uint64)}
		}
	case 273:
		{
			yyVAL.item = &ast.PatternQuantifier{Tp: ast.PatternQuantifierNOrMore, N: yyS[yypt-2].item.(uint64), M: 18446744073709551615}
		}
	case 274:
		{
			yyVAL.item = &ast.PatternQuantifier{Tp: ast.PatternQuantifierBetweenNAndM, N: yyS[yypt-3].item.(uint64), M: yyS[yypt-1].item.(uint64)}
		}
	case 275:
		{
			yyVAL.item = &ast.PatternQuantifier{Tp: ast.PatternQuantifierBetweenZeroAndM, N: 0, M: yyS[yypt-1].item.(uint64)}
		}
	case 276:
		{
			yyVAL.item = (*ast.PatternQuantifier)(nil)
		}
	case 280:
		{
			yyVAL.item = []*ast.PathPatternMacro{yyS[yypt-0].item.(*ast.PathPatternMacro)}
		}
	case 281:
		{
			yyVAL.item = append(yyS[yypt-1].item.([]*ast.PathPatternMacro), yyS[yypt-0].item.(*ast.PathPatternMacro))
		}
	case 282:
		{
			p := &ast.PathPatternMacro{
				Name: model.NewCIStr(yyS[yypt-3].ident),
				Path: yyS[yypt-1].item.(*ast.PathPattern),
			}
			if yyS[yypt-0].item != nil {
				p.Where = yyS[yypt-0].item.(ast.ExprNode)
			}
			yyVAL.item = p
		}
	case 291:
		{
			yyVAL.item = false
		}
	case 292:
		{
			yyVAL.item = true
		}
	case 293:
		{
			yyVAL.item = nil
		}
	case 309:
		{
			yyVAL.item = false
		}
	case 310:
		{
			yyVAL.item = true
		}
	case 311:
		{
			yyVAL.item = false
		}
	case 312:
		{
			yyVAL.item = true
		}
	case 318:
		{
			yyVAL.item = model.NewCIStr(yyS[yypt-0].ident)
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}

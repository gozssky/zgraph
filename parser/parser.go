// Code generated by goyacc - DO NOT EDIT.

// Copyright 2013 The ql Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSES/QL-LICENSE file.

// Copyright 2022 zGraph Authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Initial yacc source generated by ebnf2y[1]
// at 2013-10-04 23:10:47.861401015 +0200 CEST
//
//  $ ebnf2y -o ql.y -oe ql.ebnf -start StatementList -pkg ql -p _
//
//   [1]: http://github.com/cznic/ebnf2y

// The parser implements the PGQL specification
//
// - https://pgql-lang.org/spec/1.5/
//

package parser

import __yyfmt__ "fmt"

import (
	"strings"

	"github.com/vescale/zgraph/parser/ast"
)

type yySymType struct {
	yys       int
	offset    int // offset
	item      interface{}
	ident     string
	expr      ast.ExprNode
	statement ast.StmtNode
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault               = 57503
	yyEofCode               = 57344
	all                     = 57458
	and                     = 57427
	andand                  = 57352
	andnot                  = 57470
	any                     = 57459
	as                      = 57354
	asc                     = 57355
	assignmentEq            = 57471
	autoIncrement           = 57451
	bLeftArrow              = 57488
	bRightArrow             = 57489
	begin                   = 57428
	between                 = 57499
	bigIntType              = 57356
	bitLit                  = 57469
	bitType                 = 57435
	boolType                = 57432
	booleanType             = 57431
	bracketDash             = 57487
	by                      = 57357
	charType                = 57359
	character               = 57358
	cheapest                = 57461
	comment                 = 57430
	commit                  = 57429
	cost                    = 57463
	create                  = 57360
	currentTs               = 57361
	dashBracket             = 57486
	dashSlash               = 57484
	data                    = 57440
	database                = 57362
	dateType                = 57442
	datetimeType            = 57441
	day                     = 57443
	decLit                  = 57466
	decimalType             = 57363
	defaultKwd              = 57364
	deleteKwd               = 57365
	desc                    = 57366
	destination             = 57367
	div                     = 57500
	doubleAtIdentifier      = 57350
	doubleType              = 57368
	drop                    = 57369
	duplicate               = 57448
	edge                    = 57370
	empty                   = 57493
	eq                      = 57472
	yyErrCode               = 57345
	exists                  = 57371
	explain                 = 57433
	falseKwd                = 57372
	fixed                   = 57434
	floatLit                = 57465
	floatType               = 57373
	from                    = 57374
	ge                      = 57473
	graph                   = 57457
	group                   = 57375
	having                  = 57376
	hexLit                  = 57468
	higherThanParenthese    = 57497
	identifier              = 57346
	ifKwd                   = 57377
	index                   = 57378
	insert                  = 57379
	insertValues            = 57495
	int1Type                = 57380
	int2Type                = 57381
	int3Type                = 57382
	int4Type                = 57383
	int8Type                = 57384
	intLit                  = 57467
	intType                 = 57387
	integerType             = 57385
	into                    = 57386
	invalid                 = 57351
	invisible               = 57453
	is                      = 57388
	jss                     = 57475
	juss                    = 57476
	key                     = 57389
	le                      = 57474
	leftArrow               = 57483
	limit                   = 57390
	localTime               = 57391
	localTs                 = 57392
	longtextType            = 57393
	lowerThanKey            = 57496
	lowerThanOn             = 57498
	lowerThanStringLitToken = 57494
	lsh                     = 57477
	match                   = 57394
	mediumIntType           = 57395
	mediumtextType          = 57396
	mod                     = 57501
	national                = 57436
	ncharType               = 57437
	neg                     = 57502
	neq                     = 57478
	neqSynonym              = 57479
	not                     = 57397
	not2                    = 57492
	null                    = 57398
	nulleq                  = 57480
	numericType             = 57399
	nvarcharType            = 57454
	offset                  = 57450
	on                      = 57400
	or                      = 57426
	order                   = 57401
	paramMarker             = 57481
	path                    = 57464
	pipes                   = 57353
	pipesAsOr               = 57456
	precisionType           = 57402
	primary                 = 57403
	realType                = 57404
	references              = 57405
	rollback                = 57449
	rsh                     = 57482
	sLeftArrow              = 57490
	sRightArrow             = 57491
	selectKwd               = 57406
	set                     = 57407
	shortest                = 57460
	signed                  = 57446
	singleAtIdentifier      = 57349
	slashDash               = 57485
	smallIntType            = 57408
	source                  = 57409
	sqlTsiYear              = 57455
	stringLit               = 57348
	tableKwd                = 57410
	textType                = 57439
	timeType                = 57445
	timestampType           = 57444
	tinyIntType             = 57411
	tinytextType            = 57412
	top                     = 57462
	trueKwd                 = 57413
	underscoreCS            = 57347
	unique                  = 57414
	unsigned                = 57415
	update                  = 57416
	use                     = 57417
	value                   = 57447
	values                  = 57418
	varcharType             = 57420
	varcharacter            = 57419
	varying                 = 57421
	vertex                  = 57422
	visible                 = 57452
	where                   = 57423
	xor                     = 57424
	yearType                = 57438
	zerofill                = 57425

	yyMaxDepth = 200
	yyTabOfs   = -376
)

var (
	yyPrec = map[int]int{
		empty:                   0,
		value:                   1,
		lowerThanStringLitToken: 2,
		insertValues:            3,
		lowerThanKey:            4,
		key:                     5,
		'(':                     6,
		')':                     7,
		higherThanParenthese:    8,
		lowerThanOn:             9,
		on:                      10,
		assignmentEq:            11,
		pipes:                   12,
		or:                      12,
		pipesAsOr:               12,
		xor:                     13,
		andand:                  14,
		and:                     14,
		between:                 15,
		'|':                     16,
		'&':                     17,
		rsh:                     18,
		lsh:                     18,
		'-':                     19,
		'+':                     19,
		'*':                     20,
		'/':                     20,
		'%':                     20,
		div:                     20,
		mod:                     20,
		'^':                     21,
		'~':                     22,
		neg:                     22,
		not:                     23,
		',':                     24,
	}

	yyXLAT = map[int]int{
		41:    0,   // ')' (265x)
		44:    1,   // ',' (251x)
		57430: 2,   // comment (213x)
		57451: 3,   // autoIncrement (210x)
		40:    4,   // '(' (150x)
		57344: 5,   // $end (149x)
		59:    6,   // ';' (148x)
		57446: 7,   // signed (144x)
		57397: 8,   // not (133x)
		57364: 9,   // defaultKwd (115x)
		57398: 10,  // null (113x)
		57403: 11,  // primary (113x)
		57414: 12,  // unique (113x)
		57367: 13,  // destination (111x)
		57405: 14,  // references (111x)
		57409: 15,  // source (111x)
		57450: 16,  // offset (104x)
		57435: 17,  // bitType (103x)
		57431: 18,  // booleanType (103x)
		57432: 19,  // boolType (103x)
		57441: 20,  // datetimeType (103x)
		57442: 21,  // dateType (103x)
		57434: 22,  // fixed (103x)
		57436: 23,  // national (103x)
		57437: 24,  // ncharType (103x)
		57454: 25,  // nvarcharType (103x)
		57455: 26,  // sqlTsiYear (103x)
		57444: 27,  // timestampType (103x)
		57445: 28,  // timeType (103x)
		57438: 29,  // yearType (103x)
		57453: 30,  // invisible (102x)
		57452: 31,  // visible (102x)
		57428: 32,  // begin (101x)
		57429: 33,  // commit (101x)
		57433: 34,  // explain (101x)
		57449: 35,  // rollback (101x)
		57447: 36,  // value (101x)
		57448: 37,  // duplicate (100x)
		57457: 38,  // graph (100x)
		57440: 39,  // data (99x)
		57443: 40,  // day (99x)
		57346: 41,  // identifier (99x)
		57400: 42,  // on (99x)
		57439: 43,  // textType (99x)
		57390: 44,  // limit (92x)
		57401: 45,  // order (88x)
		57423: 46,  // where (83x)
		57376: 47,  // having (71x)
		57375: 48,  // group (63x)
		57374: 49,  // from (51x)
		42:    50,  // '*' (49x)
		57481: 51,  // paramMarker (48x)
		57485: 52,  // slashDash (47x)
		43:    53,  // '+' (46x)
		123:   54,  // '{' (45x)
		57491: 55,  // sRightArrow (45x)
		57415: 56,  // unsigned (45x)
		57425: 57,  // zerofill (45x)
		57557: 58,  // Identifier (44x)
		57627: 59,  // UnreservedKeywords (44x)
		57487: 60,  // bracketDash (43x)
		57354: 61,  // as (41x)
		57489: 62,  // bRightArrow (41x)
		58:    63,  // ':' (39x)
		57388: 64,  // is (39x)
		57407: 65,  // set (39x)
		57419: 66,  // varcharacter (37x)
		57420: 67,  // varcharType (37x)
		46:    68,  // '.' (36x)
		57358: 69,  // character (36x)
		57359: 70,  // charType (36x)
		57472: 71,  // eq (36x)
		124:   72,  // '|' (35x)
		57356: 73,  // bigIntType (35x)
		57363: 74,  // decimalType (35x)
		57368: 75,  // doubleType (35x)
		57373: 76,  // floatType (35x)
		57380: 77,  // int1Type (35x)
		57381: 78,  // int2Type (35x)
		57382: 79,  // int3Type (35x)
		57383: 80,  // int4Type (35x)
		57384: 81,  // int8Type (35x)
		57385: 82,  // integerType (35x)
		57387: 83,  // intType (35x)
		57395: 84,  // mediumIntType (35x)
		57399: 85,  // numericType (35x)
		57404: 86,  // realType (35x)
		57408: 87,  // smallIntType (35x)
		57411: 88,  // tinyIntType (35x)
		57418: 89,  // values (35x)
		57349: 90,  // singleAtIdentifier (21x)
		57463: 91,  // cost (17x)
		57540: 92,  // Expression (17x)
		57639: 93,  // VertexPattern (16x)
		57467: 94,  // intLit (14x)
		57348: 95,  // stringLit (13x)
		57544: 96,  // FieldLen (12x)
		57427: 97,  // and (11x)
		57352: 98,  // andand (11x)
		57643: 99,  // logAnd (11x)
		57644: 100, // logOr (11x)
		57582: 101, // NUM (11x)
		57426: 102, // or (11x)
		57456: 103, // pipesAsOr (11x)
		57424: 104, // xor (11x)
		45:    105, // '-' (10x)
		57516: 106, // ColumnName (10x)
		57575: 107, // LengthNum (10x)
		57488: 108, // bLeftArrow (9x)
		57486: 109, // dashBracket (9x)
		57377: 110, // ifKwd (9x)
		57475: 111, // jss (9x)
		57389: 112, // key (9x)
		57483: 113, // leftArrow (9x)
		57635: 114, // VariableLengthPathPattern (8x)
		125:   115, // '}' (6x)
		57355: 116, // asc (6x)
		57366: 117, // desc (6x)
		57591: 118, // OptFieldLen (6x)
		57621: 119, // TableName (6x)
		57461: 120, // cheapest (5x)
		57484: 121, // dashSlash (5x)
		57546: 122, // FieldOpt (5x)
		57547: 123, // FieldOpts (5x)
		57406: 124, // selectKwd (5x)
		57607: 125, // SelectStmt (5x)
		57460: 126, // shortest (5x)
		57490: 127, // sLeftArrow (5x)
		57421: 128, // varying (5x)
		57539: 129, // ExprOrDefault (4x)
		57551: 130, // GraphName (4x)
		57598: 131, // PatternQuantifier (4x)
		57599: 132, // PatternQuantifierOpt (4x)
		57637: 133, // VariableNameOpt (4x)
		57638: 134, // VariableSpec (4x)
		57641: 135, // WhereClauseOpt (4x)
		57458: 136, // all (3x)
		57459: 137, // any (3x)
		57504: 138, // Assignment (3x)
		57510: 139, // ByItem (3x)
		57513: 140, // ColonOrIsKeyword (3x)
		57515: 141, // ColumnList (3x)
		57466: 142, // decLit (3x)
		57535: 143, // EdgePattern (3x)
		57465: 144, // floatLit (3x)
		57559: 145, // IfNotExists (3x)
		57378: 146, // index (3x)
		57560: 147, // IndexInvisible (3x)
		57561: 148, // IndexName (3x)
		57562: 149, // IndexOptionList (3x)
		57567: 150, // KeyOrIndex (3x)
		57573: 151, // LabelPredicate (3x)
		57576: 152, // LimitClauseOpt (3x)
		57577: 153, // LimitOption (3x)
		57593: 154, // OrderByClauseOpt (3x)
		57594: 155, // PathPattern (3x)
		57604: 156, // RowValue (3x)
		57609: 157, // SimplePathPattern (3x)
		57462: 158, // top (3x)
		57416: 159, // update (3x)
		57505: 160, // AssignmentList (2x)
		57507: 161, // BeginStmt (2x)
		57357: 162, // by (2x)
		57511: 163, // ByList (2x)
		57514: 164, // ColumnDef (2x)
		57519: 165, // ColumnOption (2x)
		57522: 166, // ColumnSetValue (2x)
		57524: 167, // CommitStmt (2x)
		57525: 168, // Constraint (2x)
		57360: 169, // create (2x)
		57528: 170, // CreateDatabaseStmt (2x)
		57529: 171, // CreateTableStmt (2x)
		57361: 172, // currentTs (2x)
		57362: 173, // database (2x)
		57365: 174, // deleteKwd (2x)
		57532: 175, // DeleteStmt (2x)
		57369: 176, // drop (2x)
		57533: 177, // DropDatabaseStmt (2x)
		57534: 178, // DropTableStmt (2x)
		57536: 179, // EmptyStmt (2x)
		57371: 180, // exists (2x)
		57538: 181, // ExplainStmt (2x)
		57541: 182, // Field (2x)
		57549: 183, // FloatOpt (2x)
		57558: 184, // IfExists (2x)
		57379: 185, // insert (2x)
		57563: 186, // InsertStmt (2x)
		57571: 187, // LabelName (2x)
		57391: 188, // localTime (2x)
		57392: 189, // localTs (2x)
		57394: 190, // match (2x)
		57579: 191, // MatchClause (2x)
		57584: 192, // NowSym (2x)
		57585: 193, // NowSymFunc (2x)
		57586: 194, // NowSymOptionFraction (2x)
		57587: 195, // NowSymOptionFractionParentheses (2x)
		57588: 196, // NumLiteral (2x)
		57600: 197, // Precision (2x)
		57603: 198, // RollbackStmt (2x)
		57610: 199, // Statement (2x)
		57616: 200, // TableAsName (2x)
		57617: 201, // TableAsNameOpt (2x)
		57618: 202, // TableElement (2x)
		57628: 203, // UpdateStmt (2x)
		57417: 204, // use (2x)
		57629: 205, // UseStmt (2x)
		57632: 206, // ValuesList (2x)
		57630: 207, // ValueSym (2x)
		57640: 208, // VertexPatternOpt (2x)
		57471: 209, // assignmentEq (1x)
		57469: 210, // bitLit (1x)
		57508: 211, // BitValueType (1x)
		57509: 212, // BooleanType (1x)
		57512: 213, // Char (1x)
		57517: 214, // ColumnNameList (1x)
		57518: 215, // ColumnNameListOpt (1x)
		57520: 216, // ColumnOptionList (1x)
		57521: 217, // ColumnOptionListOpt (1x)
		57523: 218, // ColumnSetValueList (1x)
		57526: 219, // CostClause (1x)
		57527: 220, // CostClauseOpt (1x)
		57530: 221, // DateAndTimeType (1x)
		57531: 222, // DefaultValueExpr (1x)
		57370: 223, // edge (1x)
		57537: 224, // Entry (1x)
		57372: 225, // falseKwd (1x)
		57542: 226, // FieldAsName (1x)
		57543: 227, // FieldAsNameOpt (1x)
		57545: 228, // FieldList (1x)
		57548: 229, // FixedPointType (1x)
		57550: 230, // FloatingPointType (1x)
		57552: 231, // GraphOnClause (1x)
		57553: 232, // GraphOnClauseOpt (1x)
		57554: 233, // GraphPattern (1x)
		57555: 234, // GroupByClauseOpt (1x)
		57556: 235, // HavingClauseOpt (1x)
		57468: 236, // hexLit (1x)
		57564: 237, // InsertValues (1x)
		57565: 238, // IntegerType (1x)
		57386: 239, // into (1x)
		57566: 240, // IntoOpt (1x)
		57568: 241, // KeyOrIndexOpt (1x)
		57572: 242, // LabelNameList (1x)
		57574: 243, // LabelPredicateOpt (1x)
		57578: 244, // Literal (1x)
		57580: 245, // MatchClauseList (1x)
		57581: 246, // NChar (1x)
		57589: 247, // NumericType (1x)
		57583: 248, // NVarchar (1x)
		57590: 249, // OnDuplicateKeyUpdate (1x)
		57592: 250, // Order (1x)
		57595: 251, // PathPatternList (1x)
		57402: 252, // precisionType (1x)
		57601: 253, // QuantifiedPathExpr (1x)
		57602: 254, // ReachabilityPathExpr (1x)
		57605: 255, // RowsPerMatchOpt (1x)
		57606: 256, // SelectFieldList (1x)
		57608: 257, // SignedLiteral (1x)
		57611: 258, // StatementList (1x)
		57613: 259, // StringLiteral (1x)
		57614: 260, // StringType (1x)
		57615: 261, // SubSelect (1x)
		57619: 262, // TableElementList (1x)
		57620: 263, // TableElementListOpt (1x)
		57410: 264, // tableKwd (1x)
		57622: 265, // TableType (1x)
		57413: 266, // trueKwd (1x)
		57626: 267, // Type (1x)
		57631: 268, // Values (1x)
		57633: 269, // ValuesOpt (1x)
		57634: 270, // Varchar (1x)
		57422: 271, // vertex (1x)
		57642: 272, // Year (1x)
		57503: 273, // $default (0x)
		37:    274, // '%' (0x)
		38:    275, // '&' (0x)
		47:    276, // '/' (0x)
		94:    277, // '^' (0x)
		126:   278, // '~' (0x)
		57470: 279, // andnot (0x)
		57506: 280, // AssignmentListOpt (0x)
		57499: 281, // between (0x)
		57500: 282, // div (0x)
		57350: 283, // doubleAtIdentifier (0x)
		57493: 284, // empty (0x)
		57345: 285, // error (0x)
		57473: 286, // ge (0x)
		57497: 287, // higherThanParenthese (0x)
		57495: 288, // insertValues (0x)
		57351: 289, // invalid (0x)
		57476: 290, // juss (0x)
		57569: 291, // Label (0x)
		57570: 292, // LabelList (0x)
		57474: 293, // le (0x)
		57393: 294, // longtextType (0x)
		57496: 295, // lowerThanKey (0x)
		57498: 296, // lowerThanOn (0x)
		57494: 297, // lowerThanStringLitToken (0x)
		57477: 298, // lsh (0x)
		57396: 299, // mediumtextType (0x)
		57501: 300, // mod (0x)
		57502: 301, // neg (0x)
		57478: 302, // neq (0x)
		57479: 303, // neqSynonym (0x)
		57492: 304, // not2 (0x)
		57480: 305, // nulleq (0x)
		57464: 306, // path (0x)
		57596: 307, // PathPatternMacro (0x)
		57597: 308, // PathPatternMacroList (0x)
		57353: 309, // pipes (0x)
		57482: 310, // rsh (0x)
		57612: 311, // StringList (0x)
		57623: 312, // TextString (0x)
		57624: 313, // TextStringList (0x)
		57625: 314, // TextType (0x)
		57412: 315, // tinytextType (0x)
		57347: 316, // underscoreCS (0x)
		57636: 317, // VariableName (0x)
	}

	yySymNames = []string{
		"')'",
		"','",
		"comment",
		"autoIncrement",
		"'('",
		"$end",
		"';'",
		"signed",
		"not",
		"defaultKwd",
		"null",
		"primary",
		"unique",
		"destination",
		"references",
		"source",
		"offset",
		"bitType",
		"booleanType",
		"boolType",
		"datetimeType",
		"dateType",
		"fixed",
		"national",
		"ncharType",
		"nvarcharType",
		"sqlTsiYear",
		"timestampType",
		"timeType",
		"yearType",
		"invisible",
		"visible",
		"begin",
		"commit",
		"explain",
		"rollback",
		"value",
		"duplicate",
		"graph",
		"data",
		"day",
		"identifier",
		"on",
		"textType",
		"limit",
		"order",
		"where",
		"having",
		"group",
		"from",
		"'*'",
		"paramMarker",
		"slashDash",
		"'+'",
		"'{'",
		"sRightArrow",
		"unsigned",
		"zerofill",
		"Identifier",
		"UnreservedKeywords",
		"bracketDash",
		"as",
		"bRightArrow",
		"':'",
		"is",
		"set",
		"varcharacter",
		"varcharType",
		"'.'",
		"character",
		"charType",
		"eq",
		"'|'",
		"bigIntType",
		"decimalType",
		"doubleType",
		"floatType",
		"int1Type",
		"int2Type",
		"int3Type",
		"int4Type",
		"int8Type",
		"integerType",
		"intType",
		"mediumIntType",
		"numericType",
		"realType",
		"smallIntType",
		"tinyIntType",
		"values",
		"singleAtIdentifier",
		"cost",
		"Expression",
		"VertexPattern",
		"intLit",
		"stringLit",
		"FieldLen",
		"and",
		"andand",
		"logAnd",
		"logOr",
		"NUM",
		"or",
		"pipesAsOr",
		"xor",
		"'-'",
		"ColumnName",
		"LengthNum",
		"bLeftArrow",
		"dashBracket",
		"ifKwd",
		"jss",
		"key",
		"leftArrow",
		"VariableLengthPathPattern",
		"'}'",
		"asc",
		"desc",
		"OptFieldLen",
		"TableName",
		"cheapest",
		"dashSlash",
		"FieldOpt",
		"FieldOpts",
		"selectKwd",
		"SelectStmt",
		"shortest",
		"sLeftArrow",
		"varying",
		"ExprOrDefault",
		"GraphName",
		"PatternQuantifier",
		"PatternQuantifierOpt",
		"VariableNameOpt",
		"VariableSpec",
		"WhereClauseOpt",
		"all",
		"any",
		"Assignment",
		"ByItem",
		"ColonOrIsKeyword",
		"ColumnList",
		"decLit",
		"EdgePattern",
		"floatLit",
		"IfNotExists",
		"index",
		"IndexInvisible",
		"IndexName",
		"IndexOptionList",
		"KeyOrIndex",
		"LabelPredicate",
		"LimitClauseOpt",
		"LimitOption",
		"OrderByClauseOpt",
		"PathPattern",
		"RowValue",
		"SimplePathPattern",
		"top",
		"update",
		"AssignmentList",
		"BeginStmt",
		"by",
		"ByList",
		"ColumnDef",
		"ColumnOption",
		"ColumnSetValue",
		"CommitStmt",
		"Constraint",
		"create",
		"CreateDatabaseStmt",
		"CreateTableStmt",
		"currentTs",
		"database",
		"deleteKwd",
		"DeleteStmt",
		"drop",
		"DropDatabaseStmt",
		"DropTableStmt",
		"EmptyStmt",
		"exists",
		"ExplainStmt",
		"Field",
		"FloatOpt",
		"IfExists",
		"insert",
		"InsertStmt",
		"LabelName",
		"localTime",
		"localTs",
		"match",
		"MatchClause",
		"NowSym",
		"NowSymFunc",
		"NowSymOptionFraction",
		"NowSymOptionFractionParentheses",
		"NumLiteral",
		"Precision",
		"RollbackStmt",
		"Statement",
		"TableAsName",
		"TableAsNameOpt",
		"TableElement",
		"UpdateStmt",
		"use",
		"UseStmt",
		"ValuesList",
		"ValueSym",
		"VertexPatternOpt",
		"assignmentEq",
		"bitLit",
		"BitValueType",
		"BooleanType",
		"Char",
		"ColumnNameList",
		"ColumnNameListOpt",
		"ColumnOptionList",
		"ColumnOptionListOpt",
		"ColumnSetValueList",
		"CostClause",
		"CostClauseOpt",
		"DateAndTimeType",
		"DefaultValueExpr",
		"edge",
		"Entry",
		"falseKwd",
		"FieldAsName",
		"FieldAsNameOpt",
		"FieldList",
		"FixedPointType",
		"FloatingPointType",
		"GraphOnClause",
		"GraphOnClauseOpt",
		"GraphPattern",
		"GroupByClauseOpt",
		"HavingClauseOpt",
		"hexLit",
		"InsertValues",
		"IntegerType",
		"into",
		"IntoOpt",
		"KeyOrIndexOpt",
		"LabelNameList",
		"LabelPredicateOpt",
		"Literal",
		"MatchClauseList",
		"NChar",
		"NumericType",
		"NVarchar",
		"OnDuplicateKeyUpdate",
		"Order",
		"PathPatternList",
		"precisionType",
		"QuantifiedPathExpr",
		"ReachabilityPathExpr",
		"RowsPerMatchOpt",
		"SelectFieldList",
		"SignedLiteral",
		"StatementList",
		"StringLiteral",
		"StringType",
		"SubSelect",
		"TableElementList",
		"TableElementListOpt",
		"tableKwd",
		"TableType",
		"trueKwd",
		"Type",
		"Values",
		"ValuesOpt",
		"Varchar",
		"vertex",
		"Year",
		"$default",
		"'%'",
		"'&'",
		"'/'",
		"'^'",
		"'~'",
		"andnot",
		"AssignmentListOpt",
		"between",
		"div",
		"doubleAtIdentifier",
		"empty",
		"error",
		"ge",
		"higherThanParenthese",
		"insertValues",
		"invalid",
		"juss",
		"Label",
		"LabelList",
		"le",
		"longtextType",
		"lowerThanKey",
		"lowerThanOn",
		"lowerThanStringLitToken",
		"lsh",
		"mediumtextType",
		"mod",
		"neg",
		"neq",
		"neqSynonym",
		"not2",
		"nulleq",
		"path",
		"PathPatternMacro",
		"PathPatternMacroList",
		"pipes",
		"rsh",
		"StringList",
		"TextString",
		"TextStringList",
		"TextType",
		"tinytextType",
		"underscoreCS",
		"VariableName",
	}

	yyTokenLiteralStrings = map[int]string{
		57430: "COMMENT",
		57451: "AUTO_INCREMENT",
		57446: "SIGNED",
		57397: "NOT",
		57364: "DEFAULT",
		57398: "NULL",
		57403: "PRIMARY",
		57414: "UNIQUE",
		57367: "DESTINATION",
		57405: "REFERENCES",
		57409: "SOURCE",
		57450: "OFFSET",
		57435: "BIT",
		57431: "BOOLEAN",
		57432: "BOOL",
		57441: "DATETIME",
		57442: "DATE",
		57434: "FIXED",
		57436: "NATIONAL",
		57437: "NCHAR",
		57454: "NVARCHAR",
		57455: "SQL_TSI_YEAR",
		57444: "TIMESTAMP",
		57445: "TIME",
		57438: "YEAR",
		57453: "INVISIBLE",
		57452: "VISIBLE",
		57428: "BEGIN",
		57429: "COMMIT",
		57433: "EXPLAIN",
		57449: "ROLLBACK",
		57447: "VALUE",
		57448: "DUPLICATE",
		57457: "GRAPH",
		57440: "DATA",
		57443: "DAY",
		57346: "identifier",
		57400: "ON",
		57439: "TEXT",
		57390: "LIMIT",
		57401: "ORDER",
		57423: "WHERE",
		57376: "HAVING",
		57375: "GROUP",
		57374: "FROM",
		57481: "?",
		57485: "/-",
		57491: "/->",
		57415: "UNSIGNED",
		57425: "ZEROFILL",
		57487: "]-",
		57354: "AS",
		57489: "]->",
		57388: "IS",
		57407: "SET",
		57419: "VARCHARACTER",
		57420: "VARCHAR",
		57358: "CHARACTER",
		57359: "CHAR",
		57472: "=",
		57356: "BIGINT",
		57363: "DECIMAL",
		57368: "DOUBLE",
		57373: "FLOAT",
		57380: "INT1",
		57381: "INT2",
		57382: "INT3",
		57383: "INT4",
		57384: "INT8",
		57385: "INTEGER",
		57387: "INT",
		57395: "MEDIUMINT",
		57399: "NUMERIC",
		57404: "REAL",
		57408: "SMALLINT",
		57411: "TINYINT",
		57418: "VALUES",
		57349: "identifier with single leading at",
		57463: "COST",
		57467: "integer literal",
		57348: "string literal",
		57427: "AND",
		57352: "&&",
		57426: "OR",
		57424: "XOR",
		57488: "<-[",
		57486: "-[",
		57377: "IF",
		57475: "->",
		57389: "KEY",
		57483: "<-",
		57355: "ASC",
		57366: "DESC",
		57461: "CHEAPEST",
		57484: "-/",
		57406: "SELECT",
		57460: "SHORTEST",
		57490: "<-/",
		57421: "VARYING",
		57458: "ALL",
		57459: "ANY",
		57466: "decimal literal",
		57465: "floating-point literal",
		57378: "INDEX",
		57462: "TOP",
		57416: "UPDATE",
		57357: "BY",
		57360: "CREATE",
		57361: "CURRENT_TIMESTAMP",
		57362: "DATABASE",
		57365: "DELETE",
		57369: "DROP",
		57371: "EXISTS",
		57379: "INSERT",
		57391: "LOCALTIME",
		57392: "LOCALTIMESTAMP",
		57394: "MATCH",
		57417: "USE",
		57471: ":=",
		57469: "bit literal",
		57370: "EDGE",
		57372: "FALSE",
		57468: "hexadecimal literal",
		57386: "INTO",
		57402: "PRECISION",
		57410: "TABLE",
		57413: "TRUE",
		57422: "VERTEX",
		57470: "&^",
		57350: "identifier with double leading at",
		57473: ">=",
		57351: "a special token never used by parser, used by lexer to indicate error",
		57476: "->>",
		57474: "<=",
		57393: "LONGTEXT",
		57477: "<<",
		57396: "MEDIUMTEXT",
		57478: "!=",
		57479: "<>",
		57480: "<=>",
		57464: "PATH",
		57353: "||",
		57482: ">>",
		57412: "TINYTEXT",
		57347: "UNDERSCORE_CHARSET",
	}

	yyReductions = map[int]struct{ xsym, components int }{
		0:   {0, 1},
		1:   {224, 1},
		2:   {258, 1},
		3:   {258, 3},
		4:   {199, 1},
		5:   {199, 1},
		6:   {199, 1},
		7:   {199, 1},
		8:   {199, 1},
		9:   {199, 1},
		10:  {199, 1},
		11:  {199, 1},
		12:  {199, 1},
		13:  {199, 1},
		14:  {199, 1},
		15:  {199, 1},
		16:  {199, 1},
		17:  {199, 1},
		18:  {179, 0},
		19:  {161, 1},
		20:  {167, 1},
		21:  {170, 5},
		22:  {171, 5},
		23:  {265, 1},
		24:  {265, 1},
		25:  {263, 0},
		26:  {263, 3},
		27:  {262, 1},
		28:  {262, 3},
		29:  {202, 1},
		30:  {202, 1},
		31:  {164, 3},
		32:  {217, 0},
		33:  {217, 1},
		34:  {216, 1},
		35:  {216, 2},
		36:  {165, 2},
		37:  {165, 1},
		38:  {165, 1},
		39:  {165, 2},
		40:  {165, 1},
		41:  {165, 2},
		42:  {165, 2},
		43:  {165, 2},
		44:  {165, 2},
		45:  {165, 2},
		46:  {165, 5},
		47:  {222, 1},
		48:  {222, 1},
		49:  {257, 1},
		50:  {257, 2},
		51:  {257, 2},
		52:  {244, 1},
		53:  {244, 1},
		54:  {244, 1},
		55:  {244, 1},
		56:  {244, 1},
		57:  {244, 1},
		58:  {244, 1},
		59:  {244, 1},
		60:  {244, 1},
		61:  {259, 1},
		62:  {259, 2},
		63:  {196, 1},
		64:  {196, 1},
		65:  {196, 1},
		66:  {195, 3},
		67:  {195, 1},
		68:  {194, 1},
		69:  {194, 3},
		70:  {194, 4},
		71:  {193, 1},
		72:  {193, 1},
		73:  {193, 1},
		74:  {192, 1},
		75:  {192, 1},
		76:  {192, 1},
		77:  {168, 7},
		78:  {168, 7},
		79:  {168, 7},
		80:  {141, 1},
		81:  {141, 3},
		82:  {214, 1},
		83:  {214, 3},
		84:  {215, 0},
		85:  {215, 1},
		86:  {150, 1},
		87:  {150, 1},
		88:  {241, 0},
		89:  {241, 1},
		90:  {149, 0},
		91:  {149, 1},
		92:  {149, 2},
		93:  {147, 1},
		94:  {147, 1},
		95:  {267, 1},
		96:  {267, 1},
		97:  {267, 1},
		98:  {247, 3},
		99:  {247, 2},
		100: {247, 3},
		101: {247, 3},
		102: {247, 2},
		103: {238, 1},
		104: {238, 1},
		105: {238, 1},
		106: {238, 1},
		107: {238, 1},
		108: {238, 1},
		109: {238, 1},
		110: {238, 1},
		111: {238, 1},
		112: {238, 1},
		113: {238, 1},
		114: {212, 1},
		115: {212, 1},
		116: {229, 1},
		117: {229, 1},
		118: {229, 1},
		119: {230, 1},
		120: {230, 1},
		121: {230, 1},
		122: {230, 2},
		123: {211, 1},
		124: {260, 2},
		125: {260, 1},
		126: {260, 2},
		127: {260, 1},
		128: {260, 2},
		129: {260, 2},
		130: {213, 1},
		131: {213, 1},
		132: {246, 1},
		133: {246, 2},
		134: {246, 2},
		135: {270, 2},
		136: {270, 2},
		137: {270, 1},
		138: {270, 1},
		139: {248, 2},
		140: {248, 2},
		141: {248, 1},
		142: {248, 2},
		143: {248, 2},
		144: {248, 3},
		145: {248, 3},
		146: {248, 2},
		147: {272, 1},
		148: {272, 1},
		149: {314, 1},
		150: {314, 2},
		151: {314, 1},
		152: {314, 1},
		153: {221, 1},
		154: {221, 2},
		155: {221, 2},
		156: {221, 2},
		157: {221, 3},
		158: {96, 3},
		159: {118, 0},
		160: {118, 1},
		161: {122, 1},
		162: {122, 1},
		163: {122, 1},
		164: {123, 0},
		165: {123, 2},
		166: {183, 0},
		167: {183, 1},
		168: {183, 1},
		169: {197, 5},
		170: {311, 1},
		171: {311, 3},
		172: {312, 1},
		173: {312, 1},
		174: {312, 1},
		175: {313, 1},
		176: {313, 3},
		177: {101, 1},
		178: {175, 7},
		179: {201, 0},
		180: {201, 1},
		181: {200, 1},
		182: {200, 2},
		183: {177, 4},
		184: {178, 4},
		185: {181, 2},
		186: {186, 5},
		187: {240, 0},
		188: {240, 1},
		189: {237, 5},
		190: {237, 4},
		191: {237, 4},
		192: {237, 2},
		193: {237, 2},
		194: {207, 1},
		195: {207, 1},
		196: {206, 1},
		197: {206, 3},
		198: {156, 3},
		199: {269, 0},
		200: {269, 1},
		201: {268, 3},
		202: {268, 1},
		203: {129, 1},
		204: {129, 1},
		205: {166, 3},
		206: {218, 0},
		207: {218, 1},
		208: {218, 3},
		209: {249, 0},
		210: {249, 5},
		211: {138, 3},
		212: {160, 1},
		213: {160, 3},
		214: {280, 0},
		215: {280, 1},
		216: {198, 1},
		217: {261, 3},
		218: {125, 9},
		219: {256, 1},
		220: {228, 1},
		221: {228, 3},
		222: {182, 1},
		223: {182, 3},
		224: {182, 5},
		225: {182, 2},
		226: {227, 0},
		227: {227, 1},
		228: {226, 1},
		229: {226, 2},
		230: {226, 1},
		231: {226, 2},
		232: {92, 3},
		233: {92, 3},
		234: {92, 3},
		235: {92, 3},
		236: {92, 2},
		237: {100, 1},
		238: {100, 1},
		239: {99, 1},
		240: {99, 1},
		241: {245, 1},
		242: {245, 3},
		243: {191, 4},
		244: {231, 2},
		245: {232, 0},
		246: {232, 1},
		247: {255, 0},
		248: {233, 1},
		249: {233, 3},
		250: {251, 1},
		251: {251, 3},
		252: {155, 1},
		253: {155, 2},
		254: {155, 3},
		255: {155, 3},
		256: {155, 4},
		257: {155, 3},
		258: {155, 3},
		259: {155, 4},
		260: {155, 2},
		261: {157, 1},
		262: {157, 3},
		263: {157, 3},
		264: {114, 3},
		265: {254, 4},
		266: {254, 4},
		267: {254, 4},
		268: {93, 3},
		269: {208, 0},
		270: {208, 1},
		271: {143, 3},
		272: {143, 1},
		273: {143, 3},
		274: {143, 1},
		275: {143, 3},
		276: {143, 1},
		277: {134, 2},
		278: {133, 0},
		279: {133, 1},
		280: {151, 2},
		281: {243, 0},
		282: {243, 1},
		283: {140, 1},
		284: {140, 1},
		285: {292, 0},
		286: {291, 0},
		287: {291, 3},
		288: {291, 1},
		289: {242, 1},
		290: {242, 3},
		291: {253, 2},
		292: {253, 8},
		293: {219, 2},
		294: {220, 0},
		295: {220, 1},
		296: {131, 1},
		297: {131, 1},
		298: {131, 1},
		299: {131, 3},
		300: {131, 4},
		301: {131, 5},
		302: {131, 4},
		303: {132, 0},
		304: {132, 1},
		305: {308, 1},
		306: {308, 2},
		307: {307, 5},
		308: {135, 0},
		309: {135, 2},
		310: {234, 0},
		311: {234, 3},
		312: {163, 1},
		313: {163, 3},
		314: {139, 1},
		315: {139, 2},
		316: {250, 1},
		317: {250, 1},
		318: {235, 0},
		319: {235, 2},
		320: {154, 0},
		321: {154, 3},
		322: {152, 0},
		323: {152, 2},
		324: {152, 4},
		325: {152, 4},
		326: {153, 1},
		327: {153, 1},
		328: {107, 1},
		329: {203, 8},
		330: {205, 2},
		331: {184, 0},
		332: {184, 2},
		333: {145, 0},
		334: {145, 3},
		335: {130, 1},
		336: {119, 1},
		337: {119, 3},
		338: {106, 1},
		339: {106, 3},
		340: {106, 5},
		341: {148, 0},
		342: {148, 1},
		343: {187, 1},
		344: {317, 1},
		345: {58, 1},
		346: {58, 1},
		347: {59, 1},
		348: {59, 1},
		349: {59, 1},
		350: {59, 1},
		351: {59, 1},
		352: {59, 1},
		353: {59, 1},
		354: {59, 1},
		355: {59, 1},
		356: {59, 1},
		357: {59, 1},
		358: {59, 1},
		359: {59, 1},
		360: {59, 1},
		361: {59, 1},
		362: {59, 1},
		363: {59, 1},
		364: {59, 1},
		365: {59, 1},
		366: {59, 1},
		367: {59, 1},
		368: {59, 1},
		369: {59, 1},
		370: {59, 1},
		371: {59, 1},
		372: {59, 1},
		373: {59, 1},
		374: {59, 1},
		375: {59, 1},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [532][]uint16{
		// 0
		{5: 358, 358, 32: 394, 395, 399, 401, 124: 402, 391, 159: 403, 161: 381, 167: 382, 169: 396, 383, 384, 174: 397, 385, 398, 386, 387, 380, 181: 388, 185: 400, 389, 198: 390, 379, 203: 392, 404, 393, 224: 377, 258: 378},
		{5: 376},
		{5: 375, 906},
		{5: 374, 374},
		{5: 372, 372},
		// 5
		{5: 371, 371},
		{5: 370, 370},
		{5: 369, 369},
		{5: 368, 368},
		{5: 367, 367},
		// 10
		{5: 366, 366},
		{5: 365, 365},
		{5: 364, 364},
		{5: 363, 363},
		{5: 362, 362},
		// 15
		{5: 361, 361},
		{5: 360, 360},
		{5: 359, 359},
		{5: 357, 357},
		{5: 356, 356},
		// 20
		{38: 701, 223: 704, 265: 702, 271: 703},
		{49: 695},
		{173: 687, 264: 688},
		{124: 402, 686},
		{2: 189, 189, 7: 189, 16: 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 43: 189, 239: 641, 640},
		// 25
		{5: 160, 160},
		{2: 411, 432, 7: 427, 474, 16: 431, 416, 412, 413, 422, 423, 415, 417, 418, 435, 436, 425, 426, 419, 434, 433, 409, 410, 414, 430, 428, 429, 437, 421, 424, 407, 43: 420, 50: 505, 58: 506, 408, 90: 472, 92: 507, 182: 504, 228: 503, 256: 502},
		{2: 411, 432, 7: 427, 16: 431, 416, 412, 413, 422, 423, 415, 417, 418, 435, 436, 425, 426, 419, 434, 433, 409, 410, 414, 430, 428, 429, 437, 421, 424, 407, 43: 420, 58: 439, 408, 119: 438},
		{2: 411, 432, 7: 427, 16: 431, 416, 412, 413, 422, 423, 415, 417, 418, 435, 436, 425, 426, 419, 434, 433, 409, 410, 414, 430, 428, 429, 437, 421, 424, 407, 43: 420, 58: 406, 408, 130: 405},
		{5: 46, 46},
		// 30
		{41, 41, 5: 41, 41, 42: 41, 44: 41, 41, 41, 41, 41},
		{31, 31, 31, 31, 31, 31, 31, 31, 16: 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 60: 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31},
		{30, 30, 30, 30, 30, 30, 30, 30, 16: 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 60: 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30},
		{29, 29, 29, 29, 29, 29, 29, 29, 16: 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 60: 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29},
		{28, 28, 28, 28, 28, 28, 28, 28, 16: 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 60: 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28},
		// 35
		{27, 27, 27, 27, 27, 27, 27, 27, 16: 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 60: 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27},
		{26, 26, 26, 26, 26, 26, 26, 26, 16: 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 60: 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26},
		{25, 25, 25, 25, 25, 25, 25, 25, 16: 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 60: 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25},
		{24, 24, 24, 24, 24, 24, 24, 24, 16: 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 60: 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24},
		{23, 23, 23, 23, 23, 23, 23, 23, 16: 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 60: 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23},
		// 40
		{22, 22, 22, 22, 22, 22, 22, 22, 16: 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 60: 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22},
		{21, 21, 21, 21, 21, 21, 21, 21, 16: 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 60: 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21},
		{20, 20, 20, 20, 20, 20, 20, 20, 16: 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 60: 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20},
		{19, 19, 19, 19, 19, 19, 19, 19, 16: 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 60: 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19},
		{18, 18, 18, 18, 18, 18, 18, 18, 16: 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 60: 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18},
		// 45
		{17, 17, 17, 17, 17, 17, 17, 17, 16: 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 60: 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17},
		{16, 16, 16, 16, 16, 16, 16, 16, 16: 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 60: 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16},
		{15, 15, 15, 15, 15, 15, 15, 15, 16: 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 60: 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15},
		{14, 14, 14, 14, 14, 14, 14, 14, 16: 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 60: 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14},
		{13, 13, 13, 13, 13, 13, 13, 13, 16: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 60: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13},
		// 50
		{12, 12, 12, 12, 12, 12, 12, 12, 16: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 60: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12},
		{11, 11, 11, 11, 11, 11, 11, 11, 16: 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 60: 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11},
		{10, 10, 10, 10, 10, 10, 10, 10, 16: 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 60: 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10},
		{9, 9, 9, 9, 9, 9, 9, 9, 16: 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 60: 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9},
		{8, 8, 8, 8, 8, 8, 8, 8, 16: 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 60: 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8},
		// 55
		{7, 7, 7, 7, 7, 7, 7, 7, 16: 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 60: 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7},
		{6, 6, 6, 6, 6, 6, 6, 6, 16: 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 60: 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6},
		{5, 5, 5, 5, 5, 5, 5, 5, 16: 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 60: 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5},
		{4, 4, 4, 4, 4, 4, 4, 4, 16: 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 60: 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4},
		{3, 3, 3, 3, 3, 3, 3, 3, 16: 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 60: 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3},
		// 60
		{2, 2, 2, 2, 2, 2, 2, 2, 16: 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 60: 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
		{1, 1, 1, 1, 1, 1, 1, 1, 16: 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 60: 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		{2: 411, 432, 7: 427, 16: 431, 416, 412, 413, 422, 423, 415, 417, 418, 435, 436, 425, 426, 419, 434, 433, 409, 410, 414, 430, 428, 429, 437, 421, 424, 407, 43: 420, 58: 443, 408, 61: 444, 65: 197, 200: 442, 445},
		{2: 40, 40, 40, 40, 40, 40, 16: 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 43: 40, 40, 40, 40, 61: 40, 65: 40, 68: 440, 89: 40},
		{2: 411, 432, 7: 427, 16: 431, 416, 412, 413, 422, 423, 415, 417, 418, 435, 436, 425, 426, 419, 434, 433, 409, 410, 414, 430, 428, 429, 437, 421, 424, 407, 43: 420, 58: 441, 408},
		// 65
		{2: 39, 39, 39, 39, 39, 39, 16: 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 43: 39, 39, 39, 39, 61: 39, 65: 39, 89: 39},
		{5: 196, 196, 44: 196, 196, 196, 65: 196},
		{5: 195, 195, 44: 195, 195, 195, 65: 195},
		{2: 411, 432, 7: 427, 16: 431, 416, 412, 413, 422, 423, 415, 417, 418, 435, 436, 425, 426, 419, 434, 433, 409, 410, 414, 430, 428, 429, 437, 421, 424, 407, 43: 420, 58: 501, 408},
		{65: 446},
		// 70
		{2: 411, 432, 7: 427, 16: 431, 416, 412, 413, 422, 423, 415, 417, 418, 435, 436, 425, 426, 419, 434, 433, 409, 410, 414, 430, 428, 429, 437, 421, 424, 407, 43: 420, 58: 450, 408, 106: 447, 138: 448, 160: 449},
		{71: 497},
		{1: 164, 5: 164, 164, 44: 164, 164, 164},
		{1: 455, 5: 68, 68, 44: 68, 68, 456, 135: 457},
		{38, 38, 17: 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 66: 38, 38, 451, 38, 38, 38, 73: 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38},
		// 75
		{2: 411, 432, 7: 427, 16: 431, 416, 412, 413, 422, 423, 415, 417, 418, 435, 436, 425, 426, 419, 434, 433, 409, 410, 414, 430, 428, 429, 437, 421, 424, 407, 43: 420, 58: 452, 408},
		{37, 37, 17: 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 66: 37, 37, 453, 37, 37, 37, 73: 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37},
		{2: 411, 432, 7: 427, 16: 431, 416, 412, 413, 422, 423, 415, 417, 418, 435, 436, 425, 426, 419, 434, 433, 409, 410, 414, 430, 428, 429, 437, 421, 424, 407, 43: 420, 58: 454, 408},
		{36, 36, 17: 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 66: 36, 36, 69: 36, 36, 36, 73: 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36},
		{2: 411, 432, 7: 427, 16: 431, 416, 412, 413, 422, 423, 415, 417, 418, 435, 436, 425, 426, 419, 434, 433, 409, 410, 414, 430, 428, 429, 437, 421, 424, 407, 43: 420, 58: 450, 408, 106: 447, 138: 496},
		// 80
		{8: 474, 90: 472, 92: 495},
		{5: 56, 56, 44: 56, 458, 154: 459},
		{162: 471},
		{5: 54, 54, 44: 460, 152: 461},
		{51: 465, 94: 462, 101: 466, 107: 464, 153: 463},
		// 85
		{5: 47, 47},
		{199, 199, 5: 199, 199, 16: 199, 42: 199, 115: 199, 120: 199, 126: 199},
		{53, 467, 5: 53, 53, 16: 468, 42: 53},
		{50, 50, 5: 50, 50, 16: 50, 42: 50},
		{49, 49, 5: 49, 49, 16: 49, 42: 49},
		// 90
		{48, 48, 5: 48, 48, 16: 48, 42: 48, 115: 48, 120: 48, 126: 48},
		{51: 465, 94: 462, 101: 466, 107: 464, 153: 470},
		{51: 465, 94: 462, 101: 466, 107: 464, 153: 469},
		{51, 5: 51, 51, 42: 51},
		{52, 5: 52, 52, 42: 52},
		// 95
		{8: 474, 90: 472, 92: 473, 139: 475, 163: 476},
		{209: 493},
		{62, 62, 5: 62, 62, 42: 62, 44: 62, 62, 47: 62, 97: 486, 485, 482, 480, 102: 484, 483, 481, 116: 491, 492, 250: 490},
		{8: 474, 90: 472, 92: 479},
		{64, 64, 5: 64, 64, 42: 64, 44: 64, 64, 47: 64},
		// 100
		{55, 477, 5: 55, 55, 42: 55, 44: 55},
		{8: 474, 90: 472, 92: 473, 139: 478},
		{63, 63, 5: 63, 63, 42: 63, 44: 63, 63, 47: 63},
		{140, 140, 140, 140, 5: 140, 140, 140, 16: 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 61: 140, 91: 140, 95: 140, 97: 140, 140, 482, 480, 102: 140, 140, 140, 116: 140, 140},
		{8: 474, 90: 472, 92: 489},
		// 105
		{8: 474, 90: 472, 92: 488},
		{8: 474, 90: 472, 92: 487},
		{8: 139, 90: 139},
		{8: 138, 90: 138},
		{8: 137, 90: 137},
		// 110
		{8: 136, 90: 136},
		{141, 141, 141, 141, 5: 141, 141, 141, 16: 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 61: 141, 91: 141, 95: 141, 97: 141, 141, 482, 480, 102: 141, 141, 141, 116: 141, 141},
		{142, 142, 142, 142, 5: 142, 142, 142, 16: 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 61: 142, 91: 142, 95: 142, 97: 486, 485, 482, 480, 102: 142, 142, 142, 116: 142, 142},
		{143, 143, 143, 143, 5: 143, 143, 143, 16: 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 61: 143, 91: 143, 95: 143, 97: 486, 485, 482, 480, 102: 143, 143, 481, 116: 143, 143},
		{61, 61, 5: 61, 61, 42: 61, 44: 61, 61, 47: 61},
		// 115
		{60, 60, 5: 60, 60, 42: 60, 44: 60, 60, 47: 60},
		{59, 59, 5: 59, 59, 42: 59, 44: 59, 59, 47: 59},
		{8: 474, 90: 472, 92: 494},
		{144, 144, 144, 144, 5: 144, 144, 144, 16: 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 61: 144, 91: 144, 95: 144, 97: 486, 485, 482, 480, 102: 484, 483, 481, 116: 144, 144},
		{67, 5: 67, 67, 42: 67, 44: 67, 67, 47: 67, 67, 91: 67, 97: 486, 485, 482, 480, 102: 484, 483, 481},
		// 120
		{1: 163, 5: 163, 163, 44: 163, 163, 163},
		{8: 474, 499, 90: 472, 92: 498, 129: 500},
		{173, 173, 5: 173, 173, 42: 173, 44: 173, 173, 173, 97: 486, 485, 482, 480, 102: 484, 483, 481},
		{172, 172, 5: 172, 172, 42: 172, 44: 172, 172, 172},
		{1: 165, 5: 165, 165, 44: 165, 165, 165},
		// 125
		{5: 194, 194, 44: 194, 194, 194, 65: 194},
		{49: 522},
		{1: 520, 49: 157},
		{1: 156, 49: 156},
		{1: 154, 49: 154},
		// 130
		{68: 515},
		{1: 150, 411, 432, 7: 427, 16: 431, 416, 412, 413, 422, 423, 415, 417, 418, 435, 436, 425, 426, 419, 434, 433, 409, 410, 414, 430, 428, 429, 437, 421, 424, 407, 43: 420, 49: 150, 58: 510, 408, 61: 511, 95: 512, 97: 486, 485, 482, 480, 102: 484, 483, 481, 226: 509, 508},
		{1: 151, 49: 151},
		{1: 149, 49: 149},
		{1: 148, 49: 148},
		// 135
		{2: 411, 432, 7: 427, 16: 431, 416, 412, 413, 422, 423, 415, 417, 418, 435, 436, 425, 426, 419, 434, 433, 409, 410, 414, 430, 428, 429, 437, 421, 424, 407, 43: 420, 58: 513, 408, 95: 514},
		{1: 146, 49: 146},
		{1: 147, 49: 147},
		{1: 145, 49: 145},
		{2: 411, 432, 7: 427, 16: 431, 416, 412, 413, 422, 423, 415, 417, 418, 435, 436, 425, 426, 419, 434, 433, 409, 410, 414, 430, 428, 429, 437, 421, 424, 407, 43: 420, 50: 516, 58: 517, 408},
		// 140
		{1: 153, 49: 153},
		{68: 518},
		{50: 519},
		{1: 152, 49: 152},
		{2: 411, 432, 7: 427, 474, 16: 431, 416, 412, 413, 422, 423, 415, 417, 418, 435, 436, 425, 426, 419, 434, 433, 409, 410, 414, 430, 428, 429, 437, 421, 424, 407, 43: 420, 50: 505, 58: 506, 408, 90: 472, 92: 507, 182: 521},
		// 145
		{1: 155, 49: 155},
		{190: 525, 524, 245: 523},
		{68, 629, 5: 68, 68, 42: 68, 44: 68, 68, 456, 68, 68, 135: 628},
		{135, 135, 5: 135, 135, 42: 135, 44: 135, 135, 135, 135, 135},
		{4: 528, 93: 533, 136: 531, 530, 155: 527, 157: 529, 532, 233: 526},
		// 150
		{131, 131, 5: 131, 131, 42: 624, 44: 131, 131, 131, 131, 131, 231: 625, 623},
		{128, 128, 5: 128, 128, 42: 128, 44: 128, 128, 128, 128, 128},
		{98, 2: 411, 432, 539, 7: 427, 16: 431, 416, 412, 413, 422, 423, 415, 417, 418, 435, 436, 425, 426, 419, 434, 433, 409, 410, 414, 430, 428, 429, 437, 421, 424, 407, 43: 420, 58: 542, 408, 63: 98, 98, 93: 533, 133: 541, 540, 136: 531, 530, 155: 619, 157: 529, 532, 251: 618},
		{124, 124, 5: 124, 124, 42: 124, 44: 124, 124, 124, 124, 124, 105: 559, 108: 557, 555, 111: 556, 113: 558, 121: 607, 127: 608, 143: 606, 254: 605},
		{4: 539, 93: 538, 114: 600, 120: 602, 126: 601},
		// 155
		{4: 539, 93: 538, 114: 597, 120: 596, 126: 595},
		{94: 462, 101: 466, 107: 534},
		{115, 115, 5: 115, 115, 42: 115, 44: 115, 115, 115, 115, 115, 105: 115, 108: 115, 115, 111: 115, 113: 115, 121: 115, 127: 115},
		{120: 536, 126: 535},
		{4: 539, 93: 538, 114: 594},
		// 160
		{4: 539, 93: 538, 114: 537},
		{117, 117, 5: 117, 117, 42: 117, 44: 117, 117, 117, 117, 117},
		{4: 561, 105: 559, 108: 557, 555, 111: 556, 113: 558, 143: 560, 253: 554},
		{98, 2: 411, 432, 7: 427, 16: 431, 416, 412, 413, 422, 423, 415, 417, 418, 435, 436, 425, 426, 419, 434, 433, 409, 410, 414, 430, 428, 429, 437, 421, 424, 407, 43: 420, 58: 542, 408, 63: 98, 98, 133: 541, 540},
		{553},
		// 165
		{95, 60: 95, 62: 95, 546, 547, 140: 544, 151: 545, 243: 543},
		{97, 60: 97, 62: 97, 97, 97},
		{99, 60: 99, 62: 99},
		{2: 411, 432, 7: 427, 16: 431, 416, 412, 413, 422, 423, 415, 417, 418, 435, 436, 425, 426, 419, 434, 433, 409, 410, 414, 430, 428, 429, 437, 421, 424, 407, 43: 420, 58: 550, 408, 187: 549, 242: 548},
		{94, 60: 94, 62: 94},
		// 170
		{2: 93, 93, 7: 93, 16: 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 43: 93},
		{2: 92, 92, 7: 92, 16: 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 43: 92},
		{96, 50: 96, 96, 96, 96, 96, 96, 60: 96, 62: 96, 72: 551},
		{87, 50: 87, 87, 87, 87, 87, 87, 60: 87, 62: 87, 72: 87},
		{33, 50: 33, 33, 33, 33, 33, 33, 60: 33, 62: 33, 72: 33},
		// 175
		{2: 411, 432, 7: 427, 16: 431, 416, 412, 413, 422, 423, 415, 417, 418, 435, 436, 425, 426, 419, 434, 433, 409, 410, 414, 430, 428, 429, 437, 421, 424, 407, 43: 420, 58: 550, 408, 187: 552},
		{86, 50: 86, 86, 86, 86, 86, 86, 60: 86, 62: 86, 72: 86},
		{108, 108, 4: 108, 108, 108, 42: 108, 44: 108, 108, 108, 108, 108, 91: 108, 105: 108, 108: 108, 108, 111: 108, 113: 108, 121: 108, 127: 108},
		{4: 539, 93: 593},
		{2: 411, 432, 7: 427, 16: 431, 416, 412, 413, 422, 423, 415, 417, 418, 435, 436, 425, 426, 419, 434, 433, 409, 410, 414, 430, 428, 429, 437, 421, 424, 407, 43: 420, 58: 542, 408, 98, 62: 98, 98, 98, 133: 541, 590},
		// 180
		{104, 4: 104, 46: 104, 50: 104, 104, 53: 104, 104, 91: 104},
		{2: 411, 432, 7: 427, 16: 431, 416, 412, 413, 422, 423, 415, 417, 418, 435, 436, 425, 426, 419, 434, 433, 409, 410, 414, 430, 428, 429, 437, 421, 424, 407, 43: 420, 58: 542, 408, 98, 63: 98, 98, 133: 541, 588},
		{102, 4: 102, 46: 102, 50: 102, 102, 53: 102, 102, 91: 102},
		{100, 4: 100, 46: 100, 50: 100, 100, 53: 100, 100, 91: 100},
		{4: 73, 50: 573, 575, 53: 574, 576, 131: 577, 587},
		// 185
		{4: 539, 93: 562, 105: 107, 108: 107, 107, 111: 107, 113: 107, 208: 563},
		{106, 46: 106, 91: 106, 105: 106, 108: 106, 106, 111: 106, 113: 106},
		{105: 559, 108: 557, 555, 111: 556, 113: 558, 143: 564},
		{107, 4: 539, 46: 107, 91: 107, 93: 562, 208: 565},
		{68, 46: 456, 91: 68, 135: 566},
		// 190
		{82, 91: 568, 219: 569, 567},
		{571},
		{8: 474, 90: 472, 92: 570},
		{81},
		{83, 97: 486, 485, 482, 480, 102: 484, 483, 481},
		// 195
		{4: 73, 50: 573, 575, 53: 574, 576, 131: 577, 572},
		{4: 84},
		{4: 80, 52: 80, 55: 80},
		{4: 79, 52: 79, 55: 79},
		{4: 78, 52: 78, 55: 78},
		// 200
		{1: 579, 94: 462, 101: 466, 107: 578},
		{4: 72, 52: 72, 55: 72},
		{1: 583, 115: 582},
		{94: 462, 101: 466, 107: 580},
		{115: 581},
		// 205
		{4: 74, 52: 74, 55: 74},
		{4: 77, 52: 77, 55: 77},
		{94: 462, 101: 466, 107: 585, 115: 584},
		{4: 76, 52: 76, 55: 76},
		{115: 586},
		// 210
		{4: 75, 52: 75, 55: 75},
		{4: 85},
		{60: 589},
		{103, 4: 103, 46: 103, 50: 103, 103, 53: 103, 103, 91: 103},
		{60: 592, 62: 591},
		// 215
		{105, 4: 105, 46: 105, 50: 105, 105, 53: 105, 105, 91: 105},
		{101, 4: 101, 46: 101, 50: 101, 101, 53: 101, 101, 91: 101},
		{112, 112, 5: 112, 112, 42: 112, 44: 112, 112, 112, 112, 112},
		{120, 120, 5: 120, 120, 42: 120, 44: 120, 120, 120, 120, 120},
		{4: 539, 93: 538, 114: 599},
		// 220
		{4: 539, 93: 538, 114: 598},
		{116, 116, 5: 116, 116, 42: 116, 44: 116, 116, 116, 116, 116},
		{118, 118, 5: 118, 118, 42: 118, 44: 118, 118, 118, 118, 118},
		{121, 121, 5: 121, 121, 42: 121, 44: 121, 121, 121, 121, 121},
		{123, 123, 5: 123, 123, 42: 123, 44: 123, 123, 123, 123, 123},
		// 225
		{4: 539, 93: 538, 114: 604},
		{4: 539, 93: 538, 114: 603},
		{119, 119, 5: 119, 119, 42: 119, 44: 119, 119, 119, 119, 119},
		{122, 122, 5: 122, 122, 42: 122, 44: 122, 122, 122, 122, 122},
		{4: 539, 93: 617},
		// 230
		{4: 539, 93: 616},
		{63: 546, 547, 140: 544, 151: 612},
		{63: 546, 547, 140: 544, 151: 609},
		{50: 573, 575, 73, 574, 576, 131: 577, 610},
		{52: 611},
		// 235
		{4: 110},
		{50: 573, 575, 73, 574, 576, 73, 131: 577, 613},
		{52: 615, 55: 614},
		{4: 111},
		{4: 109},
		// 240
		{113, 113, 5: 113, 113, 42: 113, 44: 113, 113, 113, 113, 113, 105: 113, 108: 113, 113, 111: 113, 113: 113, 121: 113, 127: 113},
		{114, 114, 5: 114, 114, 42: 114, 44: 114, 114, 114, 114, 114, 105: 114, 108: 114, 114, 111: 114, 113: 114, 121: 114, 127: 114},
		{620, 621},
		{126, 126},
		{127, 127, 5: 127, 127, 42: 127, 44: 127, 127, 127, 127, 127},
		// 245
		{4: 539, 93: 533, 136: 531, 530, 155: 622, 157: 529, 532},
		{125, 125},
		{129, 129, 5: 129, 129, 42: 129, 44: 129, 129, 129, 129, 129, 255: 627},
		{2: 411, 432, 7: 427, 16: 431, 416, 412, 413, 422, 423, 415, 417, 418, 435, 436, 425, 426, 419, 434, 433, 409, 410, 414, 430, 428, 429, 437, 421, 424, 407, 43: 420, 58: 406, 408, 130: 626},
		{130, 130, 5: 130, 130, 42: 130, 44: 130, 130, 130, 130, 130},
		// 250
		{132, 132, 5: 132, 132, 42: 132, 44: 132, 132, 132, 132, 132},
		{133, 133, 5: 133, 133, 42: 133, 44: 133, 133, 133, 133, 133},
		{66, 5: 66, 66, 42: 66, 44: 66, 66, 47: 66, 632, 234: 631},
		{190: 525, 630},
		{134, 134, 5: 134, 134, 42: 134, 44: 134, 134, 134, 134, 134},
		// 255
		{58, 5: 58, 58, 42: 58, 44: 58, 58, 47: 636, 235: 635},
		{162: 633},
		{8: 474, 90: 472, 92: 473, 139: 475, 163: 634},
		{65, 477, 5: 65, 65, 42: 65, 44: 65, 65, 47: 65},
		{56, 5: 56, 56, 42: 56, 44: 56, 458, 154: 638},
		// 260
		{8: 474, 90: 472, 92: 637},
		{57, 5: 57, 57, 42: 57, 44: 57, 57, 97: 486, 485, 482, 480, 102: 484, 483, 481},
		{54, 5: 54, 54, 42: 54, 44: 460, 152: 639},
		{158, 5: 158, 158, 42: 158},
		{2: 411, 432, 7: 427, 16: 431, 416, 412, 413, 422, 423, 415, 417, 418, 435, 436, 425, 426, 419, 434, 433, 409, 410, 414, 430, 428, 429, 437, 421, 424, 407, 43: 420, 58: 439, 408, 119: 642},
		// 265
		{2: 188, 188, 7: 188, 16: 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 43: 188},
		{4: 644, 36: 647, 65: 646, 89: 648, 207: 645, 237: 643},
		{5: 167, 167, 42: 681, 249: 680},
		{292, 2: 411, 432, 7: 427, 16: 431, 416, 412, 413, 422, 423, 415, 417, 418, 435, 436, 425, 426, 419, 434, 433, 409, 410, 414, 430, 428, 429, 437, 421, 424, 407, 43: 420, 58: 450, 408, 106: 667, 214: 668, 669},
		{4: 658, 156: 657, 206: 656},
		// 270
		{1: 170, 411, 432, 5: 170, 170, 427, 16: 431, 416, 412, 413, 422, 423, 415, 417, 418, 435, 436, 425, 426, 419, 434, 433, 409, 410, 414, 430, 428, 429, 437, 421, 424, 407, 170, 420, 58: 450, 408, 106: 650, 166: 651, 218: 649},
		{4: 182},
		{4: 181},
		{1: 654, 5: 183, 183, 42: 183},
		{71: 652},
		// 275
		{1: 169, 5: 169, 169, 42: 169},
		{8: 474, 499, 90: 472, 92: 498, 129: 653},
		{1: 171, 5: 171, 171, 42: 171},
		{2: 411, 432, 7: 427, 16: 431, 416, 412, 413, 422, 423, 415, 417, 418, 435, 436, 425, 426, 419, 434, 433, 409, 410, 414, 430, 428, 429, 437, 421, 424, 407, 43: 420, 58: 450, 408, 106: 650, 166: 655},
		{1: 168, 5: 168, 168, 42: 168},
		// 280
		{1: 665, 5: 184, 184, 42: 184},
		{1: 180, 5: 180, 180, 42: 180},
		{177, 8: 474, 499, 90: 472, 92: 498, 129: 661, 268: 660, 659},
		{664},
		{176, 662},
		// 285
		{174, 174},
		{8: 474, 499, 90: 472, 92: 498, 129: 663},
		{175, 175},
		{1: 178, 5: 178, 178, 42: 178},
		{4: 658, 156: 666},
		// 290
		{1: 179, 5: 179, 179, 42: 179},
		{294, 294},
		{291, 678},
		{670},
		{4: 674, 36: 647, 89: 648, 124: 402, 672, 207: 671, 261: 673},
		// 295
		{4: 658, 156: 657, 206: 677},
		{5: 186, 186, 42: 186},
		{5: 185, 185, 42: 185},
		{124: 402, 675},
		{676},
		// 300
		{5: 159, 159, 42: 159},
		{1: 665, 5: 187, 187, 42: 187},
		{2: 411, 432, 7: 427, 16: 431, 416, 412, 413, 422, 423, 415, 417, 418, 435, 436, 425, 426, 419, 434, 433, 409, 410, 414, 430, 428, 429, 437, 421, 424, 407, 43: 420, 58: 450, 408, 106: 679},
		{293, 293},
		{5: 190, 190},
		// 305
		{37: 682},
		{112: 683},
		{159: 684},
		{2: 411, 432, 7: 427, 16: 431, 416, 412, 413, 422, 423, 415, 417, 418, 435, 436, 425, 426, 419, 434, 433, 409, 410, 414, 430, 428, 429, 437, 421, 424, 407, 43: 420, 58: 450, 408, 106: 447, 138: 448, 160: 685},
		{1: 455, 5: 166, 166},
		// 310
		{5: 191, 191},
		{2: 45, 45, 7: 45, 16: 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 43: 45, 110: 690, 184: 693},
		{2: 45, 45, 7: 45, 16: 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 43: 45, 110: 690, 184: 689},
		{2: 411, 432, 7: 427, 16: 431, 416, 412, 413, 422, 423, 415, 417, 418, 435, 436, 425, 426, 419, 434, 433, 409, 410, 414, 430, 428, 429, 437, 421, 424, 407, 43: 420, 58: 439, 408, 119: 692},
		{180: 691},
		// 315
		{2: 44, 44, 7: 44, 16: 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 43: 44},
		{5: 192, 192},
		{2: 411, 432, 7: 427, 16: 431, 416, 412, 413, 422, 423, 415, 417, 418, 435, 436, 425, 426, 419, 434, 433, 409, 410, 414, 430, 428, 429, 437, 421, 424, 407, 43: 420, 58: 406, 408, 130: 694},
		{5: 193, 193},
		{2: 411, 432, 7: 427, 16: 431, 416, 412, 413, 422, 423, 415, 417, 418, 435, 436, 425, 426, 419, 434, 433, 409, 410, 414, 430, 428, 429, 437, 421, 424, 407, 43: 420, 58: 439, 408, 119: 696},
		// 320
		{2: 411, 432, 5: 197, 197, 427, 16: 431, 416, 412, 413, 422, 423, 415, 417, 418, 435, 436, 425, 426, 419, 434, 433, 409, 410, 414, 430, 428, 429, 437, 421, 424, 407, 43: 420, 197, 197, 197, 58: 443, 408, 61: 444, 200: 442, 697},
		{5: 68, 68, 44: 68, 68, 456, 135: 698},
		{5: 56, 56, 44: 56, 458, 154: 699},
		{5: 54, 54, 44: 460, 152: 700},
		{5: 198, 198},
		// 325
		{173: 903},
		{2: 43, 43, 7: 43, 16: 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43: 43, 110: 706, 145: 705},
		{2: 353, 353, 7: 353, 16: 353, 353, 353, 353, 353, 353, 353, 353, 353, 353, 353, 353, 353, 353, 353, 353, 353, 353, 353, 353, 353, 353, 353, 353, 353, 353, 43: 353, 110: 353},
		{2: 352, 352, 7: 352, 16: 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 43: 352, 110: 352},
		{2: 411, 432, 7: 427, 16: 431, 416, 412, 413, 422, 423, 415, 417, 418, 435, 436, 425, 426, 419, 434, 433, 409, 410, 414, 430, 428, 429, 437, 421, 424, 407, 43: 420, 58: 439, 408, 119: 709},
		// 330
		{8: 707},
		{180: 708},
		{2: 42, 42, 42, 7: 42, 16: 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 43: 42},
		{4: 711, 351, 351, 263: 710},
		{5: 354, 354},
		// 335
		{2: 411, 432, 7: 427, 11: 717, 719, 16: 431, 416, 412, 413, 422, 423, 415, 417, 418, 435, 436, 425, 426, 419, 434, 433, 409, 410, 414, 430, 428, 429, 437, 421, 424, 407, 43: 420, 58: 450, 408, 106: 716, 112: 720, 146: 721, 150: 718, 164: 714, 168: 715, 202: 713, 262: 712},
		{900, 901},
		{349, 349},
		{347, 347},
		{346, 346},
		// 340
		{17: 778, 771, 770, 793, 792, 774, 786, 785, 789, 791, 794, 795, 790, 66: 788, 787, 69: 783, 784, 73: 769, 772, 777, 775, 763, 764, 765, 766, 767, 768, 762, 761, 773, 776, 760, 759, 211: 758, 755, 779, 221: 753, 229: 756, 757, 238: 754, 246: 780, 751, 782, 260: 752, 267: 750, 270: 781, 272: 796},
		{112: 744},
		{2: 43, 43, 43, 7: 43, 16: 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43: 43, 110: 706, 145: 738},
		{2: 288, 288, 288, 7: 288, 16: 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 43: 288, 112: 720, 146: 721, 150: 723, 241: 722},
		{2: 290, 290, 290, 7: 290, 16: 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 43: 290, 110: 290},
		// 345
		{2: 289, 289, 289, 7: 289, 16: 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 43: 289, 110: 289},
		{2: 411, 432, 35, 7: 427, 16: 431, 416, 412, 413, 422, 423, 415, 417, 418, 435, 436, 425, 426, 419, 434, 433, 409, 410, 414, 430, 428, 429, 437, 421, 424, 407, 43: 420, 58: 725, 408, 148: 724},
		{2: 287, 287, 287, 7: 287, 16: 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 43: 287},
		{4: 726},
		{4: 34},
		// 350
		{2: 411, 432, 7: 427, 16: 431, 416, 412, 413, 422, 423, 415, 417, 418, 435, 436, 425, 426, 419, 434, 433, 409, 410, 414, 430, 428, 429, 437, 421, 424, 407, 43: 420, 58: 728, 408, 141: 727},
		{729, 730},
		{296, 296},
		{286, 286, 734, 30: 736, 735, 147: 733, 149: 732},
		{2: 411, 432, 7: 427, 16: 431, 416, 412, 413, 422, 423, 415, 417, 418, 435, 436, 425, 426, 419, 434, 433, 409, 410, 414, 430, 428, 429, 437, 421, 424, 407, 43: 420, 58: 731, 408},
		// 355
		{295, 295},
		{297, 297},
		{285, 285},
		{95: 737},
		{283, 283},
		// 360
		{282, 282},
		{284, 284},
		{2: 411, 432, 35, 7: 427, 16: 431, 416, 412, 413, 422, 423, 415, 417, 418, 435, 436, 425, 426, 419, 434, 433, 409, 410, 414, 430, 428, 429, 437, 421, 424, 407, 43: 420, 58: 725, 408, 148: 739},
		{4: 740},
		{2: 411, 432, 7: 427, 16: 431, 416, 412, 413, 422, 423, 415, 417, 418, 435, 436, 425, 426, 419, 434, 433, 409, 410, 414, 430, 428, 429, 437, 421, 424, 407, 43: 420, 58: 728, 408, 141: 741},
		// 365
		{742, 730},
		{286, 286, 734, 30: 736, 735, 147: 733, 149: 743},
		{298, 298},
		{2: 411, 432, 35, 7: 427, 16: 431, 416, 412, 413, 422, 423, 415, 417, 418, 435, 436, 425, 426, 419, 434, 433, 409, 410, 414, 430, 428, 429, 437, 421, 424, 407, 43: 420, 58: 725, 408, 148: 745},
		{4: 746},
		// 370
		{2: 411, 432, 7: 427, 16: 431, 416, 412, 413, 422, 423, 415, 417, 418, 435, 436, 425, 426, 419, 434, 433, 409, 410, 414, 430, 428, 429, 437, 421, 424, 407, 43: 420, 58: 728, 408, 141: 747},
		{748, 730},
		{286, 286, 734, 30: 736, 735, 147: 733, 149: 749},
		{299, 299},
		{344, 344, 852, 846, 8: 844, 851, 845, 847, 848, 850, 853, 849, 165: 843, 216: 842, 841},
		// 375
		{281, 281, 281, 281, 8: 281, 281, 281, 281, 281, 281, 281, 281},
		{280, 280, 280, 280, 8: 280, 280, 280, 280, 280, 280, 280, 280},
		{279, 279, 279, 279, 8: 279, 279, 279, 279, 279, 279, 279, 279},
		{217, 217, 217, 217, 798, 7: 217, 217, 217, 217, 217, 217, 217, 217, 217, 56: 217, 217, 96: 799, 118: 839},
		{212, 212, 212, 212, 7: 212, 212, 212, 212, 212, 212, 212, 212, 212, 56: 212, 212, 123: 838},
		// 380
		{210, 210, 210, 210, 828, 7: 210, 210, 210, 210, 210, 210, 210, 210, 210, 56: 210, 210, 96: 829, 183: 836, 197: 830},
		{210, 210, 210, 210, 828, 7: 210, 210, 210, 210, 210, 210, 210, 210, 210, 56: 210, 210, 96: 829, 183: 827, 197: 830},
		{217, 217, 217, 217, 798, 8: 217, 217, 217, 217, 217, 217, 217, 217, 96: 799, 118: 826},
		{273, 273, 273, 273, 273, 7: 273, 273, 273, 273, 273, 273, 273, 273, 273, 56: 273, 273},
		{272, 272, 272, 272, 272, 7: 272, 272, 272, 272, 272, 272, 272, 272, 272, 56: 272, 272},
		// 385
		{271, 271, 271, 271, 271, 7: 271, 271, 271, 271, 271, 271, 271, 271, 271, 56: 271, 271},
		{270, 270, 270, 270, 270, 7: 270, 270, 270, 270, 270, 270, 270, 270, 270, 56: 270, 270},
		{269, 269, 269, 269, 269, 7: 269, 269, 269, 269, 269, 269, 269, 269, 269, 56: 269, 269},
		{268, 268, 268, 268, 268, 7: 268, 268, 268, 268, 268, 268, 268, 268, 268, 56: 268, 268},
		{267, 267, 267, 267, 267, 7: 267, 267, 267, 267, 267, 267, 267, 267, 267, 56: 267, 267},
		// 390
		{266, 266, 266, 266, 266, 7: 266, 266, 266, 266, 266, 266, 266, 266, 266, 56: 266, 266},
		{265, 265, 265, 265, 265, 7: 265, 265, 265, 265, 265, 265, 265, 265, 265, 56: 265, 265},
		{264, 264, 264, 264, 264, 7: 264, 264, 264, 264, 264, 264, 264, 264, 264, 56: 264, 264},
		{263, 263, 263, 263, 263, 7: 263, 263, 263, 263, 263, 263, 263, 263, 263, 56: 263, 263},
		{262, 262, 262, 262, 7: 262, 262, 262, 262, 262, 262, 262, 262, 262, 56: 262, 262},
		// 395
		{261, 261, 261, 261, 7: 261, 261, 261, 261, 261, 261, 261, 261, 261, 56: 261, 261},
		{260, 260, 260, 260, 260, 7: 260, 260, 260, 260, 260, 260, 260, 260, 260, 56: 260, 260},
		{259, 259, 259, 259, 259, 7: 259, 259, 259, 259, 259, 259, 259, 259, 259, 56: 259, 259},
		{258, 258, 258, 258, 258, 7: 258, 258, 258, 258, 258, 258, 258, 258, 258, 56: 258, 258},
		{257, 257, 257, 257, 257, 7: 257, 257, 257, 257, 257, 257, 257, 257, 257, 56: 257, 257},
		// 400
		{256, 256, 256, 256, 256, 7: 256, 256, 256, 256, 256, 256, 256, 256, 256, 56: 256, 256},
		{255, 255, 255, 255, 255, 7: 255, 255, 255, 255, 255, 255, 255, 255, 255, 56: 255, 255, 252: 825},
		{253, 253, 253, 253, 253, 8: 253, 253, 253, 253, 253, 253, 253, 253},
		{251, 251, 251, 251, 798, 8: 251, 251, 251, 251, 251, 251, 251, 251, 96: 824},
		{249, 249, 249, 249, 798, 8: 249, 249, 249, 249, 249, 249, 249, 249, 96: 823},
		// 405
		{4: 798, 96: 822},
		{4: 798, 96: 821},
		{246, 246, 246, 246, 246, 8: 246, 246, 246, 246, 246, 246, 246, 246, 128: 820},
		{245, 245, 245, 245, 245, 8: 245, 245, 245, 245, 245, 245, 245, 245, 128: 819},
		{244, 244, 244, 244, 244, 8: 244, 244, 244, 244, 244, 244, 244, 244, 66: 817, 816, 128: 818},
		// 410
		{66: 813, 812, 69: 810, 811},
		{4: 239},
		{4: 238},
		{4: 235},
		{229, 229, 229, 229, 229, 7: 229, 229, 229, 229, 229, 229, 229, 229, 229, 56: 229, 229},
		// 415
		{228, 228, 228, 228, 228, 7: 228, 228, 228, 228, 228, 228, 228, 228, 228, 56: 228, 228},
		{223, 223, 223, 223, 8: 223, 223, 223, 223, 223, 223, 223, 223},
		{217, 217, 217, 217, 798, 8: 217, 217, 217, 217, 217, 217, 217, 217, 96: 799, 118: 809},
		{217, 217, 217, 217, 798, 8: 217, 217, 217, 217, 217, 217, 217, 217, 96: 799, 118: 808},
		{217, 217, 217, 217, 798, 8: 217, 217, 217, 217, 217, 217, 217, 217, 96: 799, 118: 807},
		// 420
		{217, 217, 217, 217, 798, 7: 217, 217, 217, 217, 217, 217, 217, 217, 217, 56: 217, 217, 96: 799, 118: 797},
		{212, 212, 212, 212, 7: 212, 212, 212, 212, 212, 212, 212, 212, 212, 56: 212, 212, 123: 802},
		{94: 462, 101: 466, 107: 800},
		{216, 216, 216, 216, 7: 216, 216, 216, 216, 216, 216, 216, 216, 216, 56: 216, 216},
		{801},
		// 425
		{218, 218, 218, 218, 7: 218, 218, 218, 218, 218, 218, 218, 218, 218, 56: 218, 218},
		{219, 219, 219, 219, 7: 804, 219, 219, 219, 219, 219, 219, 219, 219, 56: 803, 805, 122: 806},
		{215, 215, 215, 215, 7: 215, 215, 215, 215, 215, 215, 215, 215, 215, 56: 215, 215},
		{214, 214, 214, 214, 7: 214, 214, 214, 214, 214, 214, 214, 214, 214, 56: 214, 214},
		{213, 213, 213, 213, 7: 213, 213, 213, 213, 213, 213, 213, 213, 213, 56: 213, 213},
		// 430
		{211, 211, 211, 211, 7: 211, 211, 211, 211, 211, 211, 211, 211, 211, 56: 211, 211},
		{220, 220, 220, 220, 8: 220, 220, 220, 220, 220, 220, 220, 220},
		{221, 221, 221, 221, 8: 221, 221, 221, 221, 221, 221, 221, 221},
		{222, 222, 222, 222, 8: 222, 222, 222, 222, 222, 222, 222, 222},
		{243, 243, 243, 243, 243, 8: 243, 243, 243, 243, 243, 243, 243, 243, 128: 815},
		// 435
		{242, 242, 242, 242, 242, 8: 242, 242, 242, 242, 242, 242, 242, 242, 128: 814},
		{4: 237},
		{4: 236},
		{4: 231},
		{4: 232},
		// 440
		{4: 234},
		{4: 233},
		{4: 230},
		{4: 240},
		{4: 241},
		// 445
		{247, 247, 247, 247, 8: 247, 247, 247, 247, 247, 247, 247, 247},
		{248, 248, 248, 248, 8: 248, 248, 248, 248, 248, 248, 248, 248},
		{250, 250, 250, 250, 8: 250, 250, 250, 250, 250, 250, 250, 250},
		{252, 252, 252, 252, 8: 252, 252, 252, 252, 252, 252, 252, 252},
		{254, 254, 254, 254, 254, 7: 254, 254, 254, 254, 254, 254, 254, 254, 254, 56: 254, 254},
		// 450
		{274, 274, 274, 274, 8: 274, 274, 274, 274, 274, 274, 274, 274},
		{212, 212, 212, 212, 7: 212, 212, 212, 212, 212, 212, 212, 212, 212, 56: 212, 212, 123: 835},
		{94: 462, 101: 466, 107: 831},
		{209, 209, 209, 209, 7: 209, 209, 209, 209, 209, 209, 209, 209, 209, 56: 209, 209},
		{208, 208, 208, 208, 7: 208, 208, 208, 208, 208, 208, 208, 208, 208, 56: 208, 208},
		// 455
		{801, 832},
		{94: 462, 101: 466, 107: 833},
		{834},
		{207, 207, 207, 207, 7: 207, 207, 207, 207, 207, 207, 207, 207, 207, 56: 207, 207},
		{275, 275, 275, 275, 7: 804, 275, 275, 275, 275, 275, 275, 275, 275, 56: 803, 805, 122: 806},
		// 460
		{212, 212, 212, 212, 7: 212, 212, 212, 212, 212, 212, 212, 212, 212, 56: 212, 212, 123: 837},
		{276, 276, 276, 276, 7: 804, 276, 276, 276, 276, 276, 276, 276, 276, 56: 803, 805, 122: 806},
		{277, 277, 277, 277, 7: 804, 277, 277, 277, 277, 277, 277, 277, 277, 56: 803, 805, 122: 806},
		{212, 212, 212, 212, 7: 212, 212, 212, 212, 212, 212, 212, 212, 212, 56: 212, 212, 123: 840},
		{278, 278, 278, 278, 7: 804, 278, 278, 278, 278, 278, 278, 278, 278, 56: 803, 805, 122: 806},
		// 465
		{345, 345},
		{343, 343, 852, 846, 8: 844, 851, 845, 847, 848, 850, 853, 849, 165: 899},
		{342, 342, 342, 342, 8: 342, 342, 342, 342, 342, 342, 342, 342},
		{10: 898},
		{339, 339, 339, 339, 8: 339, 339, 339, 339, 339, 339, 339, 339},
		// 470
		{338, 338, 338, 338, 8: 338, 338, 338, 338, 338, 338, 338, 338},
		{112: 897},
		{336, 336, 336, 336, 8: 336, 336, 336, 336, 336, 336, 336, 336, 112: 896},
		{112: 895},
		{112: 894},
		// 475
		{4: 875, 10: 866, 53: 863, 94: 870, 874, 105: 864, 142: 869, 144: 868, 172: 879, 188: 880, 881, 192: 877, 878, 876, 861, 210: 873, 222: 859, 225: 865, 236: 872, 244: 862, 257: 860, 259: 871, 266: 867},
		{95: 858},
		{2: 411, 432, 7: 427, 16: 431, 416, 412, 413, 422, 423, 415, 417, 418, 435, 436, 425, 426, 419, 434, 433, 409, 410, 414, 430, 428, 429, 437, 421, 424, 407, 43: 420, 58: 439, 408, 119: 854},
		{4: 855},
		{2: 411, 432, 7: 427, 16: 431, 416, 412, 413, 422, 423, 415, 417, 418, 435, 436, 425, 426, 419, 434, 433, 409, 410, 414, 430, 428, 429, 437, 421, 424, 407, 43: 420, 58: 450, 408, 106: 856},
		// 480
		{857},
		{330, 330, 330, 330, 8: 330, 330, 330, 330, 330, 330, 330, 330},
		{331, 331, 331, 331, 8: 331, 331, 331, 331, 331, 331, 331, 331},
		{332, 332, 332, 332, 8: 332, 332, 332, 332, 332, 332, 332, 332},
		{329, 329, 329, 329, 8: 329, 329, 329, 329, 329, 329, 329, 329},
		// 485
		{328, 328, 328, 328, 8: 328, 328, 328, 328, 328, 328, 328, 328},
		{327, 327, 327, 327, 8: 327, 327, 327, 327, 327, 327, 327, 327},
		{94: 890, 142: 892, 144: 891, 196: 893},
		{94: 890, 142: 892, 144: 891, 196: 889},
		{324, 324, 324, 324, 8: 324, 324, 324, 324, 324, 324, 324, 324},
		// 490
		{323, 323, 323, 323, 8: 323, 323, 323, 323, 323, 323, 323, 323},
		{322, 322, 322, 322, 8: 322, 322, 322, 322, 322, 322, 322, 322},
		{321, 321, 321, 321, 8: 321, 321, 321, 321, 321, 321, 321, 321},
		{320, 320, 320, 320, 8: 320, 320, 320, 320, 320, 320, 320, 320},
		{319, 319, 319, 319, 8: 319, 319, 319, 319, 319, 319, 319, 319},
		// 495
		{318, 318, 318, 318, 8: 318, 318, 318, 318, 318, 318, 318, 318, 95: 888},
		{317, 317, 317, 317, 8: 317, 317, 317, 317, 317, 317, 317, 317},
		{316, 316, 316, 316, 8: 316, 316, 316, 316, 316, 316, 316, 316},
		{315, 315, 315, 315, 8: 315, 315, 315, 315, 315, 315, 315, 315, 95: 315},
		{4: 875, 172: 879, 188: 880, 881, 192: 877, 878, 876, 886},
		// 500
		{309, 309, 309, 309, 8: 309, 309, 309, 309, 309, 309, 309, 309},
		{308, 308, 308, 308, 8: 308, 308, 308, 308, 308, 308, 308, 308},
		{4: 882},
		{302, 302, 302, 302, 305, 8: 302, 302, 302, 302, 302, 302, 302, 302},
		{301, 301, 301, 301, 304, 8: 301, 301, 301, 301, 301, 301, 301, 301},
		// 505
		{300, 300, 300, 300, 303, 8: 300, 300, 300, 300, 300, 300, 300, 300},
		{883, 94: 462, 101: 884},
		{307, 307, 307, 307, 8: 307, 307, 307, 307, 307, 307, 307, 307},
		{885},
		{306, 306, 306, 306, 8: 306, 306, 306, 306, 306, 306, 306, 306},
		// 510
		{887},
		{310, 310, 310, 310, 8: 310, 310, 310, 310, 310, 310, 310, 310},
		{314, 314, 314, 314, 8: 314, 314, 314, 314, 314, 314, 314, 314, 95: 314},
		{325, 325, 325, 325, 8: 325, 325, 325, 325, 325, 325, 325, 325},
		{313, 313, 313, 313, 8: 313, 313, 313, 313, 313, 313, 313, 313},
		// 515
		{312, 312, 312, 312, 8: 312, 312, 312, 312, 312, 312, 312, 312},
		{311, 311, 311, 311, 8: 311, 311, 311, 311, 311, 311, 311, 311},
		{326, 326, 326, 326, 8: 326, 326, 326, 326, 326, 326, 326, 326},
		{333, 333, 333, 333, 8: 333, 333, 333, 333, 333, 333, 333, 333},
		{334, 334, 334, 334, 8: 334, 334, 334, 334, 334, 334, 334, 334},
		// 520
		{335, 335, 335, 335, 8: 335, 335, 335, 335, 335, 335, 335, 335},
		{337, 337, 337, 337, 8: 337, 337, 337, 337, 337, 337, 337, 337},
		{340, 340, 340, 340, 8: 340, 340, 340, 340, 340, 340, 340, 340},
		{341, 341, 341, 341, 8: 341, 341, 341, 341, 341, 341, 341, 341},
		{5: 350, 350},
		// 525
		{2: 411, 432, 7: 427, 11: 717, 719, 16: 431, 416, 412, 413, 422, 423, 415, 417, 418, 435, 436, 425, 426, 419, 434, 433, 409, 410, 414, 430, 428, 429, 437, 421, 424, 407, 43: 420, 58: 450, 408, 106: 716, 112: 720, 146: 721, 150: 718, 164: 714, 168: 715, 202: 902},
		{348, 348},
		{2: 43, 43, 7: 43, 16: 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43: 43, 110: 706, 145: 904},
		{2: 411, 432, 7: 427, 16: 431, 416, 412, 413, 422, 423, 415, 417, 418, 435, 436, 425, 426, 419, 434, 433, 409, 410, 414, 430, 428, 429, 437, 421, 424, 407, 43: 420, 58: 406, 408, 130: 905},
		{5: 355, 355},
		// 530
		{5: 358, 358, 32: 394, 395, 399, 401, 124: 402, 391, 159: 403, 161: 381, 167: 382, 169: 396, 383, 384, 174: 397, 385, 398, 386, 387, 380, 181: 388, 185: 400, 389, 198: 390, 907, 203: 392, 404, 393},
		{5: 373, 373},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 285

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 2:
		{
			yyVAL.item = yyS[yypt-0].statement
		}
	case 51:
		{
			ß
		}
	case 90:
		{
			yyVAL.item = nil
		}
	case 93:
		{
			yyVAL.item = ast.IndexVisibilityVisible
		}
	case 94:
		{
			yyVAL.item = ast.IndexVisibilityInvisible
		}
	case 179:
		{
			yyVAL.item = model.CIStr{}
		}
	case 181:
		{
			yyVAL.item = model.NewCIStr(yyS[yypt-0].ident)
		}
	case 182:
		{
			yyVAL.item = model.NewCIStr(yyS[yypt-0].ident)
		}
	case 196:
		{
			yyVAL.item = [][]ast.ExprNode{yyS[yypt-0].item.([]ast.ExprNode)}
		}
	case 197:
		{
			yyVAL.item = append(yyS[yypt-2].item.([][]ast.ExprNode), yyS[yypt-0].item.([]ast.ExprNode))
		}
	case 198:
		{
			yyVAL.item = yyS[yypt-1].item
		}
	case 199:
		{
			yyVAL.item = []ast.ExprNode{}
		}
	case 204:
		{
			yyVAL.expr = &ast.DefaultExpr{}
		}
	case 205:
		{
			yyVAL.item = &ast.Assignment{
				Column: yyS[yypt-2].item.(*ast.ColumnName),
				Expr:   yyS[yypt-0].expr,
			}
		}
	case 206:
		{
			yyVAL.item = []*ast.Assignment{}
		}
	case 207:
		{
			yyVAL.item = []*ast.Assignment{yyS[yypt-0].item.(*ast.Assignment)}
		}
	case 208:
		{
			yyVAL.item = append(yyS[yypt-2].item.([]*ast.Assignment), yyS[yypt-0].item.(*ast.Assignment))
		}
	case 209:
		{
			yyVAL.item = nil
		}
	case 210:
		{
			yyVAL.item = yyS[yypt-0].item
		}
	case 211:
		{
			yyVAL.item = &ast.Assignment{Column: yyS[yypt-2].item.(*ast.ColumnName), Expr: yyS[yypt-0].expr}
		}
	case 212:
		{
			yyVAL.item = []*ast.Assignment{yyS[yypt-0].item.(*ast.Assignment)}
		}
	case 213:
		{
			yyVAL.item = append(yyS[yypt-2].item.([]*ast.Assignment), yyS[yypt-0].item.(*ast.Assignment))
		}
	case 214:
		{
			yyVAL.item = []*ast.Assignment{}
		}
	case 226:
		{
			yyVAL.ident = ""
		}
	case 241:
		{
			yyVAL.item = &ast.MatchClauseList{Matches: []*ast.MatchClause{yyS[yypt-0].item.(*ast.MatchClause)}}
		}
	case 242:
		{
			ml := yyS[yypt-2].item.(*ast.MatchClauseList)
			ml.Matches = append(ml.Matches, yyS[yypt-0].item.(*ast.MatchClause))
			yyVAL.item = ml
		}
	case 243:
		{
			yyVAL.item = &ast.MatchClause{
				Graph: yyS[yypt-1].item.(*ast.GraphName),
				Paths: yyS[yypt-2].item.([]*ast.PathPattern),
			}
		}
	case 244:
		{
			yyVAL.item = yyS[yypt-0].ident
		}
	case 245:
		{
			yyVAL.item = (*ast.GraphName)(nil)
		}
	case 248:
		{
			yyVAL.item = []*ast.PathPattern{yyS[yypt-0].item.(*ast.PathPattern)}
		}
	case 249:
		{
			yyVAL.item = yyS[yypt-1].item.([]*ast.PathPattern)
		}
	case 250:
		{
			yyVAL.item = yyS[yypt-0].item.(*ast.PathPattern)
		}
	case 251:
		{
			yyVAL.item = append(yyS[yypt-2].item.([]*ast.PathPattern), yyS[yypt-0].item.(*ast.PathPattern))
		}
	case 252:
		{
			pp := yyS[yypt-0].item.(*ast.PathPattern)
			pp.Tp = ast.PathPatternSimple
			yyVAL.item = pp
		}
	case 253:
		{
			pp := yyS[yypt-0].item.(*ast.PathPattern)
			pp.Tp = ast.PathPatternAny
			yyVAL.item = pp
		}
	case 254:
		{
			pp := yyS[yypt-0].item.(*ast.PathPattern)
			pp.Tp = ast.PathPatternAnyShortest
			yyVAL.item = pp
		}
	case 255:
		{
			pp := yyS[yypt-0].item.(*ast.PathPattern)
			pp.Tp = ast.PathPatternAllShortest
			yyVAL.item = pp
		}
	case 256:
		{
			pp := yyS[yypt-0].item.(*ast.PathPattern)
			pp.Tp = ast.PathPatternTopKShortest
			pp.TopK = yyS[yypt-2].item.(uint64)
			yyVAL.item = pp
		}
	case 257:
		{
			pp := yyS[yypt-0].item.(*ast.PathPattern)
			pp.Tp = ast.PathPatternAnyCheapest
			yyVAL.item = pp
		}
	case 258:
		{
			pp := yyS[yypt-0].item.(*ast.PathPattern)
			pp.Tp = ast.PathPatternAllCheapest
			yyVAL.item = pp
		}
	case 259:
		{
			pp := yyS[yypt-0].item.(*ast.PathPattern)
			pp.Tp = ast.PathPatternTopKCheapest
			pp.TopK = yyS[yypt-2].item.(uint64)
			yyVAL.item = pp
		}
	case 260:
		{
			pp := yyS[yypt-0].item.(*ast.PathPattern)
			pp.Tp = ast.PathPatternAll
			yyVAL.item = pp
		}
	case 261:
		{
			yyVAL.item = &ast.PathPattern{Vertices: []*ast.VertexPattern{yyS[yypt-0].item.(*ast.VertexPattern)}}
		}
	case 262:
		{
			pp := yyS[yypt-2].item.(*ast.PathPattern)
			pp.Vertices = append(pp.Vertices, yyS[yypt-0].item.(*ast.VertexPattern))
			pp.Connections = append(pp.Connections, yyS[yypt-1].item.(*ast.ReachabilityPathExpr))
			yyVAL.item = pp
		}
	case 263:
		{
			pp := yyS[yypt-2].item.(*ast.PathPattern)
			pp.Vertices = append(pp.Vertices, yyS[yypt-0].item.(*ast.VertexPattern))
			pp.Connections = append(pp.Connections, yyS[yypt-1].item.(*ast.EdgePattern))
			yyVAL.item = pp
		}
	case 264:
		{
			yyVAL.item = &ast.PathPattern{
				Vertices:    []*ast.VertexPattern{yyS[yypt-2].item.(*ast.VertexPattern), yyS[yypt-0].item.(*ast.VertexPattern)},
				Connections: []ast.VertexPairConnection{yyS[yypt-1].item.(*ast.QuantifiedPathExpr)},
			}
		}
	case 265:
		{
			yyVAL.item = &ast.ReachabilityPathExpr{
				Labels:     yyS[yypt-2].item.([]model.CIStr),
				Direction:  ast.EdgeDirectionOutgoing,
				Quantifier: yyS[yypt-1].item.(*ast.PatternQuantifier),
			}
		}
	case 266:
		{
			yyVAL.item = &ast.ReachabilityPathExpr{
				Labels:     yyS[yypt-2].item.([]model.CIStr),
				Direction:  ast.EdgeDirectionIncoming,
				Quantifier: yyS[yypt-1].item.(*ast.PatternQuantifier),
			}
		}
	case 267:
		{
			yyVAL.item = &ast.ReachabilityPathExpr{
				Labels:     yyS[yypt-2].item.([]model.CIStr),
				Direction:  ast.EdgeDirectionAnyDirected,
				Quantifier: yyS[yypt-1].item.(*ast.PatternQuantifier),
			}
		}
	case 268:
		{
			yyVAL.item = &ast.VertexPattern{Variable: yyS[yypt-1].item.(*ast.VariableSpec)}
		}
	case 269:
		{
			yyVAL.item = (*ast.VertexPattern)(nil)
		}
	case 271:
		{
			yyVAL.item = &ast.EdgePattern{
				Variable:  yyS[yypt-1].item.(*ast.VariableSpec),
				Direction: ast.EdgeDirectionOutgoing,
			}
		}
	case 272:
		{
			yyVAL.item = &ast.EdgePattern{Direction: ast.EdgeDirectionOutgoing}
		}
	case 273:
		{
			yyVAL.item = &ast.EdgePattern{
				Variable:  yyS[yypt-1].item.(*ast.VariableSpec),
				Direction: ast.EdgeDirectionIncoming,
			}
		}
	case 274:
		{
			yyVAL.item = &ast.EdgePattern{Direction: ast.EdgeDirectionIncoming}
		}
	case 275:
		{
			yyVAL.item = &ast.EdgePattern{
				Variable:  yyS[yypt-1].item.(*ast.VariableSpec),
				Direction: ast.EdgeDirectionAnyDirected,
			}
		}
	case 276:
		{
			yyVAL.item = &ast.EdgePattern{Direction: ast.EdgeDirectionAnyDirected}
		}
	case 277:
		{
			v := &ast.VariableSpec{
				Name:   yyS[yypt-1].item.(model.CIStr),
				Labels: yyS[yypt-0].item.([]model.CIStr),
			}
			if v.Name.L == "" {
				v.Anonymous = true
			}
			yyVAL.item = v
		}
	case 278:
		{
			yyVAL.item = model.CIStr{}
		}
	case 279:
		{
			yyVAL.item = model.NewCIStr(yyS[yypt-0].ident)
		}
	case 280:
		{
			yyVAL.item = yyS[yypt-0].item.([]model.CIStr)
		}
	case 281:
		{
			yyVAL.item = []model.CIStr(nil)
		}
	case 289:
		{
			yyVAL.item = []model.CIStr{yyS[yypt-0].ident.(model.CIStr)}
		}
	case 290:
		{
			yyVAL.item = append(yyS[yypt-2].item.([]model.CIStr), yyS[yypt-0].ident.(model.CIStr))
		}
	case 291:
		{
			yyVAL.item = &ast.QuantifiedPathExpr{
				Edge:       yyS[yypt-1].item.(*ast.EdgePattern),
				Quantifier: yyS[yypt-0].item.(*ast.PatternQuantifier),
			}
		}
	case 292:
		{
			q := &ast.QuantifiedPathExpr{
				Edge:        yyS[yypt-5].item.(*ast.EdgePattern),
				Quantifier:  yyS[yypt-0].item.(*ast.PatternQuantifier),
				Source:      yyS[yypt-6].item.(*ast.VertexPattern),
				Destination: yyS[yypt-4].item.(*ast.VertexPattern),
			}
			if yyS[yypt-3].item != nil {
				q.Where = yyS[yypt-3].item.(ast.ExprNode)
			}
			if yyS[yypt-2].item != nil {
				q.Cost = yyS[yypt-2].item.(ast.ExprNode)
			}
			yyVAL.item = q
		}
	case 293:
		{
			yyVAL.item = yyS[yypt-0].expr.(ast.ExprNode)
		}
	case 294:
		{
			yyVAL.item = nil
		}
	case 296:
		{
			yyVAL.item = &ast.PatternQuantifier{Tp: ast.PatternQuantifierZeroOrMore, M: 18446744073709551615}
		}
	case 297:
		{
			yyVAL.item = &ast.PatternQuantifier{Tp: ast.PatternQuantifierOneOrMore, N: 1, M: 18446744073709551615}
		}
	case 298:
		{
			yyVAL.item = &ast.PatternQuantifier{Tp: ast.PatternQuantifierOptional, N: 0, M: 1}
		}
	case 299:
		{
			yyVAL.item = &ast.PatternQuantifier{Tp: ast.PatternQuantifierExactlyN, N: yyS[yypt-1].item.(uint64), M: yyS[yypt-1].item.(uint64)}
		}
	case 300:
		{
			yyVAL.item = &ast.PatternQuantifier{Tp: ast.PatternQuantifierNOrMore, N: yyS[yypt-2].item.(uint64), M: 18446744073709551615}
		}
	case 301:
		{
			yyVAL.item = &ast.PatternQuantifier{Tp: ast.PatternQuantifierBetweenNAndM, N: yyS[yypt-3].item.(uint64), M: yyS[yypt-1].item.(uint64)}
		}
	case 302:
		{
			yyVAL.item = &ast.PatternQuantifier{Tp: ast.PatternQuantifierBetweenZeroAndM, N: 0, M: yyS[yypt-1].item.(uint64)}
		}
	case 303:
		{
			yyVAL.item = (*ast.PatternQuantifier)(nil)
		}
	case 305:
		{
			yyVAL.item = []*ast.PathPatternMacro{yyS[yypt-0].item.(*ast.PathPatternMacro)}
		}
	case 306:
		{
			yyVAL.item = append(yyS[yypt-1].item.([]*ast.PathPatternMacro), yyS[yypt-0].item.(*ast.PathPatternMacro))
		}
	case 307:
		{
			p := &ast.PathPatternMacro{
				Name: model.NewCIStr(yyS[yypt-3].ident),
				Path: yyS[yypt-1].item.(*ast.PathPattern),
			}
			if yyS[yypt-0].item != nil {
				p.Where = yyS[yypt-0].item.(ast.ExprNode)
			}
			yyVAL.item = p
		}
	case 316:
		{
			yyVAL.item = false
		}
	case 317:
		{
			yyVAL.item = true
		}
	case 318:
		{
			yyVAL.item = nil
		}
	case 331:
		{
			yyVAL.item = false
		}
	case 332:
		{
			yyVAL.item = true
		}
	case 333:
		{
			yyVAL.item = false
		}
	case 334:
		{
			yyVAL.item = true
		}
	case 343:
		{
			yyVAL.ident = model.NewCIStr(yyS[yypt-0].ident)
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}

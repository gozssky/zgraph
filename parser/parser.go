// Code generated by goyacc - DO NOT EDIT.


// Copyright 2013 The ql Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSES/QL-LICENSE file.

// Copyright 2022 zGraph Authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Initial yacc source generated by ebnf2y[1]
// at 2013-10-04 23:10:47.861401015 +0200 CEST
//
//  $ ebnf2y -o ql.y -oe ql.ebnf -start StatementList -pkg ql -p _
//
//   [1]: http://github.com/cznic/ebnf2y

// The parser implements the PGQL specification
//
// - https://pgql-lang.org/spec/1.5/
//

package parser

import __yyfmt__ "fmt"


import (
	"strings"

	"github.com/vescale/zgraph/parser/ast"
)


type yySymType struct {
	yys    int
	offset int // offset
	item interface{}
	ident string
	expr ast.ExprNode
	statement ast.StmtNode
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault             = 57498
	yyEofCode             = 57344
	abs                   = 57456
	all                   = 57417
	allProp               = 57487
	and                   = 57395
	andand                = 57351
	andnot                = 57465
	any                   = 57418
	array_agg             = 57431
	as                    = 57353
	asc                   = 57354
	assignmentEq          = 57466
	avg                   = 57432
	bLeftArrow            = 57483
	bRightArrow           = 57484
	begin                 = 57404
	between               = 57396
	bigIntType            = 57355
	booleanType           = 57406
	bracketDash           = 57482
	by                    = 57356
	case                  = 57399
	cast                  = 57442
	ceil                  = 57457
	ceiling               = 57458
	cheapest              = 57420
	commit                = 57405
	cost                  = 57422
	count                 = 57433
	create                = 57357
	dashBracket           = 57481
	dashSlash             = 57479
	dateType              = 57409
	day                   = 57410
	decLit                = 57463
	defaultKwd            = 57358
	deleteKwd             = 57359
	desc                  = 57360
	distinct              = 57438
	div                   = 57494
	doubleAtIdentifier    = 57349
	doubleType            = 57361
	drop                  = 57362
	edge                  = 57363
	element_number        = 57459
	else                  = 57403
	empty                 = 57488
	end                   = 57400
	eq                    = 57467
	yyErrCode             = 57345
	exists                = 57364
	explain               = 57407
	extract               = 57439
	falseKwd              = 57365
	floatType             = 57366
	floor                 = 57460
	for                   = 57430
	from                  = 57367
	ge                    = 57468
	graph                 = 57416
	group                 = 57368
	has_label             = 57461
	having                = 57369
	higherThanComma       = 57497
	higherThanParenthese  = 57490
	hour                  = 57425
	id                    = 57462
	identifier            = 57346
	ifKwd                 = 57370
	in                    = 57447
	in_degree             = 57451
	index                 = 57371
	insert                = 57372
	intLit                = 57464
	intType               = 57375
	integerType           = 57373
	interval              = 57424
	into                  = 57374
	invalid               = 57350
	is                    = 57376
	java_regexp_like      = 57452
	jss                   = 57470
	juss                  = 57471
	label                 = 57453
	labels                = 57397
	le                    = 57469
	leftArrow             = 57478
	like                  = 57493
	limit                 = 57377
	listagg               = 57434
	long                  = 57443
	lower                 = 57449
	lowerThanEq           = 57492
	lowerThanOn           = 57491
	lsh                   = 57472
	match                 = 57378
	match_number          = 57454
	max                   = 57435
	min                   = 57436
	minute                = 57426
	mod                   = 57495
	month                 = 57427
	neg                   = 57496
	neq                   = 57473
	neqSynonym            = 57474
	not                   = 57379
	null                  = 57380
	nulleq                = 57475
	offset                = 57414
	on                    = 57381
	or                    = 57394
	order                 = 57382
	out_degree            = 57455
	paramMarker           = 57476
	path                  = 57423
	pipes                 = 57352
	pipesAsOr             = 57415
	precisionType         = 57383
	prefix                = 57448
	primary               = 57384
	properties            = 57398
	rollback              = 57413
	rsh                   = 57477
	sLeftArrow            = 57485
	sRightArrow           = 57486
	second                = 57428
	selectKwd             = 57385
	set                   = 57386
	shortest              = 57419
	singleAtIdentifier    = 57348
	slashDash             = 57480
	string                = 57444
	stringLit             = 57347
	stringLiteral         = 57489
	substring             = 57429
	sum                   = 57437
	then                  = 57401
	timeType              = 57412
	timestampType         = 57411
	timezone_hour         = 57440
	timezone_minute       = 57441
	top                   = 57421
	trueKwd               = 57387
	unique                = 57388
	update                = 57389
	uppper                = 57450
	use                   = 57390
	vertex                = 57391
	when                  = 57402
	where                 = 57392
	with                  = 57445
	xor                   = 57393
	yearType              = 57408
	zone                  = 57446

	yyMaxDepth = 200
	yyTabOfs   = -327
)

var (

	yyPrec = map[int]int{
		empty: 0,
		stringLiteral: 1,
		insert: 2,
		'(': 3,
		')': 4,
		higherThanParenthese: 5,
		lowerThanOn: 6,
		on: 7,
		assignmentEq: 8,
		pipes: 9,
		or: 9,
		pipesAsOr: 9,
		xor: 10,
		andand: 11,
		and: 11,
		between: 12,
		lowerThanEq: 13,
		eq: 14,
		ge: 14,
		le: 14,
		neq: 14,
		neqSynonym: 14,
		'>': 14,
		'<': 14,
		is: 14,
		like: 14,
		in: 14,
		'|': 15,
		'&': 16,
		rsh: 17,
		lsh: 17,
		'-': 18,
		'+': 18,
		'*': 19,
		'/': 19,
		'%': 19,
		div: 19,
		mod: 19,
		'^': 20,
		'~': 21,
		neg: 21,
		not: 22,
		',': 23,
		higherThanComma: 24,
		}

	yyXLAT = map[int]int{
		    41:   0, // ')' (220x)
		 57344:   1, // $end (210x)
		    59:   2, // ';' (209x)
		 57346:   3, // identifier (195x)
		    44:   4, // ',' (189x)
		    45:   5, // '-' (189x)
		 57379:   6, // not (182x)
		 57347:   7, // stringLit (162x)
		 57377:   8, // limit (155x)
		 57382:   9, // order (150x)
		 57369:  10, // having (145x)
		 57367:  11, // from (143x)
		    42:  12, // '*' (136x)
		    40:  13, // '(' (135x)
		    43:  14, // '+' (134x)
		 57376:  15, // is (128x)
		 57368:  16, // group (127x)
		 57395:  17, // and (122x)
		 57447:  18, // in (121x)
		    37:  19, // '%' (120x)
		    47:  20, // '/' (120x)
		    60:  21, // '<' (120x)
		    62:  22, // '>' (120x)
		 57351:  23, // andand (120x)
		 57467:  24, // eq (120x)
		 57468:  25, // ge (120x)
		 57469:  26, // le (120x)
		 57474:  27, // neqSynonym (120x)
		 57394:  28, // or (120x)
		 57352:  29, // pipes (120x)
		 57415:  30, // pipesAsOr (120x)
		 57385:  31, // selectKwd (120x)
		 57393:  32, // xor (120x)
		 57423:  33, // path (118x)
		 57359:  34, // deleteKwd (116x)
		 57372:  35, // insert (116x)
		 57389:  36, // update (116x)
		 57422:  37, // cost (105x)
		 57354:  38, // asc (101x)
		 57360:  39, // desc (101x)
		 57400:  40, // end (101x)
		 57402:  41, // when (100x)
		 57403:  42, // else (98x)
		 57353:  43, // as (97x)
		 57430:  44, // for (95x)
		 57401:  45, // then (94x)
		 57552:  46, // Identifier (80x)
		 57464:  47, // intLit (67x)
		 57397:  48, // labels (66x)
		 57412:  49, // timeType (63x)
		    63:  50, // '?' (62x)
		 57364:  51, // exists (62x)
		 57409:  52, // dateType (61x)
		 57411:  53, // timestampType (61x)
		 57456:  54, // abs (60x)
		 57431:  55, // array_agg (60x)
		 57432:  56, // avg (60x)
		 57399:  57, // case (60x)
		 57442:  58, // cast (60x)
		 57457:  59, // ceil (60x)
		 57458:  60, // ceiling (60x)
		 57433:  61, // count (60x)
		 57463:  62, // decLit (60x)
		 57459:  63, // element_number (60x)
		 57439:  64, // extract (60x)
		 57365:  65, // falseKwd (60x)
		 57460:  66, // floor (60x)
		 57461:  67, // has_label (60x)
		 57462:  68, // id (60x)
		 57451:  69, // in_degree (60x)
		 57424:  70, // interval (60x)
		 57452:  71, // java_regexp_like (60x)
		 57453:  72, // label (60x)
		 57434:  73, // listagg (60x)
		 57449:  74, // lower (60x)
		 57454:  75, // match_number (60x)
		 57435:  76, // max (60x)
		 57436:  77, // min (60x)
		 57455:  78, // out_degree (60x)
		 57429:  79, // substring (60x)
		 57437:  80, // sum (60x)
		 57387:  81, // trueKwd (60x)
		 57450:  82, // uppper (60x)
		 57627:  83, // VariableName (54x)
		 57629:  84, // VariableReference (54x)
		 57595:  85, // PropertyAccess (50x)
		 57505:  86, // BindVariable (49x)
		 57616:  87, // StringLiteral (49x)
		 57617:  88, // SubSelect (48x)
		 57499:  89, // Aggregation (47x)
		 57502:  90, // ArithmeticExpression (47x)
		 57506:  91, // BooleanLiteral (47x)
		 57507:  92, // BracketedValueExpression (47x)
		 57510:  93, // CaseExpression (47x)
		 57511:  94, // CastSpecification (47x)
		 57512:  95, // CharacterSubstring (47x)
		 57520:  96, // DateLiteral (47x)
		 57530:  97, // ExistsPredicate (47x)
		 57534:  98, // ExtractFunction (47x)
		 57540:  99, // FunctionInvocation (47x)
		 57541: 100, // FunctionName (47x)
		 57555: 101, // InPredicate (47x)
		 57560: 102, // IntervalLiteral (47x)
		 57563: 103, // IsNotNullPredicate (47x)
		 57564: 104, // IsNullPredicate (47x)
		 57578: 105, // Literal (47x)
		 57579: 106, // LogicalExpression (47x)
		 57582: 107, // NotInPredicate (47x)
		 57583: 108, // NumericLiteral (47x)
		 57602: 109, // RelationalExpression (47x)
		 57605: 110, // ScalarSubquery (47x)
		 57606: 111, // SearchedCase (47x)
		 57610: 112, // SimpleCase (47x)
		 57615: 113, // StringConcat (47x)
		 57620: 114, // TimeLiteral (47x)
		 57621: 115, // TimestampLiteral (47x)
		 57624: 116, // ValueExpression (47x)
		 57638: 117, // logAnd (43x)
		 57639: 118, // logOr (43x)
		 57392: 119, // where (40x)
		 57381: 120, // on (22x)
		 57476: 121, // paramMarker (18x)
		 57480: 122, // slashDash (17x)
		 57632: 123, // VertexPattern (17x)
		   123: 124, // '{' (15x)
		 57486: 125, // sRightArrow (15x)
		 57482: 126, // bracketDash (13x)
		 57484: 127, // bRightArrow (11x)
		    58: 128, // ':' (9x)
		 57483: 129, // bLeftArrow (9x)
		 57481: 130, // dashBracket (9x)
		 57363: 131, // edge (9x)
		 57470: 132, // jss (9x)
		 57478: 133, // leftArrow (9x)
		 57398: 134, // properties (9x)
		 57391: 135, // vertex (9x)
		 57438: 136, // distinct (8x)
		 57523: 137, // DistinctOpt (8x)
		 57546: 138, // GraphName (8x)
		 57626: 139, // VariableLengthPathPattern (8x)
		    46: 140, // '.' (7x)
		 57574: 141, // LengthNum (7x)
		 57588: 142, // PathPatternMacro (6x)
		 57628: 143, // VariableNameOpt (6x)
		 57637: 144, // WhereClauseOpt (6x)
		    61: 145, // '=' (5x)
		   124: 146, // '|' (5x)
		   125: 147, // '}' (5x)
		 57479: 148, // dashSlash (5x)
		 57531: 149, // ExpAsVar (5x)
		 57589: 150, // PathPatternMacroList (5x)
		 57590: 151, // PathPatternMacroOpt (5x)
		 57609: 152, // SelectStmt (5x)
		 57485: 153, // sLeftArrow (5x)
		 57417: 154, // all (4x)
		 57418: 155, // any (4x)
		 57396: 156, // between (4x)
		 57420: 157, // cheapest (4x)
		 57539: 158, // FromClause (4x)
		 57550: 159, // GroupByClauseOpt (4x)
		 57551: 160, // HavingClauseOpt (4x)
		 57370: 161, // ifKwd (4x)
		 57371: 162, // index (4x)
		 57575: 163, // LimitClauseOpt (4x)
		 57414: 164, // offset (4x)
		 57585: 165, // OrderByClauseOpt (4x)
		 57586: 166, // PathPattern (4x)
		 57591: 167, // PatternQuantifier (4x)
		 57592: 168, // PatternQuantifierOpt (4x)
		 57386: 169, // set (4x)
		 57419: 170, // shortest (4x)
		 57611: 171, // SimplePathPattern (4x)
		 57421: 172, // top (4x)
		 57631: 173, // VariableSpec (4x)
		 57636: 174, // WhenClause (4x)
		 57508: 175, // ByItem (3x)
		 57513: 176, // ColonOrIsKeyword (3x)
		 57526: 177, // EdgePattern (3x)
		 57542: 178, // GraphElementInsertion (3x)
		 57569: 179, // LabelPredicate (3x)
		 57576: 180, // LimitOption (3x)
		 57596: 181, // PropertyAssignment (3x)
		 57598: 182, // PropertyName (3x)
		 57487: 183, // allProp (2x)
		 57404: 184, // begin (2x)
		 57504: 185, // BeginStmt (2x)
		 57356: 186, // by (2x)
		 57509: 187, // ByList (2x)
		 57405: 188, // commit (2x)
		 57514: 189, // CommitStmt (2x)
		 57357: 190, // create (2x)
		 57517: 191, // CreateGraphStmt (2x)
		 57518: 192, // CreateIndexStmt (2x)
		 57410: 193, // day (2x)
		 57522: 194, // DeleteStmt (2x)
		 57362: 195, // drop (2x)
		 57524: 196, // DropGraphStmt (2x)
		 57525: 197, // DropIndexStmt (2x)
		 57527: 198, // ElseClauseOpt (2x)
		 57528: 199, // EmptyStmt (2x)
		 57407: 200, // explain (2x)
		 57532: 201, // ExplainStmt (2x)
		 57535: 202, // Field (2x)
		 57416: 203, // graph (2x)
		 57543: 204, // GraphElementInsertionList (2x)
		 57544: 205, // GraphElementUpdate (2x)
		 57425: 206, // hour (2x)
		 57553: 207, // IfExists (2x)
		 57554: 208, // IfNotExists (2x)
		 57559: 209, // InsertStmt (2x)
		 57374: 210, // into (2x)
		 57561: 211, // IntoClause (2x)
		 57562: 212, // IntoClauseOpt (2x)
		 57556: 213, // InValueList (2x)
		 57567: 214, // LabelName (2x)
		 57573: 215, // LabelsAndProperties (2x)
		 57571: 216, // LabelSpecification (2x)
		 57572: 217, // LabelSpecificationOpt (2x)
		 57378: 218, // match (2x)
		 57580: 219, // MatchClause (2x)
		 57426: 220, // minute (2x)
		 57427: 221, // month (2x)
		 57380: 222, // null (2x)
		 57597: 223, // PropertyAssignmentList (2x)
		 57413: 224, // rollback (2x)
		 57603: 225, // RollbackStmt (2x)
		 57428: 226, // second (2x)
		 57607: 227, // SelectClause (2x)
		 57613: 228, // Statement (2x)
		 57622: 229, // UpdateStmt (2x)
		 57390: 230, // use (2x)
		 57623: 231, // UseStmt (2x)
		 57633: 232, // VertexPatternOpt (2x)
		 57634: 233, // VertexReference (2x)
		 57635: 234, // WhenCaluseList (2x)
		 57445: 235, // with (2x)
		 57408: 236, // yearType (2x)
		 57446: 237, // zone (2x)
		 57500: 238, // AllPropertiesPrefixOpt (1x)
		 57501: 239, // ArgumentList (1x)
		 57406: 240, // booleanType (1x)
		 57515: 241, // CostClause (1x)
		 57516: 242, // CostClauseOpt (1x)
		 57519: 243, // DataType (1x)
		 57521: 244, // DateTimeField (1x)
		 57361: 245, // doubleType (1x)
		 57529: 246, // Entry (1x)
		 57533: 247, // ExtractField (1x)
		 57536: 248, // FieldAsName (1x)
		 57537: 249, // FieldAsNameOpt (1x)
		 57366: 250, // floatType (1x)
		 57538: 251, // ForStringLengthOpt (1x)
		 57545: 252, // GraphElementUpdateList (1x)
		 57547: 253, // GraphOnClause (1x)
		 57548: 254, // GraphOnClauseOpt (1x)
		 57549: 255, // GraphPattern (1x)
		 57557: 256, // IndexKeyTypeOpt (1x)
		 57373: 257, // integerType (1x)
		 57375: 258, // intType (1x)
		 57566: 259, // LabelList (1x)
		 57568: 260, // LabelNameList (1x)
		 57570: 261, // LabelPredicateOpt (1x)
		 57577: 262, // ListaggSeparatorOpt (1x)
		 57443: 263, // long (1x)
		 57581: 264, // MatchClauseList (1x)
		 57584: 265, // Order (1x)
		 57587: 266, // PathPatternList (1x)
		 57448: 267, // prefix (1x)
		 57593: 268, // PropertiesSpecification (1x)
		 57594: 269, // PropertiesSpecificationOpt (1x)
		 57599: 270, // PropertyNameList (1x)
		 57600: 271, // QuantifiedPathExpr (1x)
		 57601: 272, // ReachabilityPathExpr (1x)
		 57604: 273, // RowsPerMatchOpt (1x)
		 57608: 274, // SelectElementList (1x)
		 57612: 275, // StartPosition (1x)
		 57614: 276, // StatementList (1x)
		 57444: 277, // string (1x)
		 57440: 278, // timezone_hour (1x)
		 57441: 279, // timezone_minute (1x)
		 57388: 280, // unique (1x)
		 57625: 281, // ValueExpressionList (1x)
		 57630: 282, // VariableReferenceList (1x)
		 57498: 283, // $default (0x)
		    38: 284, // '&' (0x)
		    94: 285, // '^' (0x)
		   126: 286, // '~' (0x)
		 57465: 287, // andnot (0x)
		 57503: 288, // Assignment (0x)
		 57466: 289, // assignmentEq (0x)
		 57355: 290, // bigIntType (0x)
		 57358: 291, // defaultKwd (0x)
		 57494: 292, // div (0x)
		 57349: 293, // doubleAtIdentifier (0x)
		 57488: 294, // empty (0x)
		 57345: 295, // error (0x)
		 57497: 296, // higherThanComma (0x)
		 57490: 297, // higherThanParenthese (0x)
		 57558: 298, // IndexName (0x)
		 57350: 299, // invalid (0x)
		 57471: 300, // juss (0x)
		 57565: 301, // Label (0x)
		 57493: 302, // like (0x)
		 57492: 303, // lowerThanEq (0x)
		 57491: 304, // lowerThanOn (0x)
		 57472: 305, // lsh (0x)
		 57495: 306, // mod (0x)
		 57496: 307, // neg (0x)
		 57473: 308, // neq (0x)
		 57475: 309, // nulleq (0x)
		 57383: 310, // precisionType (0x)
		 57384: 311, // primary (0x)
		 57477: 312, // rsh (0x)
		 57348: 313, // singleAtIdentifier (0x)
		 57489: 314, // stringLiteral (0x)
		 57618: 315, // TableAsName (0x)
		 57619: 316, // TableAsNameOpt (0x)
	}

	yySymNames = []string{
		"')'",
		"$end",
		"';'",
		"identifier",
		"','",
		"'-'",
		"not",
		"stringLit",
		"limit",
		"order",
		"having",
		"from",
		"'*'",
		"'('",
		"'+'",
		"is",
		"group",
		"and",
		"in",
		"'%'",
		"'/'",
		"'<'",
		"'>'",
		"andand",
		"eq",
		"ge",
		"le",
		"neqSynonym",
		"or",
		"pipes",
		"pipesAsOr",
		"selectKwd",
		"xor",
		"path",
		"deleteKwd",
		"insert",
		"update",
		"cost",
		"asc",
		"desc",
		"end",
		"when",
		"else",
		"as",
		"for",
		"then",
		"Identifier",
		"intLit",
		"labels",
		"timeType",
		"'?'",
		"exists",
		"dateType",
		"timestampType",
		"abs",
		"array_agg",
		"avg",
		"case",
		"cast",
		"ceil",
		"ceiling",
		"count",
		"decLit",
		"element_number",
		"extract",
		"falseKwd",
		"floor",
		"has_label",
		"id",
		"in_degree",
		"interval",
		"java_regexp_like",
		"label",
		"listagg",
		"lower",
		"match_number",
		"max",
		"min",
		"out_degree",
		"substring",
		"sum",
		"trueKwd",
		"uppper",
		"VariableName",
		"VariableReference",
		"PropertyAccess",
		"BindVariable",
		"StringLiteral",
		"SubSelect",
		"Aggregation",
		"ArithmeticExpression",
		"BooleanLiteral",
		"BracketedValueExpression",
		"CaseExpression",
		"CastSpecification",
		"CharacterSubstring",
		"DateLiteral",
		"ExistsPredicate",
		"ExtractFunction",
		"FunctionInvocation",
		"FunctionName",
		"InPredicate",
		"IntervalLiteral",
		"IsNotNullPredicate",
		"IsNullPredicate",
		"Literal",
		"LogicalExpression",
		"NotInPredicate",
		"NumericLiteral",
		"RelationalExpression",
		"ScalarSubquery",
		"SearchedCase",
		"SimpleCase",
		"StringConcat",
		"TimeLiteral",
		"TimestampLiteral",
		"ValueExpression",
		"logAnd",
		"logOr",
		"where",
		"on",
		"paramMarker",
		"slashDash",
		"VertexPattern",
		"'{'",
		"sRightArrow",
		"bracketDash",
		"bRightArrow",
		"':'",
		"bLeftArrow",
		"dashBracket",
		"edge",
		"jss",
		"leftArrow",
		"properties",
		"vertex",
		"distinct",
		"DistinctOpt",
		"GraphName",
		"VariableLengthPathPattern",
		"'.'",
		"LengthNum",
		"PathPatternMacro",
		"VariableNameOpt",
		"WhereClauseOpt",
		"'='",
		"'|'",
		"'}'",
		"dashSlash",
		"ExpAsVar",
		"PathPatternMacroList",
		"PathPatternMacroOpt",
		"SelectStmt",
		"sLeftArrow",
		"all",
		"any",
		"between",
		"cheapest",
		"FromClause",
		"GroupByClauseOpt",
		"HavingClauseOpt",
		"ifKwd",
		"index",
		"LimitClauseOpt",
		"offset",
		"OrderByClauseOpt",
		"PathPattern",
		"PatternQuantifier",
		"PatternQuantifierOpt",
		"set",
		"shortest",
		"SimplePathPattern",
		"top",
		"VariableSpec",
		"WhenClause",
		"ByItem",
		"ColonOrIsKeyword",
		"EdgePattern",
		"GraphElementInsertion",
		"LabelPredicate",
		"LimitOption",
		"PropertyAssignment",
		"PropertyName",
		"allProp",
		"begin",
		"BeginStmt",
		"by",
		"ByList",
		"commit",
		"CommitStmt",
		"create",
		"CreateGraphStmt",
		"CreateIndexStmt",
		"day",
		"DeleteStmt",
		"drop",
		"DropGraphStmt",
		"DropIndexStmt",
		"ElseClauseOpt",
		"EmptyStmt",
		"explain",
		"ExplainStmt",
		"Field",
		"graph",
		"GraphElementInsertionList",
		"GraphElementUpdate",
		"hour",
		"IfExists",
		"IfNotExists",
		"InsertStmt",
		"into",
		"IntoClause",
		"IntoClauseOpt",
		"InValueList",
		"LabelName",
		"LabelsAndProperties",
		"LabelSpecification",
		"LabelSpecificationOpt",
		"match",
		"MatchClause",
		"minute",
		"month",
		"null",
		"PropertyAssignmentList",
		"rollback",
		"RollbackStmt",
		"second",
		"SelectClause",
		"Statement",
		"UpdateStmt",
		"use",
		"UseStmt",
		"VertexPatternOpt",
		"VertexReference",
		"WhenCaluseList",
		"with",
		"yearType",
		"zone",
		"AllPropertiesPrefixOpt",
		"ArgumentList",
		"booleanType",
		"CostClause",
		"CostClauseOpt",
		"DataType",
		"DateTimeField",
		"doubleType",
		"Entry",
		"ExtractField",
		"FieldAsName",
		"FieldAsNameOpt",
		"floatType",
		"ForStringLengthOpt",
		"GraphElementUpdateList",
		"GraphOnClause",
		"GraphOnClauseOpt",
		"GraphPattern",
		"IndexKeyTypeOpt",
		"integerType",
		"intType",
		"LabelList",
		"LabelNameList",
		"LabelPredicateOpt",
		"ListaggSeparatorOpt",
		"long",
		"MatchClauseList",
		"Order",
		"PathPatternList",
		"prefix",
		"PropertiesSpecification",
		"PropertiesSpecificationOpt",
		"PropertyNameList",
		"QuantifiedPathExpr",
		"ReachabilityPathExpr",
		"RowsPerMatchOpt",
		"SelectElementList",
		"StartPosition",
		"StatementList",
		"string",
		"timezone_hour",
		"timezone_minute",
		"unique",
		"ValueExpressionList",
		"VariableReferenceList",
		"$default",
		"'&'",
		"'^'",
		"'~'",
		"andnot",
		"Assignment",
		"assignmentEq",
		"bigIntType",
		"defaultKwd",
		"div",
		"doubleAtIdentifier",
		"empty",
		"error",
		"higherThanComma",
		"higherThanParenthese",
		"IndexName",
		"invalid",
		"juss",
		"Label",
		"like",
		"lowerThanEq",
		"lowerThanOn",
		"lsh",
		"mod",
		"neg",
		"neq",
		"nulleq",
		"precisionType",
		"primary",
		"rsh",
		"singleAtIdentifier",
		"stringLiteral",
		"TableAsName",
		"TableAsNameOpt",
	}

	yyTokenLiteralStrings = map[int]string{
		57346: "identifier",
		57379: "NOT",
		57347: "string literal",
		57377: "LIMIT",
		57382: "ORDER",
		57369: "HAVING",
		57367: "FROM",
		57376: "IS",
		57368: "GROUP",
		57395: "AND",
		57447: "IN",
		57351: "&&",
		57467: "=",
		57468: ">=",
		57469: "<=",
		57474: "<>",
		57394: "OR",
		57352: "||",
		57385: "SELECT",
		57393: "XOR",
		57423: "PATH",
		57359: "DELETE",
		57372: "INSERT",
		57389: "UPDATE",
		57422: "COST",
		57354: "ASC",
		57360: "DESC",
		57400: "END",
		57402: "WHEN",
		57403: "ELSE",
		57353: "AS",
		57430: "FOR",
		57401: "THEN",
		57464: "integer literal",
		57397: "LABELS",
		57412: "TIME",
		57364: "EXISTS",
		57409: "DATE",
		57411: "TIMESTAMP",
		57456: "ABS",
		57431: "ARRAY_AGG",
		57432: "AVG",
		57399: "CASE",
		57442: "CAST",
		57457: "CEIL",
		57458: "CEILING",
		57433: "COUNT",
		57463: "decimal literal",
		57459: "ELEMENT_NUMBER",
		57439: "EXTRACT",
		57365: "FALSE",
		57460: "FLOOR",
		57461: "HAS_LABEL",
		57462: "ID",
		57451: "IN_DEGREE",
		57424: "INTERVAL",
		57452: "JAVA_REGEXP_LIKE",
		57453: "LABEL",
		57434: "LISTAGG",
		57449: "LOWER",
		57454: "MATCH_NUMBER",
		57435: "MAX",
		57436: "MIN",
		57455: "OUT_DEGREE",
		57429: "SUBSTRING",
		57437: "SUM",
		57387: "TRUE",
		57450: "UPPER",
		57392: "WHERE",
		57381: "ON",
		57476: "?",
		57480: "/-",
		57486: "/->",
		57482: "]-",
		57484: "]->",
		57483: "<-[",
		57481: "-[",
		57363: "EDGE",
		57470: "->",
		57478: "<-",
		57398: "PROPERTIES",
		57391: "VERTEX",
		57438: "DISTINCT",
		57479: "-/",
		57485: "<-/",
		57417: "ALL",
		57418: "ANY",
		57396: "BETWEEN",
		57420: "CHEAPEST",
		57370: "IF",
		57371: "INDEX",
		57414: "OFFSET",
		57386: "SET",
		57419: "SHORTEST",
		57421: "TOP",
		57487: ".*",
		57404: "BEGIN",
		57356: "BY",
		57405: "COMMIT",
		57357: "CREATE",
		57410: "DAY",
		57362: "DROP",
		57407: "EXPLAIN",
		57416: "GRAPH",
		57425: "HOUR",
		57374: "INTO",
		57378: "MATCH",
		57426: "MINUTE",
		57427: "MONTH",
		57380: "NULL",
		57413: "ROLLBACK",
		57428: "SECOND",
		57390: "USE",
		57445: "WITH",
		57408: "YEAR",
		57446: "ZONE",
		57406: "BOOLEAN",
		57361: "DOUBLE",
		57366: "FLOAT",
		57373: "INTEGER",
		57375: "INT",
		57443: "LONG",
		57448: "PREFIX",
		57444: "STRING",
		57440: "TIMEZONE_HOUR",
		57441: "TIMEZONE_MINUTE",
		57388: "UNIQUE",
		57465: "&^",
		57466: ":=",
		57355: "BIGINT",
		57358: "DEFAULT",
		57349: "identifier with double leading at",
		57350: "a special token never used by parser, used by lexer to indicate error",
		57471: "->>",
		57472: "<<",
		57473: "!=",
		57475: "<=>",
		57383: "PRECISION",
		57384: "PRIMARY",
		57477: ">>",
		57348: "identifier with single leading at",
	}

	yyReductions = map[int]struct{xsym, components int}{
		0: {0, 1},
		1: {246, 1},
		2: {276, 1},
		3: {276, 3},
		4: {228, 1},
		5: {228, 1},
		6: {228, 1},
		7: {228, 1},
		8: {228, 1},
		9: {228, 1},
		10: {228, 1},
		11: {228, 1},
		12: {228, 1},
		13: {228, 1},
		14: {228, 1},
		15: {228, 1},
		16: {228, 1},
		17: {228, 1},
		18: {199, 0},
		19: {185, 1},
		20: {189, 1},
		21: {191, 4},
		22: {192, 10},
		23: {256, 0},
		24: {256, 1},
		25: {194, 9},
		26: {282, 1},
		27: {282, 3},
		28: {316, 0},
		29: {316, 1},
		30: {315, 1},
		31: {315, 2},
		32: {196, 4},
		33: {197, 6},
		34: {201, 2},
		35: {209, 3},
		36: {209, 10},
		37: {212, 0},
		38: {212, 1},
		39: {211, 2},
		40: {204, 1},
		41: {204, 3},
		42: {178, 3},
		43: {178, 7},
		44: {233, 1},
		45: {215, 2},
		46: {217, 0},
		47: {217, 1},
		48: {216, 4},
		49: {269, 0},
		50: {269, 1},
		51: {268, 4},
		52: {223, 1},
		53: {223, 3},
		54: {181, 3},
		55: {85, 3},
		56: {116, 1},
		57: {116, 1},
		58: {116, 1},
		59: {116, 1},
		60: {116, 1},
		61: {116, 1},
		62: {116, 1},
		63: {116, 1},
		64: {116, 1},
		65: {116, 1},
		66: {116, 1},
		67: {116, 1},
		68: {116, 1},
		69: {116, 1},
		70: {116, 1},
		71: {116, 1},
		72: {116, 1},
		73: {116, 1},
		74: {116, 1},
		75: {116, 1},
		76: {116, 1},
		77: {84, 1},
		78: {105, 1},
		79: {105, 1},
		80: {105, 1},
		81: {105, 1},
		82: {105, 1},
		83: {105, 1},
		84: {105, 1},
		85: {87, 1},
		86: {108, 1},
		87: {108, 1},
		88: {91, 1},
		89: {91, 1},
		90: {96, 2},
		91: {114, 2},
		92: {115, 2},
		93: {102, 3},
		94: {244, 1},
		95: {244, 1},
		96: {244, 1},
		97: {244, 1},
		98: {244, 1},
		99: {244, 1},
		100: {86, 1},
		101: {90, 2},
		102: {90, 3},
		103: {90, 3},
		104: {90, 3},
		105: {90, 3},
		106: {90, 3},
		107: {109, 3},
		108: {109, 3},
		109: {109, 3},
		110: {109, 3},
		111: {109, 3},
		112: {109, 3},
		113: {106, 3},
		114: {106, 3},
		115: {106, 3},
		116: {106, 2},
		117: {118, 1},
		118: {118, 1},
		119: {117, 1},
		120: {117, 1},
		121: {288, 3},
		122: {113, 3},
		123: {92, 3},
		124: {99, 4},
		125: {100, 1},
		126: {100, 1},
		127: {100, 1},
		128: {100, 1},
		129: {100, 1},
		130: {100, 1},
		131: {100, 1},
		132: {100, 1},
		133: {100, 1},
		134: {100, 1},
		135: {100, 1},
		136: {100, 1},
		137: {100, 1},
		138: {100, 1},
		139: {100, 1},
		140: {239, 1},
		141: {239, 3},
		142: {95, 7},
		143: {275, 1},
		144: {251, 0},
		145: {251, 2},
		146: {89, 4},
		147: {89, 5},
		148: {89, 5},
		149: {89, 5},
		150: {89, 5},
		151: {89, 5},
		152: {89, 5},
		153: {89, 6},
		154: {137, 0},
		155: {137, 1},
		156: {262, 0},
		157: {262, 2},
		158: {98, 6},
		159: {247, 1},
		160: {247, 1},
		161: {247, 1},
		162: {247, 1},
		163: {247, 1},
		164: {247, 1},
		165: {247, 1},
		166: {247, 1},
		167: {104, 3},
		168: {103, 4},
		169: {94, 6},
		170: {243, 1},
		171: {243, 1},
		172: {243, 1},
		173: {243, 1},
		174: {243, 1},
		175: {243, 1},
		176: {243, 1},
		177: {243, 1},
		178: {243, 1},
		179: {243, 4},
		180: {243, 1},
		181: {243, 4},
		182: {93, 1},
		183: {93, 1},
		184: {112, 5},
		185: {111, 4},
		186: {234, 1},
		187: {234, 2},
		188: {174, 4},
		189: {198, 0},
		190: {198, 2},
		191: {101, 3},
		192: {107, 4},
		193: {213, 3},
		194: {213, 1},
		195: {281, 1},
		196: {281, 3},
		197: {97, 2},
		198: {110, 1},
		199: {225, 1},
		200: {88, 3},
		201: {152, 8},
		202: {227, 3},
		203: {227, 2},
		204: {274, 1},
		205: {274, 3},
		206: {202, 1},
		207: {202, 3},
		208: {149, 2},
		209: {238, 0},
		210: {238, 2},
		211: {249, 0},
		212: {249, 1},
		213: {248, 1},
		214: {248, 2},
		215: {248, 1},
		216: {248, 2},
		217: {158, 2},
		218: {264, 1},
		219: {264, 3},
		220: {219, 4},
		221: {253, 2},
		222: {254, 0},
		223: {254, 1},
		224: {273, 0},
		225: {255, 1},
		226: {255, 3},
		227: {266, 1},
		228: {266, 3},
		229: {166, 1},
		230: {166, 2},
		231: {166, 3},
		232: {166, 3},
		233: {166, 4},
		234: {166, 3},
		235: {166, 3},
		236: {166, 4},
		237: {166, 2},
		238: {171, 1},
		239: {171, 3},
		240: {171, 3},
		241: {139, 3},
		242: {272, 4},
		243: {272, 4},
		244: {272, 4},
		245: {123, 3},
		246: {232, 0},
		247: {232, 1},
		248: {177, 3},
		249: {177, 1},
		250: {177, 3},
		251: {177, 1},
		252: {177, 3},
		253: {177, 1},
		254: {173, 2},
		255: {143, 0},
		256: {143, 1},
		257: {179, 2},
		258: {261, 0},
		259: {261, 1},
		260: {176, 1},
		261: {176, 1},
		262: {259, 0},
		263: {301, 0},
		264: {301, 3},
		265: {301, 1},
		266: {260, 1},
		267: {260, 3},
		268: {271, 2},
		269: {271, 8},
		270: {241, 2},
		271: {242, 0},
		272: {242, 1},
		273: {167, 1},
		274: {167, 1},
		275: {167, 1},
		276: {167, 3},
		277: {167, 4},
		278: {167, 5},
		279: {167, 4},
		280: {168, 0},
		281: {168, 1},
		282: {151, 0},
		283: {151, 1},
		284: {150, 1},
		285: {150, 2},
		286: {142, 5},
		287: {144, 0},
		288: {144, 2},
		289: {159, 0},
		290: {159, 3},
		291: {187, 1},
		292: {187, 3},
		293: {175, 1},
		294: {175, 2},
		295: {265, 1},
		296: {265, 1},
		297: {160, 0},
		298: {160, 2},
		299: {165, 0},
		300: {165, 3},
		301: {163, 0},
		302: {163, 2},
		303: {163, 4},
		304: {163, 4},
		305: {180, 1},
		306: {180, 1},
		307: {141, 1},
		308: {229, 9},
		309: {252, 1},
		310: {252, 3},
		311: {205, 5},
		312: {231, 2},
		313: {207, 0},
		314: {207, 2},
		315: {208, 0},
		316: {208, 3},
		317: {138, 1},
		318: {182, 1},
		319: {182, 3},
		320: {298, 0},
		321: {298, 1},
		322: {214, 1},
		323: {83, 1},
		324: {46, 1},
		325: {270, 1},
		326: {270, 3},
	}

	yyXErrors = map[yyXError]string{
	}

	yyParseTab = [553][]uint16{
		// 0
		{1: 309, 309, 31: 45, 33: 355, 45, 351, 45, 142: 354, 150: 353, 348, 342, 184: 345, 332, 188: 346, 333, 347, 334, 335, 194: 336, 349, 337, 338, 199: 331, 350, 339, 209: 340, 224: 352, 341, 228: 330, 343, 356, 344, 246: 328, 276: 329},
		{1: 327},
		{1: 326, 878},
		{1: 325, 325},
		{1: 323, 323},
		// 5
		{1: 322, 322},
		{1: 321, 321},
		{1: 320, 320},
		{1: 319, 319},
		{1: 318, 318},
		// 10
		{1: 317, 317},
		{1: 316, 316},
		{1: 315, 315},
		{1: 314, 314},
		{1: 313, 313},
		// 15
		{1: 312, 312},
		{1: 311, 311},
		{1: 310, 310},
		{1: 308, 308},
		{1: 307, 307},
		// 20
		{162: 304, 203: 859, 256: 860, 280: 861},
		{31: 451, 34: 823, 824, 825, 227: 450},
		{162: 814, 203: 813},
		{31: 45, 33: 355, 142: 354, 150: 353, 449, 812},
		{131: 290, 135: 290, 210: 776, 775, 774},
		// 25
		{1: 128, 128},
		{31: 44, 33: 355, 44, 44, 44, 142: 773},
		{31: 43, 33: 43, 43, 43, 43},
		{3: 359, 46: 360},
		{3: 359, 46: 358, 138: 357},
		// 30
		{1: 15, 15},
		{10, 10, 10, 10, 10, 8: 10, 10, 10, 13: 10, 16: 10, 119: 10, 131: 10, 135: 10},
		{3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 48: 3, 119: 3, 3, 3, 3, 124: 3, 3, 3, 3, 3, 131: 3, 134: 3, 3, 140: 3, 145: 3, 3, 156: 3, 169: 3, 183: 3},
		{43: 361},
		{13: 367, 123: 366, 154: 364, 363, 166: 368, 171: 362, 365},
		// 35
		{98, 98, 98, 4: 98, 714, 8: 98, 98, 98, 16: 98, 31: 98, 33: 98, 98, 98, 98, 119: 98, 98, 129: 712, 710, 132: 711, 713, 148: 762, 153: 763, 177: 761, 272: 760},
		{13: 367, 123: 708, 139: 755, 157: 757, 170: 756},
		{13: 367, 123: 708, 139: 752, 157: 751, 170: 750},
		{47: 581, 141: 704},
		{89, 89, 89, 4: 89, 89, 8: 89, 89, 89, 16: 89, 31: 89, 33: 89, 89, 89, 89, 119: 89, 89, 129: 89, 89, 132: 89, 89, 148: 89, 153: 89},
		// 40
		{72, 3: 359, 15: 72, 46: 535, 128: 72, 143: 534, 173: 533},
		{31: 40, 33: 40, 40, 40, 40, 119: 370, 144: 369},
		{31: 41, 33: 41, 41, 41, 41},
		{3: 359, 5: 410, 412, 400, 13: 413, 46: 445, 401, 424, 406, 409, 443, 405, 407, 418, 436, 434, 442, 439, 419, 420, 431, 402, 427, 438, 403, 421, 425, 422, 428, 408, 417, 423, 437, 415, 426, 433, 432, 429, 430, 435, 404, 416, 392, 371, 372, 374, 393, 444, 382, 375, 395, 379, 387, 386, 381, 396, 390, 383, 380, 414, 388, 399, 385, 384, 373, 377, 389, 394, 376, 391, 441, 440, 378, 397, 398, 411},
		{271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 14: 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 140: 699},
		// 45
		{270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 14: 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270},
		{269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 14: 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269},
		{268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 14: 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268},
		{267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 14: 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267},
		{266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 14: 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266},
		// 50
		{265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 14: 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265},
		{264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 14: 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264},
		{263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 14: 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263},
		{262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 14: 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262},
		{261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 14: 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261},
		// 55
		{260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 14: 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260},
		{259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 14: 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259},
		{258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 14: 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258},
		{257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 14: 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257},
		{256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 14: 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256},
		// 60
		{255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 14: 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255},
		{254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 14: 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254},
		{253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 14: 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253},
		{252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 14: 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252},
		{251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 14: 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251},
		// 65
		{250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 14: 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 140: 250, 169: 250},
		{249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 14: 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249},
		{248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 14: 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248},
		{247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 14: 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247},
		{246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 14: 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246},
		// 70
		{245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 14: 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245},
		{244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 14: 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244},
		{243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 14: 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243},
		{242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 14: 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242},
		{241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 14: 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241},
		// 75
		{240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 14: 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240},
		{239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 14: 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239},
		{238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 14: 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238},
		{7: 698},
		{7: 697},
		// 80
		{7: 696},
		{7: 688},
		{227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 14: 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227},
		{3: 359, 5: 410, 412, 400, 13: 413, 46: 445, 401, 424, 406, 409, 443, 405, 407, 418, 436, 434, 442, 439, 419, 420, 431, 402, 427, 438, 403, 421, 425, 422, 428, 408, 417, 423, 437, 415, 426, 433, 432, 429, 430, 435, 404, 416, 392, 371, 372, 374, 393, 444, 382, 375, 395, 379, 387, 386, 381, 396, 390, 383, 380, 414, 388, 399, 385, 384, 373, 377, 389, 394, 376, 391, 441, 440, 378, 397, 398, 687},
		{39, 39, 39, 5: 470, 487, 8: 39, 39, 39, 12: 466, 14: 469, 485, 39, 483, 486, 468, 467, 474, 473, 482, 471, 475, 476, 472, 481, 484, 480, 39, 478, 39, 39, 39, 39, 39, 117: 479, 477},
		// 85
		{3: 359, 5: 410, 412, 400, 13: 413, 46: 445, 401, 424, 406, 409, 443, 405, 407, 418, 436, 434, 442, 439, 419, 420, 431, 402, 427, 438, 403, 421, 425, 422, 428, 408, 417, 423, 437, 415, 426, 433, 432, 429, 430, 435, 404, 416, 392, 371, 372, 374, 393, 444, 382, 375, 395, 379, 387, 386, 381, 396, 390, 383, 380, 414, 388, 399, 385, 384, 373, 377, 389, 394, 376, 391, 441, 440, 378, 397, 398, 686},
		{3: 359, 5: 410, 412, 400, 13: 413, 31: 45, 33: 355, 46: 445, 401, 424, 406, 409, 443, 405, 407, 418, 436, 434, 442, 439, 419, 420, 431, 402, 427, 438, 403, 421, 425, 422, 428, 408, 417, 423, 437, 415, 426, 433, 432, 429, 430, 435, 404, 416, 392, 371, 372, 374, 393, 444, 382, 375, 395, 379, 387, 386, 381, 396, 390, 383, 380, 414, 388, 399, 385, 384, 373, 377, 389, 394, 376, 391, 441, 440, 378, 397, 398, 684, 142: 354, 150: 353, 449, 448},
		{13: 678},
		{13: 202},
		{13: 201},
		// 90
		{13: 200},
		{13: 199},
		{13: 198},
		{13: 197},
		{13: 196},
		// 95
		{13: 195},
		{13: 194},
		{13: 193},
		{13: 192},
		{13: 191},
		// 100
		{13: 190},
		{13: 189},
		{13: 188},
		{13: 669},
		{13: 663},
		// 105
		{13: 659},
		{13: 655},
		{13: 651},
		{13: 647},
		{13: 643},
		// 110
		{13: 636},
		{13: 623},
		{13: 602},
		{145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 14: 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145},
		{144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 14: 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144},
		// 115
		{3: 359, 5: 410, 412, 400, 13: 413, 41: 590, 46: 445, 401, 424, 406, 409, 443, 405, 407, 418, 436, 434, 442, 439, 419, 420, 431, 402, 427, 438, 403, 421, 425, 422, 428, 408, 417, 423, 437, 415, 426, 433, 432, 429, 430, 435, 404, 416, 392, 371, 372, 374, 393, 444, 382, 375, 395, 379, 387, 386, 381, 396, 390, 383, 380, 414, 388, 399, 385, 384, 373, 377, 389, 394, 376, 391, 441, 440, 378, 397, 398, 587, 174: 589, 234: 588},
		{13: 447, 88: 446},
		{129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 14: 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129},
		{4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 14: 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 140: 4, 169: 4},
		{130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 14: 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130},
		// 120
		{31: 45, 33: 355, 142: 354, 150: 353, 449, 448},
		{586},
		{31: 451, 227: 450},
		{11: 524, 158: 523},
		{3: 173, 5: 173, 173, 173, 12: 454, 173, 47: 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 136: 452, 453},
		// 125
		{3: 172, 5: 172, 172, 172, 13: 172, 47: 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172},
		{3: 359, 5: 410, 412, 400, 13: 413, 46: 459, 401, 424, 406, 409, 443, 405, 407, 418, 436, 434, 442, 439, 419, 420, 431, 402, 427, 438, 403, 421, 425, 422, 428, 408, 417, 423, 437, 415, 426, 433, 432, 429, 430, 435, 404, 416, 392, 371, 372, 374, 393, 444, 382, 375, 395, 379, 387, 386, 381, 396, 390, 383, 380, 414, 388, 399, 385, 384, 373, 377, 389, 394, 376, 391, 441, 440, 378, 397, 398, 455, 149: 458, 202: 457, 274: 456},
		{11: 124},
		{116, 116, 116, 359, 116, 470, 487, 492, 116, 116, 116, 116, 466, 14: 469, 485, 17: 483, 486, 468, 467, 474, 473, 482, 471, 475, 476, 472, 481, 484, 480, 32: 478, 38: 116, 116, 43: 491, 46: 490, 117: 479, 477, 248: 489, 488},
		{4: 464, 11: 125},
		// 130
		{4: 123, 11: 123},
		{4: 121, 11: 121},
		{3: 4, 4, 4, 4, 4, 11: 4, 4, 14: 4, 4, 17: 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 32: 4, 43: 4, 140: 4, 183: 460},
		{4: 118, 11: 118, 238: 461, 267: 462},
		{4: 120, 11: 120},
		// 135
		{7: 400, 87: 463},
		{4: 117, 11: 117},
		{3: 359, 5: 410, 412, 400, 13: 413, 46: 459, 401, 424, 406, 409, 443, 405, 407, 418, 436, 434, 442, 439, 419, 420, 431, 402, 427, 438, 403, 421, 425, 422, 428, 408, 417, 423, 437, 415, 426, 433, 432, 429, 430, 435, 404, 416, 392, 371, 372, 374, 393, 444, 382, 375, 395, 379, 387, 386, 381, 396, 390, 383, 380, 414, 388, 399, 385, 384, 373, 377, 389, 394, 376, 391, 441, 440, 378, 397, 398, 455, 149: 458, 202: 465},
		{4: 122, 11: 122},
		{3: 359, 5: 410, 412, 400, 13: 413, 46: 445, 401, 424, 406, 409, 443, 405, 407, 418, 436, 434, 442, 439, 419, 420, 431, 402, 427, 438, 403, 421, 425, 422, 428, 408, 417, 423, 437, 415, 426, 433, 432, 429, 430, 435, 404, 416, 392, 371, 372, 374, 393, 444, 382, 375, 395, 379, 387, 386, 381, 396, 390, 383, 380, 414, 388, 399, 385, 384, 373, 377, 389, 394, 376, 391, 441, 440, 378, 397, 398, 522},
		// 140
		{3: 359, 5: 410, 412, 400, 13: 413, 46: 445, 401, 424, 406, 409, 443, 405, 407, 418, 436, 434, 442, 439, 419, 420, 431, 402, 427, 438, 403, 421, 425, 422, 428, 408, 417, 423, 437, 415, 426, 433, 432, 429, 430, 435, 404, 416, 392, 371, 372, 374, 393, 444, 382, 375, 395, 379, 387, 386, 381, 396, 390, 383, 380, 414, 388, 399, 385, 384, 373, 377, 389, 394, 376, 391, 441, 440, 378, 397, 398, 521},
		{3: 359, 5: 410, 412, 400, 13: 413, 46: 445, 401, 424, 406, 409, 443, 405, 407, 418, 436, 434, 442, 439, 419, 420, 431, 402, 427, 438, 403, 421, 425, 422, 428, 408, 417, 423, 437, 415, 426, 433, 432, 429, 430, 435, 404, 416, 392, 371, 372, 374, 393, 444, 382, 375, 395, 379, 387, 386, 381, 396, 390, 383, 380, 414, 388, 399, 385, 384, 373, 377, 389, 394, 376, 391, 441, 440, 378, 397, 398, 520},
		{3: 359, 5: 410, 412, 400, 13: 413, 46: 445, 401, 424, 406, 409, 443, 405, 407, 418, 436, 434, 442, 439, 419, 420, 431, 402, 427, 438, 403, 421, 425, 422, 428, 408, 417, 423, 437, 415, 426, 433, 432, 429, 430, 435, 404, 416, 392, 371, 372, 374, 393, 444, 382, 375, 395, 379, 387, 386, 381, 396, 390, 383, 380, 414, 388, 399, 385, 384, 373, 377, 389, 394, 376, 391, 441, 440, 378, 397, 398, 519},
		{3: 359, 5: 410, 412, 400, 13: 413, 46: 445, 401, 424, 406, 409, 443, 405, 407, 418, 436, 434, 442, 439, 419, 420, 431, 402, 427, 438, 403, 421, 425, 422, 428, 408, 417, 423, 437, 415, 426, 433, 432, 429, 430, 435, 404, 416, 392, 371, 372, 374, 393, 444, 382, 375, 395, 379, 387, 386, 381, 396, 390, 383, 380, 414, 388, 399, 385, 384, 373, 377, 389, 394, 376, 391, 441, 440, 378, 397, 398, 518},
		{3: 359, 5: 410, 412, 400, 13: 413, 46: 445, 401, 424, 406, 409, 443, 405, 407, 418, 436, 434, 442, 439, 419, 420, 431, 402, 427, 438, 403, 421, 425, 422, 428, 408, 417, 423, 437, 415, 426, 433, 432, 429, 430, 435, 404, 416, 392, 371, 372, 374, 393, 444, 382, 375, 395, 379, 387, 386, 381, 396, 390, 383, 380, 414, 388, 399, 385, 384, 373, 377, 389, 394, 376, 391, 441, 440, 378, 397, 398, 517},
		// 145
		{3: 359, 5: 410, 412, 400, 13: 413, 46: 445, 401, 424, 406, 409, 443, 405, 407, 418, 436, 434, 442, 439, 419, 420, 431, 402, 427, 438, 403, 421, 425, 422, 428, 408, 417, 423, 437, 415, 426, 433, 432, 429, 430, 435, 404, 416, 392, 371, 372, 374, 393, 444, 382, 375, 395, 379, 387, 386, 381, 396, 390, 383, 380, 414, 388, 399, 385, 384, 373, 377, 389, 394, 376, 391, 441, 440, 378, 397, 398, 516},
		{3: 359, 5: 410, 412, 400, 13: 413, 46: 445, 401, 424, 406, 409, 443, 405, 407, 418, 436, 434, 442, 439, 419, 420, 431, 402, 427, 438, 403, 421, 425, 422, 428, 408, 417, 423, 437, 415, 426, 433, 432, 429, 430, 435, 404, 416, 392, 371, 372, 374, 393, 444, 382, 375, 395, 379, 387, 386, 381, 396, 390, 383, 380, 414, 388, 399, 385, 384, 373, 377, 389, 394, 376, 391, 441, 440, 378, 397, 398, 515},
		{3: 359, 5: 410, 412, 400, 13: 413, 46: 445, 401, 424, 406, 409, 443, 405, 407, 418, 436, 434, 442, 439, 419, 420, 431, 402, 427, 438, 403, 421, 425, 422, 428, 408, 417, 423, 437, 415, 426, 433, 432, 429, 430, 435, 404, 416, 392, 371, 372, 374, 393, 444, 382, 375, 395, 379, 387, 386, 381, 396, 390, 383, 380, 414, 388, 399, 385, 384, 373, 377, 389, 394, 376, 391, 441, 440, 378, 397, 398, 514},
		{3: 359, 5: 410, 412, 400, 13: 413, 46: 445, 401, 424, 406, 409, 443, 405, 407, 418, 436, 434, 442, 439, 419, 420, 431, 402, 427, 438, 403, 421, 425, 422, 428, 408, 417, 423, 437, 415, 426, 433, 432, 429, 430, 435, 404, 416, 392, 371, 372, 374, 393, 444, 382, 375, 395, 379, 387, 386, 381, 396, 390, 383, 380, 414, 388, 399, 385, 384, 373, 377, 389, 394, 376, 391, 441, 440, 378, 397, 398, 513},
		{3: 359, 5: 410, 412, 400, 13: 413, 46: 445, 401, 424, 406, 409, 443, 405, 407, 418, 436, 434, 442, 439, 419, 420, 431, 402, 427, 438, 403, 421, 425, 422, 428, 408, 417, 423, 437, 415, 426, 433, 432, 429, 430, 435, 404, 416, 392, 371, 372, 374, 393, 444, 382, 375, 395, 379, 387, 386, 381, 396, 390, 383, 380, 414, 388, 399, 385, 384, 373, 377, 389, 394, 376, 391, 441, 440, 378, 397, 398, 512},
		// 150
		{3: 359, 5: 410, 412, 400, 13: 413, 46: 445, 401, 424, 406, 409, 443, 405, 407, 418, 436, 434, 442, 439, 419, 420, 431, 402, 427, 438, 403, 421, 425, 422, 428, 408, 417, 423, 437, 415, 426, 433, 432, 429, 430, 435, 404, 416, 392, 371, 372, 374, 393, 444, 382, 375, 395, 379, 387, 386, 381, 396, 390, 383, 380, 414, 388, 399, 385, 384, 373, 377, 389, 394, 376, 391, 441, 440, 378, 397, 398, 511},
		{3: 359, 5: 410, 412, 400, 13: 413, 46: 445, 401, 424, 406, 409, 443, 405, 407, 418, 436, 434, 442, 439, 419, 420, 431, 402, 427, 438, 403, 421, 425, 422, 428, 408, 417, 423, 437, 415, 426, 433, 432, 429, 430, 435, 404, 416, 392, 371, 372, 374, 393, 444, 382, 375, 395, 379, 387, 386, 381, 396, 390, 383, 380, 414, 388, 399, 385, 384, 373, 377, 389, 394, 376, 391, 441, 440, 378, 397, 398, 510},
		{3: 359, 5: 410, 412, 400, 13: 413, 46: 445, 401, 424, 406, 409, 443, 405, 407, 418, 436, 434, 442, 439, 419, 420, 431, 402, 427, 438, 403, 421, 425, 422, 428, 408, 417, 423, 437, 415, 426, 433, 432, 429, 430, 435, 404, 416, 392, 371, 372, 374, 393, 444, 382, 375, 395, 379, 387, 386, 381, 396, 390, 383, 380, 414, 388, 399, 385, 384, 373, 377, 389, 394, 376, 391, 441, 440, 378, 397, 398, 509},
		{3: 210, 5: 210, 210, 210, 13: 210, 47: 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210},
		{3: 209, 5: 209, 209, 209, 13: 209, 47: 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209},
		// 155
		{3: 208, 5: 208, 208, 208, 13: 208, 47: 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208},
		{3: 207, 5: 207, 207, 207, 13: 207, 47: 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207},
		{3: 359, 5: 410, 412, 400, 13: 413, 46: 445, 401, 424, 406, 409, 443, 405, 407, 418, 436, 434, 442, 439, 419, 420, 431, 402, 427, 438, 403, 421, 425, 422, 428, 408, 417, 423, 437, 415, 426, 433, 432, 429, 430, 435, 404, 416, 392, 371, 372, 374, 393, 444, 382, 375, 395, 379, 387, 386, 381, 396, 390, 383, 380, 414, 388, 399, 385, 384, 373, 377, 389, 394, 376, 391, 441, 440, 378, 397, 398, 508},
		{6: 506, 222: 505},
		{13: 497, 50: 409, 86: 498, 213: 504},
		// 160
		{18: 495},
		{119, 119, 119, 4: 119, 8: 119, 119, 119, 119, 38: 119, 119},
		{115, 115, 115, 4: 115, 8: 115, 115, 115, 115, 38: 115, 115},
		{114, 114, 114, 4: 114, 8: 114, 114, 114, 114, 38: 114, 114},
		{3: 359, 7: 494, 46: 493},
		// 165
		{112, 112, 112, 4: 112, 8: 112, 112, 112, 112, 38: 112, 112},
		{113, 113, 113, 4: 113, 8: 113, 113, 113, 113, 38: 113, 113},
		{111, 111, 111, 4: 111, 8: 111, 111, 111, 111, 38: 111, 111},
		{13: 497, 50: 409, 86: 498, 213: 496},
		{135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 14: 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135},
		// 170
		{3: 359, 5: 410, 412, 400, 13: 413, 46: 445, 401, 424, 406, 409, 443, 405, 407, 418, 436, 434, 442, 439, 419, 420, 431, 402, 427, 438, 403, 421, 425, 422, 428, 408, 417, 423, 437, 415, 426, 433, 432, 429, 430, 435, 404, 416, 392, 371, 372, 374, 393, 444, 382, 375, 395, 379, 387, 386, 381, 396, 390, 383, 380, 414, 388, 399, 385, 384, 373, 377, 389, 394, 376, 391, 441, 440, 378, 397, 398, 499, 281: 500},
		{133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 14: 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133},
		{132, 4: 132, 470, 487, 12: 466, 14: 469, 485, 17: 483, 486, 468, 467, 474, 473, 482, 471, 475, 476, 472, 481, 484, 480, 32: 478, 117: 479, 477},
		{501, 4: 502},
		{134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 14: 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134},
		// 175
		{3: 359, 5: 410, 412, 400, 13: 413, 46: 445, 401, 424, 406, 409, 443, 405, 407, 418, 436, 434, 442, 439, 419, 420, 431, 402, 427, 438, 403, 421, 425, 422, 428, 408, 417, 423, 437, 415, 426, 433, 432, 429, 430, 435, 404, 416, 392, 371, 372, 374, 393, 444, 382, 375, 395, 379, 387, 386, 381, 396, 390, 383, 380, 414, 388, 399, 385, 384, 373, 377, 389, 394, 376, 391, 441, 440, 378, 397, 398, 503},
		{131, 4: 131, 470, 487, 12: 466, 14: 469, 485, 17: 483, 486, 468, 467, 474, 473, 482, 471, 475, 476, 472, 481, 484, 480, 32: 478, 117: 479, 477},
		{136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 14: 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136},
		{160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 14: 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160},
		{222: 507},
		// 180
		{159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 14: 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159},
		{205, 205, 205, 205, 205, 470, 487, 205, 205, 205, 205, 205, 466, 14: 469, 485, 205, 483, 486, 468, 467, 474, 473, 482, 471, 475, 476, 472, 205, 205, 205, 205, 478, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 117: 479, 477},
		{212, 212, 212, 212, 212, 470, 487, 212, 212, 212, 212, 212, 466, 14: 469, 485, 212, 212, 486, 468, 467, 474, 473, 212, 471, 475, 476, 472, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 117: 479, 477},
		{213, 213, 213, 213, 213, 470, 487, 213, 213, 213, 213, 213, 466, 14: 469, 485, 213, 483, 486, 468, 467, 474, 473, 482, 471, 475, 476, 472, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 117: 479, 477},
		{214, 214, 214, 214, 214, 470, 487, 214, 214, 214, 214, 214, 466, 14: 469, 485, 214, 483, 486, 468, 467, 474, 473, 482, 471, 475, 476, 472, 214, 214, 214, 214, 478, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 117: 479, 477},
		// 185
		{215, 215, 215, 215, 215, 470, 487, 215, 215, 215, 215, 215, 466, 14: 469, 215, 215, 215, 215, 468, 467, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 117: 479, 477},
		{216, 216, 216, 216, 216, 470, 487, 216, 216, 216, 216, 216, 466, 14: 469, 216, 216, 216, 216, 468, 467, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 117: 479, 477},
		{217, 217, 217, 217, 217, 470, 487, 217, 217, 217, 217, 217, 466, 14: 469, 217, 217, 217, 217, 468, 467, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 117: 479, 477},
		{218, 218, 218, 218, 218, 470, 487, 218, 218, 218, 218, 218, 466, 14: 469, 218, 218, 218, 218, 468, 467, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 117: 479, 477},
		{219, 219, 219, 219, 219, 470, 487, 219, 219, 219, 219, 219, 466, 14: 469, 219, 219, 219, 219, 468, 467, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 117: 479, 477},
		// 190
		{220, 220, 220, 220, 220, 470, 487, 220, 220, 220, 220, 220, 466, 14: 469, 220, 220, 220, 220, 468, 467, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 117: 479, 477},
		{221, 221, 221, 221, 221, 221, 487, 221, 221, 221, 221, 221, 466, 14: 221, 221, 221, 221, 221, 468, 467, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 117: 479, 477},
		{222, 222, 222, 222, 222, 222, 487, 222, 222, 222, 222, 222, 466, 14: 222, 222, 222, 222, 222, 468, 467, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 117: 479, 477},
		{223, 223, 223, 223, 223, 223, 487, 223, 223, 223, 223, 223, 223, 14: 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 117: 479, 477},
		{224, 224, 224, 224, 224, 224, 487, 224, 224, 224, 224, 224, 224, 14: 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 117: 479, 477},
		// 195
		{225, 225, 225, 225, 225, 225, 487, 225, 225, 225, 225, 225, 225, 14: 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 117: 479, 477},
		{40, 40, 40, 8: 40, 40, 40, 16: 40, 119: 370, 144: 557},
		{218: 527, 526, 264: 525},
		{110, 110, 110, 4: 555, 8: 110, 110, 110, 16: 110, 119: 110},
		{109, 109, 109, 4: 109, 8: 109, 109, 109, 16: 109, 119: 109},
		// 200
		{13: 530, 123: 366, 154: 364, 363, 166: 529, 171: 362, 365, 255: 528},
		{105, 105, 105, 4: 105, 8: 105, 105, 105, 16: 105, 119: 105, 551, 253: 552, 550},
		{102, 102, 102, 4: 102, 8: 102, 102, 102, 16: 102, 119: 102, 102},
		{72, 3: 359, 13: 367, 15: 72, 46: 535, 123: 366, 128: 72, 143: 534, 154: 364, 363, 166: 532, 171: 362, 365, 533, 266: 531},
		{547, 4: 548},
		// 205
		{100, 4: 100},
		{546},
		{69, 15: 540, 126: 69, 69, 539, 176: 537, 179: 538, 261: 536},
		{71, 71, 71, 4: 71, 11: 71, 15: 71, 48: 71, 126: 71, 71, 71, 134: 71, 156: 71},
		{73, 126: 73, 73},
		// 210
		{3: 359, 46: 543, 214: 542, 260: 541},
		{68, 126: 68, 68},
		{3: 67},
		{3: 66},
		{70, 12: 70, 14: 70, 121: 70, 70, 124: 70, 70, 70, 70, 146: 544},
		// 215
		{61, 12: 61, 14: 61, 121: 61, 61, 124: 61, 61, 61, 61, 146: 61},
		{5, 12: 5, 14: 5, 121: 5, 5, 124: 5, 5, 5, 5, 146: 5},
		{3: 359, 46: 543, 214: 545},
		{60, 12: 60, 14: 60, 121: 60, 60, 124: 60, 60, 60, 60, 146: 60},
		{82, 82, 82, 4: 82, 82, 8: 82, 82, 82, 13: 82, 16: 82, 31: 82, 33: 82, 82, 82, 82, 82, 119: 82, 82, 129: 82, 82, 132: 82, 82, 148: 82, 153: 82},
		// 220
		{101, 101, 101, 4: 101, 8: 101, 101, 101, 16: 101, 119: 101, 101},
		{13: 367, 123: 366, 154: 364, 363, 166: 549, 171: 362, 365},
		{99, 4: 99},
		{103, 103, 103, 4: 103, 8: 103, 103, 103, 16: 103, 119: 103, 273: 554},
		{3: 359, 46: 358, 138: 553},
		// 225
		{104, 104, 104, 4: 104, 8: 104, 104, 104, 16: 104, 119: 104},
		{106, 106, 106, 4: 106, 8: 106, 106, 106, 16: 106, 119: 106},
		{107, 107, 107, 4: 107, 8: 107, 107, 107, 16: 107, 119: 107},
		{218: 527, 556},
		{108, 108, 108, 4: 108, 8: 108, 108, 108, 16: 108, 119: 108},
		// 230
		{38, 38, 38, 8: 38, 38, 38, 16: 559, 159: 558},
		{30, 30, 30, 8: 30, 30, 570, 160: 569},
		{186: 560},
		{3: 359, 5: 410, 412, 400, 13: 413, 46: 445, 401, 424, 406, 409, 443, 405, 407, 418, 436, 434, 442, 439, 419, 420, 431, 402, 427, 438, 403, 421, 425, 422, 428, 408, 417, 423, 437, 415, 426, 433, 432, 429, 430, 435, 404, 416, 392, 371, 372, 374, 393, 444, 382, 375, 395, 379, 387, 386, 381, 396, 390, 383, 380, 414, 388, 399, 385, 384, 373, 377, 389, 394, 376, 391, 441, 440, 378, 397, 398, 455, 149: 563, 175: 562, 187: 561},
		{37, 37, 37, 4: 567, 8: 37, 37, 37},
		// 235
		{36, 36, 36, 4: 36, 8: 36, 36, 36},
		{34, 34, 34, 4: 34, 8: 34, 34, 34, 38: 565, 566, 265: 564},
		{33, 33, 33, 4: 33, 8: 33, 33, 33},
		{32, 32, 32, 4: 32, 8: 32, 32, 32},
		{31, 31, 31, 4: 31, 8: 31, 31, 31},
		// 240
		{3: 359, 5: 410, 412, 400, 13: 413, 46: 445, 401, 424, 406, 409, 443, 405, 407, 418, 436, 434, 442, 439, 419, 420, 431, 402, 427, 438, 403, 421, 425, 422, 428, 408, 417, 423, 437, 415, 426, 433, 432, 429, 430, 435, 404, 416, 392, 371, 372, 374, 393, 444, 382, 375, 395, 379, 387, 386, 381, 396, 390, 383, 380, 414, 388, 399, 385, 384, 373, 377, 389, 394, 376, 391, 441, 440, 378, 397, 398, 455, 149: 563, 175: 568},
		{35, 35, 35, 4: 35, 8: 35, 35, 35},
		{28, 28, 28, 8: 28, 573, 165: 572},
		{3: 359, 5: 410, 412, 400, 13: 413, 46: 445, 401, 424, 406, 409, 443, 405, 407, 418, 436, 434, 442, 439, 419, 420, 431, 402, 427, 438, 403, 421, 425, 422, 428, 408, 417, 423, 437, 415, 426, 433, 432, 429, 430, 435, 404, 416, 392, 371, 372, 374, 393, 444, 382, 375, 395, 379, 387, 386, 381, 396, 390, 383, 380, 414, 388, 399, 385, 384, 373, 377, 389, 394, 376, 391, 441, 440, 378, 397, 398, 571},
		{29, 29, 29, 5: 470, 487, 8: 29, 29, 12: 466, 14: 469, 485, 17: 483, 486, 468, 467, 474, 473, 482, 471, 475, 476, 472, 481, 484, 480, 32: 478, 117: 479, 477},
		// 245
		{26, 26, 26, 8: 577, 163: 576},
		{186: 574},
		{3: 359, 5: 410, 412, 400, 13: 413, 46: 445, 401, 424, 406, 409, 443, 405, 407, 418, 436, 434, 442, 439, 419, 420, 431, 402, 427, 438, 403, 421, 425, 422, 428, 408, 417, 423, 437, 415, 426, 433, 432, 429, 430, 435, 404, 416, 392, 371, 372, 374, 393, 444, 382, 375, 395, 379, 387, 386, 381, 396, 390, 383, 380, 414, 388, 399, 385, 384, 373, 377, 389, 394, 376, 391, 441, 440, 378, 397, 398, 455, 149: 563, 175: 562, 187: 575},
		{27, 27, 27, 4: 567, 8: 27},
		{126, 126, 126},
		// 250
		{47: 581, 121: 580, 141: 579, 180: 578},
		{25, 25, 25, 4: 582, 164: 583},
		{22, 22, 22, 4: 22, 164: 22},
		{21, 21, 21, 4: 21, 164: 21},
		{20, 20, 20, 4: 20, 147: 20, 157: 20, 164: 20, 170: 20},
		// 255
		{47: 581, 121: 580, 141: 579, 180: 585},
		{47: 581, 121: 580, 141: 579, 180: 584},
		{23, 23, 23},
		{24, 24, 24},
		{127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 14: 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127},
		// 260
		{5: 470, 487, 12: 466, 14: 469, 485, 17: 483, 486, 468, 467, 474, 473, 482, 471, 475, 476, 472, 481, 484, 480, 32: 478, 41: 590, 117: 479, 477, 174: 589, 234: 599},
		{40: 138, 590, 596, 174: 595, 198: 594},
		{40: 141, 141, 141},
		{3: 359, 5: 410, 412, 400, 13: 413, 46: 445, 401, 424, 406, 409, 443, 405, 407, 418, 436, 434, 442, 439, 419, 420, 431, 402, 427, 438, 403, 421, 425, 422, 428, 408, 417, 423, 437, 415, 426, 433, 432, 429, 430, 435, 404, 416, 392, 371, 372, 374, 393, 444, 382, 375, 395, 379, 387, 386, 381, 396, 390, 383, 380, 414, 388, 399, 385, 384, 373, 377, 389, 394, 376, 391, 441, 440, 378, 397, 398, 591},
		{5: 470, 487, 12: 466, 14: 469, 485, 17: 483, 486, 468, 467, 474, 473, 482, 471, 475, 476, 472, 481, 484, 480, 32: 478, 45: 592, 117: 479, 477},
		// 265
		{3: 359, 5: 410, 412, 400, 13: 413, 46: 445, 401, 424, 406, 409, 443, 405, 407, 418, 436, 434, 442, 439, 419, 420, 431, 402, 427, 438, 403, 421, 425, 422, 428, 408, 417, 423, 437, 415, 426, 433, 432, 429, 430, 435, 404, 416, 392, 371, 372, 374, 393, 444, 382, 375, 395, 379, 387, 386, 381, 396, 390, 383, 380, 414, 388, 399, 385, 384, 373, 377, 389, 394, 376, 391, 441, 440, 378, 397, 398, 593},
		{5: 470, 487, 12: 466, 14: 469, 485, 17: 483, 486, 468, 467, 474, 473, 482, 471, 475, 476, 472, 481, 484, 480, 32: 478, 40: 139, 139, 139, 117: 479, 477},
		{40: 598},
		{40: 140, 140, 140},
		{3: 359, 5: 410, 412, 400, 13: 413, 46: 445, 401, 424, 406, 409, 443, 405, 407, 418, 436, 434, 442, 439, 419, 420, 431, 402, 427, 438, 403, 421, 425, 422, 428, 408, 417, 423, 437, 415, 426, 433, 432, 429, 430, 435, 404, 416, 392, 371, 372, 374, 393, 444, 382, 375, 395, 379, 387, 386, 381, 396, 390, 383, 380, 414, 388, 399, 385, 384, 373, 377, 389, 394, 376, 391, 441, 440, 378, 397, 398, 597},
		// 270
		{5: 470, 487, 12: 466, 14: 469, 485, 17: 483, 486, 468, 467, 474, 473, 482, 471, 475, 476, 472, 481, 484, 480, 32: 478, 40: 137, 117: 479, 477},
		{142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 14: 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142},
		{40: 138, 590, 596, 174: 595, 198: 600},
		{40: 601},
		{143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 14: 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143},
		// 275
		{3: 359, 5: 410, 412, 400, 13: 413, 46: 445, 401, 424, 406, 409, 443, 405, 407, 418, 436, 434, 442, 439, 419, 420, 431, 402, 427, 438, 403, 421, 425, 422, 428, 408, 417, 423, 437, 415, 426, 433, 432, 429, 430, 435, 404, 416, 392, 371, 372, 374, 393, 444, 382, 375, 395, 379, 387, 386, 381, 396, 390, 383, 380, 414, 388, 399, 385, 384, 373, 377, 389, 394, 376, 391, 441, 440, 378, 397, 398, 603},
		{5: 470, 487, 12: 466, 14: 469, 485, 17: 483, 486, 468, 467, 474, 473, 482, 471, 475, 476, 472, 481, 484, 480, 32: 478, 43: 604, 117: 479, 477},
		{49: 614, 52: 613, 615, 240: 607, 243: 605, 245: 612, 250: 611, 257: 608, 609, 263: 610, 277: 606},
		{622},
		{157},
		// 280
		{156},
		{155},
		{154},
		{153},
		{152},
		// 285
		{151},
		{150},
		{149, 235: 619},
		{147, 235: 616},
		{49: 617},
		// 290
		{237: 618},
		{146},
		{49: 620},
		{237: 621},
		{148},
		// 295
		{158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 14: 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158},
		{193: 627, 206: 628, 220: 629, 626, 226: 630, 236: 625, 247: 624, 278: 631, 632},
		{11: 633},
		{11: 168},
		{11: 167},
		// 300
		{11: 166},
		{11: 165},
		{11: 164},
		{11: 163},
		{11: 162},
		// 305
		{11: 161},
		{3: 359, 5: 410, 412, 400, 13: 413, 46: 445, 401, 424, 406, 409, 443, 405, 407, 418, 436, 434, 442, 439, 419, 420, 431, 402, 427, 438, 403, 421, 425, 422, 428, 408, 417, 423, 437, 415, 426, 433, 432, 429, 430, 435, 404, 416, 392, 371, 372, 374, 393, 444, 382, 375, 395, 379, 387, 386, 381, 396, 390, 383, 380, 414, 388, 399, 385, 384, 373, 377, 389, 394, 376, 391, 441, 440, 378, 397, 398, 634},
		{635, 5: 470, 487, 12: 466, 14: 469, 485, 17: 483, 486, 468, 467, 474, 473, 482, 471, 475, 476, 472, 481, 484, 480, 32: 478, 117: 479, 477},
		{169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 14: 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169},
		{3: 173, 5: 173, 173, 173, 13: 173, 47: 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 136: 452, 637},
		// 310
		{3: 359, 5: 410, 412, 400, 13: 413, 46: 445, 401, 424, 406, 409, 443, 405, 407, 418, 436, 434, 442, 439, 419, 420, 431, 402, 427, 438, 403, 421, 425, 422, 428, 408, 417, 423, 437, 415, 426, 433, 432, 429, 430, 435, 404, 416, 392, 371, 372, 374, 393, 444, 382, 375, 395, 379, 387, 386, 381, 396, 390, 383, 380, 414, 388, 399, 385, 384, 373, 377, 389, 394, 376, 391, 441, 440, 378, 397, 398, 638},
		{171, 4: 640, 470, 487, 12: 466, 14: 469, 485, 17: 483, 486, 468, 467, 474, 473, 482, 471, 475, 476, 472, 481, 484, 480, 32: 478, 117: 479, 477, 262: 639},
		{642},
		{7: 400, 87: 641},
		{170},
		// 315
		{174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 14: 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174},
		{3: 173, 5: 173, 173, 173, 13: 173, 47: 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 136: 452, 644},
		{3: 359, 5: 410, 412, 400, 13: 413, 46: 445, 401, 424, 406, 409, 443, 405, 407, 418, 436, 434, 442, 439, 419, 420, 431, 402, 427, 438, 403, 421, 425, 422, 428, 408, 417, 423, 437, 415, 426, 433, 432, 429, 430, 435, 404, 416, 392, 371, 372, 374, 393, 444, 382, 375, 395, 379, 387, 386, 381, 396, 390, 383, 380, 414, 388, 399, 385, 384, 373, 377, 389, 394, 376, 391, 441, 440, 378, 397, 398, 645},
		{646, 5: 470, 487, 12: 466, 14: 469, 485, 17: 483, 486, 468, 467, 474, 473, 482, 471, 475, 476, 472, 481, 484, 480, 32: 478, 117: 479, 477},
		{175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 14: 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175},
		// 320
		{3: 173, 5: 173, 173, 173, 13: 173, 47: 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 136: 452, 648},
		{3: 359, 5: 410, 412, 400, 13: 413, 46: 445, 401, 424, 406, 409, 443, 405, 407, 418, 436, 434, 442, 439, 419, 420, 431, 402, 427, 438, 403, 421, 425, 422, 428, 408, 417, 423, 437, 415, 426, 433, 432, 429, 430, 435, 404, 416, 392, 371, 372, 374, 393, 444, 382, 375, 395, 379, 387, 386, 381, 396, 390, 383, 380, 414, 388, 399, 385, 384, 373, 377, 389, 394, 376, 391, 441, 440, 378, 397, 398, 649},
		{650, 5: 470, 487, 12: 466, 14: 469, 485, 17: 483, 486, 468, 467, 474, 473, 482, 471, 475, 476, 472, 481, 484, 480, 32: 478, 117: 479, 477},
		{176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 14: 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176},
		{3: 173, 5: 173, 173, 173, 13: 173, 47: 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 136: 452, 652},
		// 325
		{3: 359, 5: 410, 412, 400, 13: 413, 46: 445, 401, 424, 406, 409, 443, 405, 407, 418, 436, 434, 442, 439, 419, 420, 431, 402, 427, 438, 403, 421, 425, 422, 428, 408, 417, 423, 437, 415, 426, 433, 432, 429, 430, 435, 404, 416, 392, 371, 372, 374, 393, 444, 382, 375, 395, 379, 387, 386, 381, 396, 390, 383, 380, 414, 388, 399, 385, 384, 373, 377, 389, 394, 376, 391, 441, 440, 378, 397, 398, 653},
		{654, 5: 470, 487, 12: 466, 14: 469, 485, 17: 483, 486, 468, 467, 474, 473, 482, 471, 475, 476, 472, 481, 484, 480, 32: 478, 117: 479, 477},
		{177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 14: 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177},
		{3: 173, 5: 173, 173, 173, 13: 173, 47: 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 136: 452, 656},
		{3: 359, 5: 410, 412, 400, 13: 413, 46: 445, 401, 424, 406, 409, 443, 405, 407, 418, 436, 434, 442, 439, 419, 420, 431, 402, 427, 438, 403, 421, 425, 422, 428, 408, 417, 423, 437, 415, 426, 433, 432, 429, 430, 435, 404, 416, 392, 371, 372, 374, 393, 444, 382, 375, 395, 379, 387, 386, 381, 396, 390, 383, 380, 414, 388, 399, 385, 384, 373, 377, 389, 394, 376, 391, 441, 440, 378, 397, 398, 657},
		// 330
		{658, 5: 470, 487, 12: 466, 14: 469, 485, 17: 483, 486, 468, 467, 474, 473, 482, 471, 475, 476, 472, 481, 484, 480, 32: 478, 117: 479, 477},
		{178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 14: 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178},
		{3: 173, 5: 173, 173, 173, 13: 173, 47: 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 136: 452, 660},
		{3: 359, 5: 410, 412, 400, 13: 413, 46: 445, 401, 424, 406, 409, 443, 405, 407, 418, 436, 434, 442, 439, 419, 420, 431, 402, 427, 438, 403, 421, 425, 422, 428, 408, 417, 423, 437, 415, 426, 433, 432, 429, 430, 435, 404, 416, 392, 371, 372, 374, 393, 444, 382, 375, 395, 379, 387, 386, 381, 396, 390, 383, 380, 414, 388, 399, 385, 384, 373, 377, 389, 394, 376, 391, 441, 440, 378, 397, 398, 661},
		{662, 5: 470, 487, 12: 466, 14: 469, 485, 17: 483, 486, 468, 467, 474, 473, 482, 471, 475, 476, 472, 481, 484, 480, 32: 478, 117: 479, 477},
		// 335
		{179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 14: 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179},
		{3: 173, 5: 173, 173, 173, 12: 664, 173, 47: 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 136: 452, 665},
		{668},
		{3: 359, 5: 410, 412, 400, 13: 413, 46: 445, 401, 424, 406, 409, 443, 405, 407, 418, 436, 434, 442, 439, 419, 420, 431, 402, 427, 438, 403, 421, 425, 422, 428, 408, 417, 423, 437, 415, 426, 433, 432, 429, 430, 435, 404, 416, 392, 371, 372, 374, 393, 444, 382, 375, 395, 379, 387, 386, 381, 396, 390, 383, 380, 414, 388, 399, 385, 384, 373, 377, 389, 394, 376, 391, 441, 440, 378, 397, 398, 666},
		{667, 5: 470, 487, 12: 466, 14: 469, 485, 17: 483, 486, 468, 467, 474, 473, 482, 471, 475, 476, 472, 481, 484, 480, 32: 478, 117: 479, 477},
		// 340
		{180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 14: 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180},
		{181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 14: 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181},
		{3: 359, 5: 410, 412, 400, 13: 413, 46: 445, 401, 424, 406, 409, 443, 405, 407, 418, 436, 434, 442, 439, 419, 420, 431, 402, 427, 438, 403, 421, 425, 422, 428, 408, 417, 423, 437, 415, 426, 433, 432, 429, 430, 435, 404, 416, 392, 371, 372, 374, 393, 444, 382, 375, 395, 379, 387, 386, 381, 396, 390, 383, 380, 414, 388, 399, 385, 384, 373, 377, 389, 394, 376, 391, 441, 440, 378, 397, 398, 670},
		{5: 470, 487, 11: 671, 466, 14: 469, 485, 17: 483, 486, 468, 467, 474, 473, 482, 471, 475, 476, 472, 481, 484, 480, 32: 478, 117: 479, 477},
		{3: 359, 5: 410, 412, 400, 13: 413, 46: 445, 401, 424, 406, 409, 443, 405, 407, 418, 436, 434, 442, 439, 419, 420, 431, 402, 427, 438, 403, 421, 425, 422, 428, 408, 417, 423, 437, 415, 426, 433, 432, 429, 430, 435, 404, 416, 392, 371, 372, 374, 393, 444, 382, 375, 395, 379, 387, 386, 381, 396, 390, 383, 380, 414, 388, 399, 385, 384, 373, 377, 389, 394, 376, 391, 441, 440, 378, 397, 398, 672, 275: 673},
		// 345
		{184, 5: 470, 487, 12: 466, 14: 469, 485, 17: 483, 486, 468, 467, 474, 473, 482, 471, 475, 476, 472, 481, 484, 480, 32: 478, 44: 184, 117: 479, 477},
		{183, 44: 675, 251: 674},
		{677},
		{3: 359, 5: 410, 412, 400, 13: 413, 46: 445, 401, 424, 406, 409, 443, 405, 407, 418, 436, 434, 442, 439, 419, 420, 431, 402, 427, 438, 403, 421, 425, 422, 428, 408, 417, 423, 437, 415, 426, 433, 432, 429, 430, 435, 404, 416, 392, 371, 372, 374, 393, 444, 382, 375, 395, 379, 387, 386, 381, 396, 390, 383, 380, 414, 388, 399, 385, 384, 373, 377, 389, 394, 376, 391, 441, 440, 378, 397, 398, 676},
		{182, 5: 470, 487, 12: 466, 14: 469, 485, 17: 483, 486, 468, 467, 474, 473, 482, 471, 475, 476, 472, 481, 484, 480, 32: 478, 117: 479, 477},
		// 350
		{185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 14: 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185},
		{3: 359, 5: 410, 412, 400, 13: 413, 46: 445, 401, 424, 406, 409, 443, 405, 407, 418, 436, 434, 442, 439, 419, 420, 431, 402, 427, 438, 403, 421, 425, 422, 428, 408, 417, 423, 437, 415, 426, 433, 432, 429, 430, 435, 404, 416, 392, 371, 372, 374, 393, 444, 382, 375, 395, 379, 387, 386, 381, 396, 390, 383, 380, 414, 388, 399, 385, 384, 373, 377, 389, 394, 376, 391, 441, 440, 378, 397, 398, 679, 239: 680},
		{187, 4: 187, 470, 487, 12: 466, 14: 469, 485, 17: 483, 486, 468, 467, 474, 473, 482, 471, 475, 476, 472, 481, 484, 480, 32: 478, 117: 479, 477},
		{681, 4: 682},
		{203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 14: 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203},
		// 355
		{3: 359, 5: 410, 412, 400, 13: 413, 46: 445, 401, 424, 406, 409, 443, 405, 407, 418, 436, 434, 442, 439, 419, 420, 431, 402, 427, 438, 403, 421, 425, 422, 428, 408, 417, 423, 437, 415, 426, 433, 432, 429, 430, 435, 404, 416, 392, 371, 372, 374, 393, 444, 382, 375, 395, 379, 387, 386, 381, 396, 390, 383, 380, 414, 388, 399, 385, 384, 373, 377, 389, 394, 376, 391, 441, 440, 378, 397, 398, 683},
		{186, 4: 186, 470, 487, 12: 466, 14: 469, 485, 17: 483, 486, 468, 467, 474, 473, 482, 471, 475, 476, 472, 481, 484, 480, 32: 478, 117: 479, 477},
		{685, 5: 470, 487, 12: 466, 14: 469, 485, 17: 483, 486, 468, 467, 474, 473, 482, 471, 475, 476, 472, 481, 484, 480, 32: 478, 117: 479, 477},
		{204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 14: 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204},
		{211, 211, 211, 211, 211, 211, 487, 211, 211, 211, 211, 211, 211, 14: 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 117: 479, 477},
		// 360
		{226, 226, 226, 226, 226, 226, 487, 226, 226, 226, 226, 226, 226, 14: 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 117: 479, 477},
		{193: 692, 206: 693, 220: 694, 691, 226: 695, 236: 690, 244: 689},
		{234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 14: 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234},
		{233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 14: 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233},
		{232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 14: 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232},
		// 365
		{231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 14: 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231},
		{230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 14: 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230},
		{229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 14: 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229},
		{228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 14: 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228},
		{235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 14: 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235},
		// 370
		{236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 14: 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236},
		{237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 14: 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237},
		{3: 359, 46: 701, 182: 700},
		{272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 14: 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 145: 272},
		{9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 14: 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 140: 702, 145: 9},
		// 375
		{3: 359, 46: 703},
		{8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 14: 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 145: 8},
		{157: 706, 170: 705},
		{13: 367, 123: 708, 139: 749},
		{13: 367, 123: 708, 139: 707},
		// 380
		{91, 91, 91, 4: 91, 8: 91, 91, 91, 16: 91, 31: 91, 33: 91, 91, 91, 91, 119: 91, 91},
		{5: 714, 13: 716, 129: 712, 710, 132: 711, 713, 177: 715, 271: 709},
		{13: 367, 123: 748},
		{3: 359, 15: 72, 46: 535, 126: 72, 72, 72, 143: 534, 173: 745},
		{78, 12: 78, 78, 78, 37: 78, 119: 78, 121: 78, 124: 78},
		// 385
		{3: 359, 15: 72, 46: 535, 126: 72, 128: 72, 143: 534, 173: 743},
		{76, 12: 76, 76, 76, 37: 76, 119: 76, 121: 76, 124: 76},
		{74, 12: 74, 74, 74, 37: 74, 119: 74, 121: 74, 124: 74},
		{12: 728, 47, 729, 121: 730, 124: 731, 167: 732, 742},
		{5: 81, 13: 367, 123: 717, 129: 81, 81, 132: 81, 81, 232: 718},
		// 390
		{80, 5: 80, 37: 80, 119: 80, 129: 80, 80, 132: 80, 80},
		{5: 714, 129: 712, 710, 132: 711, 713, 177: 719},
		{81, 13: 367, 37: 81, 119: 81, 123: 717, 232: 720},
		{40, 37: 40, 119: 370, 144: 721},
		{56, 37: 723, 241: 724, 722},
		// 395
		{726},
		{3: 359, 5: 410, 412, 400, 13: 413, 46: 445, 401, 424, 406, 409, 443, 405, 407, 418, 436, 434, 442, 439, 419, 420, 431, 402, 427, 438, 403, 421, 425, 422, 428, 408, 417, 423, 437, 415, 426, 433, 432, 429, 430, 435, 404, 416, 392, 371, 372, 374, 393, 444, 382, 375, 395, 379, 387, 386, 381, 396, 390, 383, 380, 414, 388, 399, 385, 384, 373, 377, 389, 394, 376, 391, 441, 440, 378, 397, 398, 725},
		{55},
		{57, 5: 470, 487, 12: 466, 14: 469, 485, 17: 483, 486, 468, 467, 474, 473, 482, 471, 475, 476, 472, 481, 484, 480, 32: 478, 117: 479, 477},
		{12: 728, 47, 729, 121: 730, 124: 731, 167: 732, 727},
		// 400
		{13: 58},
		{13: 54, 122: 54, 125: 54},
		{13: 53, 122: 53, 125: 53},
		{13: 52, 122: 52, 125: 52},
		{4: 734, 47: 581, 141: 733},
		// 405
		{13: 46, 122: 46, 125: 46},
		{4: 738, 147: 737},
		{47: 581, 141: 735},
		{147: 736},
		{13: 48, 122: 48, 125: 48},
		// 410
		{13: 51, 122: 51, 125: 51},
		{47: 581, 141: 740, 147: 739},
		{13: 50, 122: 50, 125: 50},
		{147: 741},
		{13: 49, 122: 49, 125: 49},
		// 415
		{13: 59},
		{126: 744},
		{77, 12: 77, 77, 77, 37: 77, 119: 77, 121: 77, 124: 77},
		{126: 747, 746},
		{79, 12: 79, 79, 79, 37: 79, 119: 79, 121: 79, 124: 79},
		// 420
		{75, 12: 75, 75, 75, 37: 75, 119: 75, 121: 75, 124: 75},
		{86, 86, 86, 4: 86, 8: 86, 86, 86, 16: 86, 31: 86, 33: 86, 86, 86, 86, 119: 86, 86},
		{94, 94, 94, 4: 94, 8: 94, 94, 94, 16: 94, 31: 94, 33: 94, 94, 94, 94, 119: 94, 94},
		{13: 367, 123: 708, 139: 754},
		{13: 367, 123: 708, 139: 753},
		// 425
		{90, 90, 90, 4: 90, 8: 90, 90, 90, 16: 90, 31: 90, 33: 90, 90, 90, 90, 119: 90, 90},
		{92, 92, 92, 4: 92, 8: 92, 92, 92, 16: 92, 31: 92, 33: 92, 92, 92, 92, 119: 92, 92},
		{95, 95, 95, 4: 95, 8: 95, 95, 95, 16: 95, 31: 95, 33: 95, 95, 95, 95, 119: 95, 95},
		{97, 97, 97, 4: 97, 8: 97, 97, 97, 16: 97, 31: 97, 33: 97, 97, 97, 97, 119: 97, 97},
		{13: 367, 123: 708, 139: 759},
		// 430
		{13: 367, 123: 708, 139: 758},
		{93, 93, 93, 4: 93, 8: 93, 93, 93, 16: 93, 31: 93, 33: 93, 93, 93, 93, 119: 93, 93},
		{96, 96, 96, 4: 96, 8: 96, 96, 96, 16: 96, 31: 96, 33: 96, 96, 96, 96, 119: 96, 96},
		{13: 367, 123: 772},
		{13: 367, 123: 771},
		// 435
		{15: 540, 128: 539, 176: 537, 179: 767},
		{15: 540, 128: 539, 176: 537, 179: 764},
		{12: 728, 14: 729, 121: 730, 47, 124: 731, 167: 732, 765},
		{122: 766},
		{13: 84},
		// 440
		{12: 728, 14: 729, 121: 730, 47, 124: 731, 47, 167: 732, 768},
		{122: 770, 125: 769},
		{13: 85},
		{13: 83},
		{87, 87, 87, 4: 87, 87, 8: 87, 87, 87, 16: 87, 31: 87, 33: 87, 87, 87, 87, 119: 87, 87, 129: 87, 87, 132: 87, 87, 148: 87, 153: 87},
		// 445
		{88, 88, 88, 4: 88, 88, 8: 88, 88, 88, 16: 88, 31: 88, 33: 88, 88, 88, 88, 119: 88, 88, 129: 88, 88, 132: 88, 88, 148: 88, 153: 88},
		{31: 42, 33: 42, 42, 42, 42},
		{131: 781, 135: 780, 178: 779, 204: 778},
		{131: 289, 135: 289},
		{3: 359, 46: 358, 138: 777},
		// 450
		{131: 288, 135: 288},
		{1: 292, 292, 4: 810},
		{1: 287, 287, 4: 287, 11: 287},
		{1: 72, 72, 359, 72, 11: 72, 46: 535, 48: 72, 134: 72, 143: 808},
		{3: 359, 46: 535, 143: 782, 156: 72},
		// 455
		{156: 783},
		{3: 359, 46: 785, 233: 784},
		{17: 786},
		{1: 283, 283, 4: 283, 11: 283, 17: 283, 48: 283, 134: 283},
		{3: 359, 46: 785, 233: 787},
		// 460
		{1: 281, 281, 4: 281, 11: 281, 48: 791, 134: 281, 215: 788, 790, 789},
		{1: 284, 284, 4: 284, 11: 284},
		{1: 278, 278, 4: 278, 11: 278, 134: 797, 268: 796, 795},
		{1: 280, 280, 4: 280, 11: 280, 134: 280},
		{13: 792},
		// 465
		{65, 259: 793},
		{794},
		{1: 279, 279, 4: 279, 11: 279, 134: 279},
		{1: 282, 282, 4: 282, 11: 282},
		{1: 277, 277, 4: 277, 11: 277},
		// 470
		{13: 798},
		{3: 359, 46: 445, 83: 392, 802, 801, 181: 800, 223: 799},
		{805, 4: 806},
		{275, 4: 275},
		{145: 803},
		// 475
		{140: 699},
		{3: 359, 5: 410, 412, 400, 13: 413, 46: 445, 401, 424, 406, 409, 443, 405, 407, 418, 436, 434, 442, 439, 419, 420, 431, 402, 427, 438, 403, 421, 425, 422, 428, 408, 417, 423, 437, 415, 426, 433, 432, 429, 430, 435, 404, 416, 392, 371, 372, 374, 393, 444, 382, 375, 395, 379, 387, 386, 381, 396, 390, 383, 380, 414, 388, 399, 385, 384, 373, 377, 389, 394, 376, 391, 441, 440, 378, 397, 398, 804},
		{273, 4: 273, 470, 487, 12: 466, 14: 469, 485, 17: 483, 486, 468, 467, 474, 473, 482, 471, 475, 476, 472, 481, 484, 480, 32: 478, 117: 479, 477},
		{1: 276, 276, 4: 276, 11: 276},
		{3: 359, 46: 445, 83: 392, 802, 801, 181: 807},
		// 480
		{274, 4: 274},
		{1: 281, 281, 4: 281, 11: 281, 48: 791, 134: 281, 215: 809, 790, 789},
		{1: 285, 285, 4: 285, 11: 285},
		{131: 781, 135: 780, 178: 811},
		{1: 286, 286, 4: 286, 11: 286},
		// 485
		{1: 293, 293},
		{3: 14, 161: 816, 207: 821},
		{3: 14, 161: 816, 207: 815},
		{3: 359, 46: 818},
		{51: 817},
		// 490
		{3: 13},
		{120: 819},
		{3: 359, 46: 358, 138: 820},
		{1: 294, 294},
		{3: 359, 46: 358, 138: 822},
		// 495
		{1: 295, 295},
		{3: 359, 46: 445, 83: 392, 850, 282: 849},
		{131: 290, 135: 290, 210: 776, 775, 841},
		{3: 359, 46: 445, 83: 392, 828, 205: 827, 252: 826},
		{4: 834, 11: 524, 158: 833},
		// 500
		{4: 18, 11: 18},
		{169: 829},
		{13: 830},
		{3: 359, 46: 445, 83: 392, 802, 801, 181: 800, 223: 831},
		{832, 4: 806},
		// 505
		{4: 16, 11: 16},
		{1: 40, 40, 8: 40, 40, 40, 16: 40, 119: 370, 144: 836},
		{3: 359, 46: 445, 83: 392, 828, 205: 835},
		{4: 17, 11: 17},
		{1: 38, 38, 8: 38, 38, 38, 16: 559, 159: 837},
		// 510
		{1: 30, 30, 8: 30, 30, 570, 160: 838},
		{1: 28, 28, 8: 28, 573, 165: 839},
		{1: 26, 26, 8: 577, 163: 840},
		{1: 19, 19},
		{131: 781, 135: 780, 178: 779, 204: 842},
		// 515
		{4: 810, 11: 524, 158: 843},
		{1: 40, 40, 8: 40, 40, 40, 16: 40, 119: 370, 144: 844},
		{1: 38, 38, 8: 38, 38, 38, 16: 559, 159: 845},
		{1: 30, 30, 8: 30, 30, 570, 160: 846},
		{1: 28, 28, 8: 28, 573, 165: 847},
		// 520
		{1: 26, 26, 8: 577, 163: 848},
		{1: 291, 291},
		{4: 852, 11: 524, 158: 851},
		{4: 301, 11: 301},
		{1: 40, 40, 8: 40, 40, 40, 16: 40, 119: 370, 144: 854},
		// 525
		{3: 359, 46: 445, 83: 392, 853},
		{4: 300, 11: 300},
		{1: 38, 38, 8: 38, 38, 38, 16: 559, 159: 855},
		{1: 30, 30, 8: 30, 30, 570, 160: 856},
		{1: 28, 28, 8: 28, 573, 165: 857},
		// 530
		{1: 26, 26, 8: 577, 163: 858},
		{1: 302, 302},
		{3: 12, 161: 864, 208: 876},
		{162: 862},
		{162: 303},
		// 535
		{120: 12, 161: 864, 208: 863},
		{120: 867},
		{6: 865},
		{51: 866},
		{3: 11, 120: 11},
		// 540
		{3: 359, 46: 358, 138: 868},
		{3: 359, 46: 358, 138: 869},
		{13: 870},
		{3: 359, 46: 701, 182: 872, 270: 871},
		{873, 4: 874},
		// 545
		{2, 4: 2},
		{1: 305, 305},
		{3: 359, 46: 701, 182: 875},
		{1, 4: 1},
		{3: 359, 46: 358, 138: 877},
		// 550
		{1: 306, 306},
		{1: 309, 309, 31: 45, 33: 355, 45, 351, 45, 142: 354, 150: 353, 348, 342, 184: 345, 332, 188: 346, 333, 347, 334, 335, 194: 336, 349, 337, 338, 199: 331, 350, 339, 209: 340, 224: 352, 341, 228: 879, 343, 356, 344},
		{1: 324, 324},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}
	
func yyParse(yylex yyLexer) int {
	const yyError = 295

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)


	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() { 
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError])+yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x])+yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 2: {
		yyVAL.item = yyS[yypt-0].statement
	}
	case 23: {
		yyVAL.item = ast.IndexKeyTypeNone
	}
	case 24: {
		yyVAL.item = ast.IndexKeyTypeUnique
	}
	case 28: {
		yyVAL.item = model.CIStr{}
	}
	case 30: {
		yyVAL.item = model.NewCIStr(yyS[yypt-0].ident)
	}
	case 31: {
		yyVAL.item = model.NewCIStr(yyS[yypt-0].ident)
	}
	case 211: {
		yyVAL.ident = ""
	}
	case 218: {
		yyVAL.item = &ast.MatchClauseList{Matches: []*ast.MatchClause{yyS[yypt-0].item.(*ast.MatchClause)}}
	}
	case 219: {
		ml := yyS[yypt-2].item.(*ast.MatchClauseList)
		ml.Matches = append(ml.Matches, yyS[yypt-0].item.(*ast.MatchClause))
		yyVAL.item = ml
	}
	case 220: {
		yyVAL.item = &ast.MatchClause{
			Graph: yyS[yypt-1].item.(*ast.GraphName),
			Paths: yyS[yypt-2].item.([]*ast.PathPattern),
		}
	}
	case 221: {
		yyVAL.item = yyS[yypt-0].ident
	}
	case 222: {
		yyVAL.item = (*ast.GraphName)(nil)
	}
	case 225: {
		yyVAL.item = []*ast.PathPattern{yyS[yypt-0].item.(*ast.PathPattern)}
	}
	case 226: {
		yyVAL.item = yyS[yypt-1].item.([]*ast.PathPattern)
	}
	case 227: {
		yyVAL.item = yyS[yypt-0].item.(*ast.PathPattern)
	}
	case 228: {
		yyVAL.item = append(yyS[yypt-2].item.([]*ast.PathPattern), yyS[yypt-0].item.(*ast.PathPattern))
	}
	case 229: {
		pp := yyS[yypt-0].item.(*ast.PathPattern)
		pp.Tp = ast.PathPatternSimple
		yyVAL.item = pp
	}
	case 230: {
		pp := yyS[yypt-0].item.(*ast.PathPattern)
		pp.Tp = ast.PathPatternAny
		yyVAL.item = pp
	}
	case 231: {
		pp := yyS[yypt-0].item.(*ast.PathPattern)
		pp.Tp = ast.PathPatternAnyShortest
		yyVAL.item = pp
	}
	case 232: {
		pp := yyS[yypt-0].item.(*ast.PathPattern)
		pp.Tp = ast.PathPatternAllShortest
		yyVAL.item = pp
	}
	case 233: {
		pp := yyS[yypt-0].item.(*ast.PathPattern)
		pp.Tp = ast.PathPatternTopKShortest
		pp.TopK = yyS[yypt-2].item.(uint64)
		yyVAL.item = pp
	}
	case 234: {
		pp := yyS[yypt-0].item.(*ast.PathPattern)
		pp.Tp = ast.PathPatternAnyCheapest
		yyVAL.item = pp
	}
	case 235: {
		pp := yyS[yypt-0].item.(*ast.PathPattern)
		pp.Tp = ast.PathPatternAllCheapest
		yyVAL.item = pp
	}
	case 236: {
		pp := yyS[yypt-0].item.(*ast.PathPattern)
		pp.Tp = ast.PathPatternTopKCheapest
		pp.TopK = yyS[yypt-2].item.(uint64)
		yyVAL.item = pp
	}
	case 237: {
		pp := yyS[yypt-0].item.(*ast.PathPattern)
		pp.Tp = ast.PathPatternAll
		yyVAL.item = pp
	}
	case 238: {
		yyVAL.item = &ast.PathPattern{Vertices: []*ast.VertexPattern{yyS[yypt-0].item.(*ast.VertexPattern)}}
	}
	case 239: {
		pp := yyS[yypt-2].item.(*ast.PathPattern)
		pp.Vertices = append(pp.Vertices, yyS[yypt-0].item.(*ast.VertexPattern))
		pp.Connections = append(pp.Connections, yyS[yypt-1].item.(*ast.ReachabilityPathExpr))
		yyVAL.item = pp
	}
	case 240: {
		pp := yyS[yypt-2].item.(*ast.PathPattern)
		pp.Vertices = append(pp.Vertices, yyS[yypt-0].item.(*ast.VertexPattern))
		pp.Connections = append(pp.Connections, yyS[yypt-1].item.(*ast.EdgePattern))
		yyVAL.item = pp
	}
	case 241: {
		yyVAL.item = &ast.PathPattern{
			Vertices:    []*ast.VertexPattern{yyS[yypt-2].item.(*ast.VertexPattern), yyS[yypt-0].item.(*ast.VertexPattern)},
			Connections: []ast.VertexPairConnection{yyS[yypt-1].item.(*ast.QuantifiedPathExpr)},
		}
	}
	case 242: {
		yyVAL.item = &ast.ReachabilityPathExpr{
			Labels:     yyS[yypt-2].item.([]model.CIStr),
			Direction:  ast.EdgeDirectionOutgoing,
			Quantifier: yyS[yypt-1].item.(*ast.PatternQuantifier),
		}
	}
	case 243: {
		yyVAL.item = &ast.ReachabilityPathExpr{
			Labels:     yyS[yypt-2].item.([]model.CIStr),
			Direction:  ast.EdgeDirectionIncoming,
			Quantifier: yyS[yypt-1].item.(*ast.PatternQuantifier),
		}
	}
	case 244: {
		yyVAL.item = &ast.ReachabilityPathExpr{
			Labels:     yyS[yypt-2].item.([]model.CIStr),
			Direction:  ast.EdgeDirectionAnyDirected,
			Quantifier: yyS[yypt-1].item.(*ast.PatternQuantifier),
		}
	}
	case 245: {
		yyVAL.item = &ast.VertexPattern{Variable: yyS[yypt-1].item.(*ast.VariableSpec)}
	}
	case 246: {
		yyVAL.item = (*ast.VertexPattern)(nil)
	}
	case 248: {
		yyVAL.item = &ast.EdgePattern{
			Variable:  yyS[yypt-1].item.(*ast.VariableSpec),
			Direction: ast.EdgeDirectionOutgoing,
		}
	}
	case 249: {
		yyVAL.item = &ast.EdgePattern{Direction: ast.EdgeDirectionOutgoing}
	}
	case 250: {
		yyVAL.item = &ast.EdgePattern{
			Variable:  yyS[yypt-1].item.(*ast.VariableSpec),
			Direction: ast.EdgeDirectionIncoming,
		}
	}
	case 251: {
		yyVAL.item = &ast.EdgePattern{Direction: ast.EdgeDirectionIncoming}
	}
	case 252: {
		yyVAL.item = &ast.EdgePattern{
			Variable:  yyS[yypt-1].item.(*ast.VariableSpec),
			Direction: ast.EdgeDirectionAnyDirected,
		}
	}
	case 253: {
		yyVAL.item = &ast.EdgePattern{Direction: ast.EdgeDirectionAnyDirected}
	}
	case 254: {
		v := &ast.VariableSpec{
			Name:   yyS[yypt-1].item.(model.CIStr),
			Labels: yyS[yypt-0].item.([]model.CIStr),
		}
		if v.Name.L == "" {
			v.Anonymous = true
		}
		yyVAL.item = v
	}
	case 255: {
		yyVAL.item = model.CIStr{}
	}
	case 256: {
		yyVAL.item = model.NewCIStr(yyS[yypt-0].ident)
	}
	case 257: {
		yyVAL.item = yyS[yypt-0].item.([]model.CIStr)
	}
	case 258: {
		yyVAL.item = []model.CIStr(nil)
	}
	case 266: {
		yyVAL.item = []model.CIStr{yyS[yypt-0].ident.(model.CIStr)}
	}
	case 267: {
		yyVAL.item = append(yyS[yypt-2].item.([]model.CIStr), yyS[yypt-0].ident.(model.CIStr))
	}
	case 268: {
		yyVAL.item = &ast.QuantifiedPathExpr{
			Edge:       yyS[yypt-1].item.(*ast.EdgePattern),
			Quantifier: yyS[yypt-0].item.(*ast.PatternQuantifier),
		}
	}
	case 269: {
		q := &ast.QuantifiedPathExpr{
			Edge:        yyS[yypt-5].item.(*ast.EdgePattern),
			Quantifier:  yyS[yypt-0].item.(*ast.PatternQuantifier),
			Source:      yyS[yypt-6].item.(*ast.VertexPattern),
			Destination: yyS[yypt-4].item.(*ast.VertexPattern),
		}
		if yyS[yypt-3].item != nil {
			q.Where = yyS[yypt-3].item.(ast.ExprNode)
		}
		if yyS[yypt-2].item != nil {
			q.Cost = yyS[yypt-2].item.(ast.ExprNode)
		}
		yyVAL.item = q
	}
	case 270: {
		yyVAL.item = yyS[yypt-0].expr.(ast.ExprNode)
	}
	case 271: {
		yyVAL.item = nil
	}
	case 273: {
		yyVAL.item = &ast.PatternQuantifier{Tp: ast.PatternQuantifierZeroOrMore, M: 18446744073709551615}
	}
	case 274: {
		yyVAL.item = &ast.PatternQuantifier{Tp: ast.PatternQuantifierOneOrMore, N: 1, M: 18446744073709551615}
	}
	case 275: {
		yyVAL.item = &ast.PatternQuantifier{Tp: ast.PatternQuantifierOptional, N: 0, M: 1}
	}
	case 276: {
		yyVAL.item = &ast.PatternQuantifier{Tp: ast.PatternQuantifierExactlyN, N: yyS[yypt-1].item.(uint64), M: yyS[yypt-1].item.(uint64)}
	}
	case 277: {
		yyVAL.item = &ast.PatternQuantifier{Tp: ast.PatternQuantifierNOrMore, N: yyS[yypt-2].item.(uint64), M: 18446744073709551615}
	}
	case 278: {
		yyVAL.item = &ast.PatternQuantifier{Tp: ast.PatternQuantifierBetweenNAndM, N: yyS[yypt-3].item.(uint64), M: yyS[yypt-1].item.(uint64)}
	}
	case 279: {
		yyVAL.item = &ast.PatternQuantifier{Tp: ast.PatternQuantifierBetweenZeroAndM, N: 0, M: yyS[yypt-1].item.(uint64)}
	}
	case 280: {
		yyVAL.item = (*ast.PatternQuantifier)(nil)
	}
	case 284: {
		yyVAL.item = []*ast.PathPatternMacro{yyS[yypt-0].item.(*ast.PathPatternMacro)}
	}
	case 285: {
		yyVAL.item = append(yyS[yypt-1].item.([]*ast.PathPatternMacro), yyS[yypt-0].item.(*ast.PathPatternMacro))
	}
	case 286: {
		p := &ast.PathPatternMacro{
			Name: model.NewCIStr(yyS[yypt-3].ident),
			Path: yyS[yypt-1].item.(*ast.PathPattern),
		}
		if yyS[yypt-0].item != nil {
			p.Where = yyS[yypt-0].item.(ast.ExprNode)
		}
		yyVAL.item = p
	}
	case 295: {
		yyVAL.item = false
	}
	case 296: {
		yyVAL.item = true
	}
	case 297: {
		yyVAL.item = nil
	}
	case 313: {
		yyVAL.item = false
	}
	case 314: {
		yyVAL.item = true
	}
	case 315: {
		yyVAL.item = false
	}
	case 316: {
		yyVAL.item = true
	}
	case 322: {
		yyVAL.ident = model.NewCIStr(yyS[yypt-0].ident)
	}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}




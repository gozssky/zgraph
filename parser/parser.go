// Code generated by goyacc - DO NOT EDIT.


// Copyright 2013 The ql Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSES/QL-LICENSE file.

// Copyright 2022 zGraph Authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Initial yacc source generated by ebnf2y[1]
// at 2013-10-04 23:10:47.861401015 +0200 CEST
//
//  $ ebnf2y -o ql.y -oe ql.ebnf -start StatementList -pkg ql -p _
//
//   [1]: http://github.com/cznic/ebnf2y

// The parser implements the PGQL specification
//
// - https://pgql-lang.org/spec/1.5/
//

package parser

import __yyfmt__ "fmt"


import (
	"time"

	"github.com/vescale/zgraph/parser/ast"
	"github.com/vescale/zgraph/parser/model"
	"github.com/vescale/zgraph/parser/opcode"
)


type yySymType struct {
	yys    int
	offset int // offset
	item interface{}
	ident string
	expr ast.ExprNode
	statement ast.StmtNode
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault           = 57491
	yyEofCode           = 57344
	abs                 = 57455
	all                 = 57416
	allProp             = 57484
	and                 = 57395
	andand              = 57351
	andnot              = 57464
	any                 = 57417
	array_agg           = 57430
	as                  = 57353
	asc                 = 57354
	assignmentEq        = 57465
	avg                 = 57431
	bLeftArrow          = 57480
	bRightArrow         = 57481
	begin               = 57404
	between             = 57396
	bigIntType          = 57355
	booleanType         = 57406
	bracketDash         = 57479
	by                  = 57356
	caseKwd             = 57399
	cast                = 57441
	ceil                = 57456
	ceiling             = 57457
	cheapest            = 57419
	commit              = 57405
	cost                = 57421
	count               = 57432
	create              = 57357
	dashBracket         = 57478
	dashSlash           = 57476
	dateType            = 57409
	day                 = 57410
	decLit              = 57462
	defaultKwd          = 57358
	deleteKwd           = 57359
	desc                = 57360
	distinct            = 57437
	div                 = 57488
	doubleAtIdentifier  = 57349
	doubleType          = 57361
	drop                = 57362
	edge                = 57363
	element_number      = 57458
	elseKwd             = 57403
	empty               = 57485
	end                 = 57400
	eq                  = 57466
	yyErrCode           = 57345
	exists              = 57364
	explain             = 57407
	extract             = 57438
	falseKwd            = 57365
	floatType           = 57366
	floor               = 57459
	forkKwd             = 57429
	from                = 57367
	ge                  = 57467
	graph               = 57415
	group               = 57368
	has_label           = 57460
	having              = 57369
	hour                = 57424
	id                  = 57461
	identifier          = 57346
	ifKwd               = 57370
	in                  = 57446
	in_degree           = 57450
	index               = 57371
	insert              = 57372
	intLit              = 57463
	intType             = 57375
	integerType         = 57373
	interval            = 57423
	into                = 57374
	invalid             = 57350
	is                  = 57376
	java_regexp_like    = 57451
	jss                 = 57469
	juss                = 57470
	label               = 57452
	labels              = 57397
	le                  = 57468
	leftArrow           = 57475
	limit               = 57377
	listagg             = 57433
	long                = 57442
	lower               = 57448
	lowerThanOn         = 57486
	match               = 57378
	match_number        = 57453
	max                 = 57434
	min                 = 57435
	minute              = 57425
	mod                 = 57489
	month               = 57426
	neg                 = 57490
	neq                 = 57471
	neqSynonym          = 57472
	not                 = 57379
	null                = 57380
	nulleq              = 57473
	offset              = 57414
	on                  = 57381
	or                  = 57394
	order               = 57382
	out_degree          = 57454
	paramMarker         = 57474
	path                = 57422
	pipes               = 57352
	pipesAsOr           = 57487
	precisionType       = 57383
	prefix              = 57447
	primary             = 57384
	properties          = 57398
	rollback            = 57413
	sLeftArrow          = 57482
	sRightArrow         = 57483
	second              = 57427
	selectKwd           = 57385
	set                 = 57386
	shortest            = 57418
	singleAtIdentifier  = 57348
	slashDash           = 57477
	stringKwd           = 57443
	stringLit           = 57347
	substring           = 57428
	sum                 = 57436
	then                = 57401
	timeType            = 57412
	timestampType       = 57411
	timezone_hour       = 57439
	timezone_minute     = 57440
	top                 = 57420
	trueKwd             = 57387
	unique              = 57388
	update              = 57389
	uppper              = 57449
	use                 = 57390
	vertex              = 57391
	when                = 57402
	where               = 57392
	with                = 57444
	xor                 = 57393
	yearType            = 57408
	zone                = 57445

	yyMaxDepth = 200
	yyTabOfs   = -309
)

var (

	yyPrec = map[int]int{
		empty: 0,
		insert: 1,
		'(': 2,
		')': 3,
		lowerThanOn: 4,
		on: 5,
		assignmentEq: 6,
		pipes: 7,
		or: 7,
		pipesAsOr: 7,
		xor: 8,
		andand: 9,
		and: 9,
		between: 10,
		eq: 11,
		ge: 11,
		le: 11,
		neq: 11,
		neqSynonym: 11,
		'>': 11,
		'<': 11,
		is: 11,
		in: 11,
		'|': 12,
		'&': 13,
		'-': 14,
		'+': 14,
		'*': 15,
		'/': 15,
		'%': 15,
		div: 15,
		mod: 15,
		'^': 16,
		'~': 17,
		neg: 17,
		not: 18,
		',': 19,
		}

	yyXLAT = map[int]int{
		    41:   0, // ')' (215x)
		 57344:   1, // $end (207x)
		    59:   2, // ';' (206x)
		    44:   3, // ',' (185x)
		    45:   4, // '-' (183x)
		 57379:   5, // not (176x)
		 57377:   6, // limit (151x)
		 57382:   7, // order (146x)
		 57369:   8, // having (141x)
		 57367:   9, // from (139x)
		    42:  10, // '*' (134x)
		    43:  11, // '+' (132x)
		    40:  12, // '(' (131x)
		 57376:  13, // is (126x)
		 57368:  14, // group (125x)
		 57395:  15, // and (120x)
		 57446:  16, // in (119x)
		    37:  17, // '%' (118x)
		    47:  18, // '/' (118x)
		    60:  19, // '<' (118x)
		    62:  20, // '>' (118x)
		 57466:  21, // eq (118x)
		 57467:  22, // ge (118x)
		 57468:  23, // le (118x)
		 57472:  24, // neqSynonym (118x)
		 57394:  25, // or (118x)
		 57352:  26, // pipes (118x)
		 57385:  27, // selectKwd (118x)
		 57393:  28, // xor (118x)
		 57422:  29, // path (116x)
		 57359:  30, // deleteKwd (114x)
		 57372:  31, // insert (114x)
		 57389:  32, // update (114x)
		 57421:  33, // cost (103x)
		 57400:  34, // end (99x)
		 57402:  35, // when (98x)
		 57354:  36, // asc (97x)
		 57360:  37, // desc (97x)
		 57403:  38, // elseKwd (96x)
		 57353:  39, // as (95x)
		 57346:  40, // identifier (94x)
		 57429:  41, // forkKwd (93x)
		 57401:  42, // then (92x)
		 57543:  43, // Identifier (78x)
		 57463:  44, // intLit (63x)
		 57347:  45, // stringLit (63x)
		 57397:  46, // labels (62x)
		 57412:  47, // timeType (59x)
		 57364:  48, // exists (58x)
		 57409:  49, // dateType (57x)
		 57411:  50, // timestampType (57x)
		    63:  51, // '?' (56x)
		 57455:  52, // abs (56x)
		 57430:  53, // array_agg (56x)
		 57431:  54, // avg (56x)
		 57399:  55, // caseKwd (56x)
		 57441:  56, // cast (56x)
		 57456:  57, // ceil (56x)
		 57457:  58, // ceiling (56x)
		 57432:  59, // count (56x)
		 57462:  60, // decLit (56x)
		 57458:  61, // element_number (56x)
		 57438:  62, // extract (56x)
		 57365:  63, // falseKwd (56x)
		 57459:  64, // floor (56x)
		 57460:  65, // has_label (56x)
		 57461:  66, // id (56x)
		 57450:  67, // in_degree (56x)
		 57423:  68, // interval (56x)
		 57451:  69, // java_regexp_like (56x)
		 57452:  70, // label (56x)
		 57433:  71, // listagg (56x)
		 57448:  72, // lower (56x)
		 57453:  73, // match_number (56x)
		 57434:  74, // max (56x)
		 57435:  75, // min (56x)
		 57454:  76, // out_degree (56x)
		 57428:  77, // substring (56x)
		 57436:  78, // sum (56x)
		 57387:  79, // trueKwd (56x)
		 57449:  80, // uppper (56x)
		 57615:  81, // VariableName (54x)
		 57617:  82, // VariableReference (54x)
		 57584:  83, // PropertyAccess (50x)
		 57606:  84, // StringLiteral (49x)
		 57607:  85, // Subquery (48x)
		 57492:  86, // Aggregation (47x)
		 57495:  87, // ArithmeticExpression (47x)
		 57497:  88, // BindVariable (47x)
		 57498:  89, // BooleanLiteral (47x)
		 57499:  90, // BracketedValueExpression (47x)
		 57502:  91, // CaseExpression (47x)
		 57503:  92, // CastSpecification (47x)
		 57504:  93, // CharacterSubstring (47x)
		 57512:  94, // DateLiteral (47x)
		 57522:  95, // ExistsPredicate (47x)
		 57526:  96, // ExtractFunction (47x)
		 57531:  97, // FunctionInvocation (47x)
		 57532:  98, // FunctionName (47x)
		 57546:  99, // InPredicate (47x)
		 57551: 100, // IntervalLiteral (47x)
		 57554: 101, // IsNotNullPredicate (47x)
		 57555: 102, // IsNullPredicate (47x)
		 57567: 103, // Literal (47x)
		 57568: 104, // LogicalExpression (47x)
		 57571: 105, // NotInPredicate (47x)
		 57572: 106, // NumericLiteral (47x)
		 57591: 107, // RelationalExpression (47x)
		 57594: 108, // ScalarSubquery (47x)
		 57595: 109, // SearchedCase (47x)
		 57600: 110, // SimpleCase (47x)
		 57605: 111, // StringConcat (47x)
		 57608: 112, // TimeLiteral (47x)
		 57609: 113, // TimestampLiteral (47x)
		 57612: 114, // ValueExpression (47x)
		 57392: 115, // where (40x)
		 57381: 116, // on (22x)
		 57474: 117, // paramMarker (18x)
		 57477: 118, // slashDash (17x)
		 57620: 119, // VertexPattern (17x)
		   123: 120, // '{' (15x)
		 57483: 121, // sRightArrow (15x)
		 57479: 122, // bracketDash (13x)
		 57481: 123, // bRightArrow (11x)
		    58: 124, // ':' (9x)
		 57480: 125, // bLeftArrow (9x)
		 57478: 126, // dashBracket (9x)
		 57363: 127, // edge (9x)
		 57469: 128, // jss (9x)
		 57475: 129, // leftArrow (9x)
		 57398: 130, // properties (9x)
		 57391: 131, // vertex (9x)
		 57437: 132, // distinct (8x)
		 57515: 133, // DistinctOpt (8x)
		 57614: 134, // VariableLengthPathPattern (8x)
		 57563: 135, // LengthNum (7x)
		    46: 136, // '.' (6x)
		   124: 137, // '|' (6x)
		 57577: 138, // PathPatternMacro (6x)
		 57616: 139, // VariableNameOpt (6x)
		 57625: 140, // WhereClauseOpt (6x)
		   125: 141, // '}' (5x)
		 57476: 142, // dashSlash (5x)
		 57523: 143, // ExpAsVar (5x)
		 57537: 144, // GraphName (5x)
		 57556: 145, // LabelName (5x)
		 57578: 146, // PathPatternMacroList (5x)
		 57579: 147, // PathPatternMacroOpt (5x)
		 57599: 148, // SelectStmt (5x)
		 57482: 149, // sLeftArrow (5x)
		    61: 150, // '=' (4x)
		 57416: 151, // all (4x)
		 57417: 152, // any (4x)
		 57396: 153, // between (4x)
		 57419: 154, // cheapest (4x)
		 57530: 155, // FromClause (4x)
		 57541: 156, // GroupByClauseOpt (4x)
		 57542: 157, // HavingClauseOpt (4x)
		 57370: 158, // ifKwd (4x)
		 57371: 159, // index (4x)
		 57564: 160, // LimitClauseOpt (4x)
		 57414: 161, // offset (4x)
		 57574: 162, // OrderByClauseOpt (4x)
		 57575: 163, // PathPattern (4x)
		 57580: 164, // PatternQuantifier (4x)
		 57581: 165, // PatternQuantifierOpt (4x)
		 57386: 166, // set (4x)
		 57418: 167, // shortest (4x)
		 57601: 168, // SimplePathPattern (4x)
		 57420: 169, // top (4x)
		 57619: 170, // VariableSpec (4x)
		 57623: 171, // WhenClause (4x)
		 57500: 172, // ByItem (3x)
		 57505: 173, // ColonOrIsKeyword (3x)
		 57518: 174, // EdgePattern (3x)
		 57533: 175, // GraphElementInsertion (3x)
		 57558: 176, // LabelPredicate (3x)
		 57565: 177, // LimitOption (3x)
		 57585: 178, // PropertyAssignment (3x)
		 57587: 179, // PropertyName (3x)
		 57484: 180, // allProp (2x)
		 57404: 181, // begin (2x)
		 57496: 182, // BeginStmt (2x)
		 57356: 183, // by (2x)
		 57501: 184, // ByList (2x)
		 57405: 185, // commit (2x)
		 57506: 186, // CommitStmt (2x)
		 57357: 187, // create (2x)
		 57509: 188, // CreateGraphStmt (2x)
		 57510: 189, // CreateIndexStmt (2x)
		 57410: 190, // day (2x)
		 57514: 191, // DeleteStmt (2x)
		 57362: 192, // drop (2x)
		 57516: 193, // DropGraphStmt (2x)
		 57517: 194, // DropIndexStmt (2x)
		 57519: 195, // ElseClauseOpt (2x)
		 57520: 196, // EmptyStmt (2x)
		 57407: 197, // explain (2x)
		 57524: 198, // ExplainStmt (2x)
		 57415: 199, // graph (2x)
		 57534: 200, // GraphElementInsertionList (2x)
		 57535: 201, // GraphElementUpdate (2x)
		 57424: 202, // hour (2x)
		 57544: 203, // IfExists (2x)
		 57545: 204, // IfNotExists (2x)
		 57550: 205, // InsertStmt (2x)
		 57374: 206, // into (2x)
		 57552: 207, // IntoClause (2x)
		 57553: 208, // IntoClauseOpt (2x)
		 57547: 209, // InValueList (2x)
		 57557: 210, // LabelNameList (2x)
		 57562: 211, // LabelsAndProperties (2x)
		 57560: 212, // LabelSpecification (2x)
		 57561: 213, // LabelSpecificationOpt (2x)
		 57378: 214, // match (2x)
		 57569: 215, // MatchClause (2x)
		 57425: 216, // minute (2x)
		 57426: 217, // month (2x)
		 57380: 218, // null (2x)
		 57586: 219, // PropertyAssignmentList (2x)
		 57413: 220, // rollback (2x)
		 57592: 221, // RollbackStmt (2x)
		 57427: 222, // second (2x)
		 57596: 223, // SelectClause (2x)
		 57597: 224, // SelectEelement (2x)
		 57603: 225, // Statement (2x)
		 57610: 226, // UpdateStmt (2x)
		 57390: 227, // use (2x)
		 57611: 228, // UseStmt (2x)
		 57621: 229, // VertexPatternOpt (2x)
		 57622: 230, // VertexReference (2x)
		 57624: 231, // WhenClauseList (2x)
		 57444: 232, // with (2x)
		 57408: 233, // yearType (2x)
		 57445: 234, // zone (2x)
		 57493: 235, // AllPropertiesPrefixOpt (1x)
		 57494: 236, // ArgumentList (1x)
		 57406: 237, // booleanType (1x)
		 57507: 238, // CostClause (1x)
		 57508: 239, // CostClauseOpt (1x)
		 57511: 240, // DataType (1x)
		 57513: 241, // DateTimeField (1x)
		 57361: 242, // doubleType (1x)
		 57521: 243, // Entry (1x)
		 57525: 244, // ExtractField (1x)
		 57527: 245, // FieldAsName (1x)
		 57528: 246, // FieldAsNameOpt (1x)
		 57366: 247, // floatType (1x)
		 57529: 248, // ForStringLengthOpt (1x)
		 57536: 249, // GraphElementUpdateList (1x)
		 57538: 250, // GraphOnClause (1x)
		 57539: 251, // GraphOnClauseOpt (1x)
		 57540: 252, // GraphPattern (1x)
		 57548: 253, // IndexKeyTypeOpt (1x)
		 57373: 254, // integerType (1x)
		 57375: 255, // intType (1x)
		 57559: 256, // LabelPredicateOpt (1x)
		 57566: 257, // ListaggSeparatorOpt (1x)
		 57442: 258, // long (1x)
		 57570: 259, // MatchClauseList (1x)
		 57573: 260, // Order (1x)
		 57576: 261, // PathPatternList (1x)
		 57447: 262, // prefix (1x)
		 57582: 263, // PropertiesSpecification (1x)
		 57583: 264, // PropertiesSpecificationOpt (1x)
		 57588: 265, // PropertyNameList (1x)
		 57589: 266, // QuantifiedPathExpr (1x)
		 57590: 267, // ReachabilityPathExpr (1x)
		 57593: 268, // RowsPerMatchOpt (1x)
		 57598: 269, // SelectElementList (1x)
		 57602: 270, // StartPosition (1x)
		 57604: 271, // StatementList (1x)
		 57443: 272, // stringKwd (1x)
		 57439: 273, // timezone_hour (1x)
		 57440: 274, // timezone_minute (1x)
		 57388: 275, // unique (1x)
		 57613: 276, // ValueExpressionList (1x)
		 57618: 277, // VariableReferenceList (1x)
		 57491: 278, // $default (0x)
		    38: 279, // '&' (0x)
		    94: 280, // '^' (0x)
		   126: 281, // '~' (0x)
		 57351: 282, // andand (0x)
		 57464: 283, // andnot (0x)
		 57465: 284, // assignmentEq (0x)
		 57355: 285, // bigIntType (0x)
		 57358: 286, // defaultKwd (0x)
		 57488: 287, // div (0x)
		 57349: 288, // doubleAtIdentifier (0x)
		 57485: 289, // empty (0x)
		 57345: 290, // error (0x)
		 57549: 291, // IndexName (0x)
		 57350: 292, // invalid (0x)
		 57470: 293, // juss (0x)
		 57486: 294, // lowerThanOn (0x)
		 57489: 295, // mod (0x)
		 57490: 296, // neg (0x)
		 57471: 297, // neq (0x)
		 57473: 298, // nulleq (0x)
		 57487: 299, // pipesAsOr (0x)
		 57383: 300, // precisionType (0x)
		 57384: 301, // primary (0x)
		 57348: 302, // singleAtIdentifier (0x)
	}

	yySymNames = []string{
		"')'",
		"$end",
		"';'",
		"','",
		"'-'",
		"not",
		"limit",
		"order",
		"having",
		"from",
		"'*'",
		"'+'",
		"'('",
		"is",
		"group",
		"and",
		"in",
		"'%'",
		"'/'",
		"'<'",
		"'>'",
		"eq",
		"ge",
		"le",
		"neqSynonym",
		"or",
		"pipes",
		"selectKwd",
		"xor",
		"path",
		"deleteKwd",
		"insert",
		"update",
		"cost",
		"end",
		"when",
		"asc",
		"desc",
		"elseKwd",
		"as",
		"identifier",
		"forkKwd",
		"then",
		"Identifier",
		"intLit",
		"stringLit",
		"labels",
		"timeType",
		"exists",
		"dateType",
		"timestampType",
		"'?'",
		"abs",
		"array_agg",
		"avg",
		"caseKwd",
		"cast",
		"ceil",
		"ceiling",
		"count",
		"decLit",
		"element_number",
		"extract",
		"falseKwd",
		"floor",
		"has_label",
		"id",
		"in_degree",
		"interval",
		"java_regexp_like",
		"label",
		"listagg",
		"lower",
		"match_number",
		"max",
		"min",
		"out_degree",
		"substring",
		"sum",
		"trueKwd",
		"uppper",
		"VariableName",
		"VariableReference",
		"PropertyAccess",
		"StringLiteral",
		"Subquery",
		"Aggregation",
		"ArithmeticExpression",
		"BindVariable",
		"BooleanLiteral",
		"BracketedValueExpression",
		"CaseExpression",
		"CastSpecification",
		"CharacterSubstring",
		"DateLiteral",
		"ExistsPredicate",
		"ExtractFunction",
		"FunctionInvocation",
		"FunctionName",
		"InPredicate",
		"IntervalLiteral",
		"IsNotNullPredicate",
		"IsNullPredicate",
		"Literal",
		"LogicalExpression",
		"NotInPredicate",
		"NumericLiteral",
		"RelationalExpression",
		"ScalarSubquery",
		"SearchedCase",
		"SimpleCase",
		"StringConcat",
		"TimeLiteral",
		"TimestampLiteral",
		"ValueExpression",
		"where",
		"on",
		"paramMarker",
		"slashDash",
		"VertexPattern",
		"'{'",
		"sRightArrow",
		"bracketDash",
		"bRightArrow",
		"':'",
		"bLeftArrow",
		"dashBracket",
		"edge",
		"jss",
		"leftArrow",
		"properties",
		"vertex",
		"distinct",
		"DistinctOpt",
		"VariableLengthPathPattern",
		"LengthNum",
		"'.'",
		"'|'",
		"PathPatternMacro",
		"VariableNameOpt",
		"WhereClauseOpt",
		"'}'",
		"dashSlash",
		"ExpAsVar",
		"GraphName",
		"LabelName",
		"PathPatternMacroList",
		"PathPatternMacroOpt",
		"SelectStmt",
		"sLeftArrow",
		"'='",
		"all",
		"any",
		"between",
		"cheapest",
		"FromClause",
		"GroupByClauseOpt",
		"HavingClauseOpt",
		"ifKwd",
		"index",
		"LimitClauseOpt",
		"offset",
		"OrderByClauseOpt",
		"PathPattern",
		"PatternQuantifier",
		"PatternQuantifierOpt",
		"set",
		"shortest",
		"SimplePathPattern",
		"top",
		"VariableSpec",
		"WhenClause",
		"ByItem",
		"ColonOrIsKeyword",
		"EdgePattern",
		"GraphElementInsertion",
		"LabelPredicate",
		"LimitOption",
		"PropertyAssignment",
		"PropertyName",
		"allProp",
		"begin",
		"BeginStmt",
		"by",
		"ByList",
		"commit",
		"CommitStmt",
		"create",
		"CreateGraphStmt",
		"CreateIndexStmt",
		"day",
		"DeleteStmt",
		"drop",
		"DropGraphStmt",
		"DropIndexStmt",
		"ElseClauseOpt",
		"EmptyStmt",
		"explain",
		"ExplainStmt",
		"graph",
		"GraphElementInsertionList",
		"GraphElementUpdate",
		"hour",
		"IfExists",
		"IfNotExists",
		"InsertStmt",
		"into",
		"IntoClause",
		"IntoClauseOpt",
		"InValueList",
		"LabelNameList",
		"LabelsAndProperties",
		"LabelSpecification",
		"LabelSpecificationOpt",
		"match",
		"MatchClause",
		"minute",
		"month",
		"null",
		"PropertyAssignmentList",
		"rollback",
		"RollbackStmt",
		"second",
		"SelectClause",
		"SelectEelement",
		"Statement",
		"UpdateStmt",
		"use",
		"UseStmt",
		"VertexPatternOpt",
		"VertexReference",
		"WhenClauseList",
		"with",
		"yearType",
		"zone",
		"AllPropertiesPrefixOpt",
		"ArgumentList",
		"booleanType",
		"CostClause",
		"CostClauseOpt",
		"DataType",
		"DateTimeField",
		"doubleType",
		"Entry",
		"ExtractField",
		"FieldAsName",
		"FieldAsNameOpt",
		"floatType",
		"ForStringLengthOpt",
		"GraphElementUpdateList",
		"GraphOnClause",
		"GraphOnClauseOpt",
		"GraphPattern",
		"IndexKeyTypeOpt",
		"integerType",
		"intType",
		"LabelPredicateOpt",
		"ListaggSeparatorOpt",
		"long",
		"MatchClauseList",
		"Order",
		"PathPatternList",
		"prefix",
		"PropertiesSpecification",
		"PropertiesSpecificationOpt",
		"PropertyNameList",
		"QuantifiedPathExpr",
		"ReachabilityPathExpr",
		"RowsPerMatchOpt",
		"SelectElementList",
		"StartPosition",
		"StatementList",
		"stringKwd",
		"timezone_hour",
		"timezone_minute",
		"unique",
		"ValueExpressionList",
		"VariableReferenceList",
		"$default",
		"'&'",
		"'^'",
		"'~'",
		"andand",
		"andnot",
		"assignmentEq",
		"bigIntType",
		"defaultKwd",
		"div",
		"doubleAtIdentifier",
		"empty",
		"error",
		"IndexName",
		"invalid",
		"juss",
		"lowerThanOn",
		"mod",
		"neg",
		"neq",
		"nulleq",
		"pipesAsOr",
		"precisionType",
		"primary",
		"singleAtIdentifier",
	}

	yyTokenLiteralStrings = map[int]string{
		57379: "NOT",
		57377: "LIMIT",
		57382: "ORDER",
		57369: "HAVING",
		57367: "FROM",
		57376: "IS",
		57368: "GROUP",
		57395: "AND",
		57446: "IN",
		57466: "=",
		57467: ">=",
		57468: "<=",
		57472: "<>",
		57394: "OR",
		57352: "||",
		57385: "SELECT",
		57393: "XOR",
		57422: "PATH",
		57359: "DELETE",
		57372: "INSERT",
		57389: "UPDATE",
		57421: "COST",
		57400: "END",
		57402: "WHEN",
		57354: "ASC",
		57360: "DESC",
		57403: "ELSE",
		57353: "AS",
		57346: "identifier",
		57429: "FOR",
		57401: "THEN",
		57463: "integer literal",
		57347: "string literal",
		57397: "LABELS",
		57412: "TIME",
		57364: "EXISTS",
		57409: "DATE",
		57411: "TIMESTAMP",
		57455: "ABS",
		57430: "ARRAY_AGG",
		57431: "AVG",
		57399: "CASE",
		57441: "CAST",
		57456: "CEIL",
		57457: "CEILING",
		57432: "COUNT",
		57462: "decimal literal",
		57458: "ELEMENT_NUMBER",
		57438: "EXTRACT",
		57365: "FALSE",
		57459: "FLOOR",
		57460: "HAS_LABEL",
		57461: "ID",
		57450: "IN_DEGREE",
		57423: "INTERVAL",
		57451: "JAVA_REGEXP_LIKE",
		57452: "LABEL",
		57433: "LISTAGG",
		57448: "LOWER",
		57453: "MATCH_NUMBER",
		57434: "MAX",
		57435: "MIN",
		57454: "OUT_DEGREE",
		57428: "SUBSTRING",
		57436: "SUM",
		57387: "TRUE",
		57449: "UPPER",
		57392: "WHERE",
		57381: "ON",
		57474: "?",
		57477: "/-",
		57483: "/->",
		57479: "]-",
		57481: "]->",
		57480: "<-[",
		57478: "-[",
		57363: "EDGE",
		57469: "->",
		57475: "<-",
		57398: "PROPERTIES",
		57391: "VERTEX",
		57437: "DISTINCT",
		57476: "-/",
		57482: "<-/",
		57416: "ALL",
		57417: "ANY",
		57396: "BETWEEN",
		57419: "CHEAPEST",
		57370: "IF",
		57371: "INDEX",
		57414: "OFFSET",
		57386: "SET",
		57418: "SHORTEST",
		57420: "TOP",
		57484: ".*",
		57404: "BEGIN",
		57356: "BY",
		57405: "COMMIT",
		57357: "CREATE",
		57410: "DAY",
		57362: "DROP",
		57407: "EXPLAIN",
		57415: "GRAPH",
		57424: "HOUR",
		57374: "INTO",
		57378: "MATCH",
		57425: "MINUTE",
		57426: "MONTH",
		57380: "NULL",
		57413: "ROLLBACK",
		57427: "SECOND",
		57390: "USE",
		57444: "WITH",
		57408: "YEAR",
		57445: "ZONE",
		57406: "BOOLEAN",
		57361: "DOUBLE",
		57366: "FLOAT",
		57373: "INTEGER",
		57375: "INT",
		57442: "LONG",
		57447: "PREFIX",
		57443: "STRING",
		57439: "TIMEZONE_HOUR",
		57440: "TIMEZONE_MINUTE",
		57388: "UNIQUE",
		57351: "&&",
		57464: "&^",
		57465: ":=",
		57355: "BIGINT",
		57358: "DEFAULT",
		57349: "identifier with double leading at",
		57350: "a special token never used by parser, used by lexer to indicate error",
		57470: "->>",
		57471: "!=",
		57473: "<=>",
		57383: "PRECISION",
		57384: "PRIMARY",
		57348: "identifier with single leading at",
	}

	yyReductions = map[int]struct{xsym, components int}{
		0: {0, 1},
		1: {243, 1},
		2: {271, 1},
		3: {271, 3},
		4: {225, 1},
		5: {225, 1},
		6: {225, 1},
		7: {225, 1},
		8: {225, 1},
		9: {225, 1},
		10: {225, 1},
		11: {225, 1},
		12: {225, 1},
		13: {225, 1},
		14: {225, 1},
		15: {225, 1},
		16: {225, 1},
		17: {225, 1},
		18: {196, 0},
		19: {182, 1},
		20: {186, 1},
		21: {188, 4},
		22: {189, 9},
		23: {253, 0},
		24: {253, 1},
		25: {191, 9},
		26: {277, 1},
		27: {277, 3},
		28: {193, 4},
		29: {194, 6},
		30: {198, 2},
		31: {205, 3},
		32: {205, 10},
		33: {208, 0},
		34: {208, 1},
		35: {207, 2},
		36: {200, 1},
		37: {200, 3},
		38: {175, 3},
		39: {175, 7},
		40: {230, 1},
		41: {211, 2},
		42: {213, 0},
		43: {213, 1},
		44: {212, 4},
		45: {264, 0},
		46: {264, 1},
		47: {263, 4},
		48: {219, 1},
		49: {219, 3},
		50: {178, 3},
		51: {83, 3},
		52: {114, 1},
		53: {114, 1},
		54: {114, 1},
		55: {114, 1},
		56: {114, 1},
		57: {114, 1},
		58: {114, 1},
		59: {114, 1},
		60: {114, 1},
		61: {114, 1},
		62: {114, 1},
		63: {114, 1},
		64: {114, 1},
		65: {114, 1},
		66: {114, 1},
		67: {114, 1},
		68: {114, 1},
		69: {114, 1},
		70: {114, 1},
		71: {114, 1},
		72: {114, 1},
		73: {82, 1},
		74: {103, 1},
		75: {103, 1},
		76: {103, 1},
		77: {103, 1},
		78: {103, 1},
		79: {103, 1},
		80: {103, 1},
		81: {84, 1},
		82: {106, 1},
		83: {106, 1},
		84: {89, 1},
		85: {89, 1},
		86: {94, 2},
		87: {112, 2},
		88: {113, 2},
		89: {100, 3},
		90: {241, 1},
		91: {241, 1},
		92: {241, 1},
		93: {241, 1},
		94: {241, 1},
		95: {241, 1},
		96: {88, 1},
		97: {87, 2},
		98: {87, 3},
		99: {87, 3},
		100: {87, 3},
		101: {87, 3},
		102: {87, 3},
		103: {107, 3},
		104: {107, 3},
		105: {107, 3},
		106: {107, 3},
		107: {107, 3},
		108: {107, 3},
		109: {104, 3},
		110: {104, 3},
		111: {104, 3},
		112: {104, 2},
		113: {111, 3},
		114: {90, 3},
		115: {97, 4},
		116: {98, 1},
		117: {98, 1},
		118: {98, 1},
		119: {98, 1},
		120: {98, 1},
		121: {98, 1},
		122: {98, 1},
		123: {98, 1},
		124: {98, 1},
		125: {98, 1},
		126: {98, 1},
		127: {98, 1},
		128: {98, 1},
		129: {98, 1},
		130: {98, 1},
		131: {236, 1},
		132: {236, 3},
		133: {93, 7},
		134: {270, 1},
		135: {248, 0},
		136: {248, 2},
		137: {86, 4},
		138: {86, 5},
		139: {86, 5},
		140: {86, 5},
		141: {86, 5},
		142: {86, 5},
		143: {86, 5},
		144: {86, 6},
		145: {133, 0},
		146: {133, 1},
		147: {257, 0},
		148: {257, 2},
		149: {96, 6},
		150: {244, 1},
		151: {244, 1},
		152: {244, 1},
		153: {244, 1},
		154: {244, 1},
		155: {244, 1},
		156: {244, 1},
		157: {244, 1},
		158: {102, 3},
		159: {101, 4},
		160: {92, 6},
		161: {240, 1},
		162: {240, 1},
		163: {240, 1},
		164: {240, 1},
		165: {240, 1},
		166: {240, 1},
		167: {240, 1},
		168: {240, 1},
		169: {240, 1},
		170: {240, 4},
		171: {240, 1},
		172: {240, 4},
		173: {91, 1},
		174: {91, 1},
		175: {110, 5},
		176: {109, 4},
		177: {231, 1},
		178: {231, 2},
		179: {171, 4},
		180: {195, 0},
		181: {195, 2},
		182: {99, 3},
		183: {105, 4},
		184: {209, 3},
		185: {276, 1},
		186: {276, 3},
		187: {95, 2},
		188: {85, 3},
		189: {108, 1},
		190: {221, 1},
		191: {148, 8},
		192: {223, 3},
		193: {223, 2},
		194: {269, 1},
		195: {269, 3},
		196: {224, 1},
		197: {224, 3},
		198: {143, 2},
		199: {235, 0},
		200: {235, 2},
		201: {246, 0},
		202: {246, 1},
		203: {245, 2},
		204: {245, 2},
		205: {155, 2},
		206: {259, 1},
		207: {259, 3},
		208: {215, 4},
		209: {250, 2},
		210: {251, 0},
		211: {251, 1},
		212: {268, 0},
		213: {252, 1},
		214: {252, 3},
		215: {261, 1},
		216: {261, 3},
		217: {163, 1},
		218: {163, 2},
		219: {163, 3},
		220: {163, 3},
		221: {163, 4},
		222: {163, 3},
		223: {163, 3},
		224: {163, 4},
		225: {163, 2},
		226: {168, 1},
		227: {168, 3},
		228: {168, 3},
		229: {134, 3},
		230: {267, 4},
		231: {267, 4},
		232: {267, 4},
		233: {119, 3},
		234: {229, 0},
		235: {229, 1},
		236: {174, 3},
		237: {174, 1},
		238: {174, 3},
		239: {174, 1},
		240: {174, 3},
		241: {174, 1},
		242: {170, 2},
		243: {139, 0},
		244: {139, 1},
		245: {176, 2},
		246: {256, 0},
		247: {256, 1},
		248: {173, 1},
		249: {173, 1},
		250: {210, 1},
		251: {210, 3},
		252: {266, 2},
		253: {266, 8},
		254: {238, 2},
		255: {239, 0},
		256: {239, 1},
		257: {164, 1},
		258: {164, 1},
		259: {164, 1},
		260: {164, 3},
		261: {164, 4},
		262: {164, 5},
		263: {164, 4},
		264: {165, 0},
		265: {165, 1},
		266: {147, 0},
		267: {147, 1},
		268: {146, 1},
		269: {146, 2},
		270: {138, 5},
		271: {140, 0},
		272: {140, 2},
		273: {156, 0},
		274: {156, 3},
		275: {184, 1},
		276: {184, 3},
		277: {172, 1},
		278: {172, 2},
		279: {260, 1},
		280: {260, 1},
		281: {157, 0},
		282: {157, 2},
		283: {162, 0},
		284: {162, 3},
		285: {160, 0},
		286: {160, 2},
		287: {160, 4},
		288: {160, 4},
		289: {177, 1},
		290: {177, 1},
		291: {135, 1},
		292: {226, 9},
		293: {249, 1},
		294: {249, 3},
		295: {201, 5},
		296: {228, 2},
		297: {203, 0},
		298: {203, 2},
		299: {204, 0},
		300: {204, 3},
		301: {144, 1},
		302: {179, 1},
		303: {291, 1},
		304: {145, 1},
		305: {81, 1},
		306: {43, 1},
		307: {265, 1},
		308: {265, 3},
	}

	yyXErrors = map[yyXError]string{
	}

	yyParseTab = [543][]uint16{
		// 0
		{1: 291, 291, 27: 43, 29: 337, 43, 333, 43, 138: 336, 146: 335, 330, 324, 181: 327, 314, 185: 328, 315, 329, 316, 317, 191: 318, 331, 319, 320, 196: 313, 332, 321, 205: 322, 220: 334, 323, 225: 312, 325, 338, 326, 243: 310, 271: 311},
		{1: 309},
		{1: 308, 850},
		{1: 307, 307},
		{1: 305, 305},
		// 5
		{1: 304, 304},
		{1: 303, 303},
		{1: 302, 302},
		{1: 301, 301},
		{1: 300, 300},
		// 10
		{1: 299, 299},
		{1: 298, 298},
		{1: 297, 297},
		{1: 296, 296},
		{1: 295, 295},
		// 15
		{1: 294, 294},
		{1: 293, 293},
		{1: 292, 292},
		{1: 290, 290},
		{1: 289, 289},
		// 20
		{159: 286, 199: 832, 253: 833, 275: 834},
		{27: 433, 30: 796, 797, 798, 223: 432},
		{159: 787, 199: 786},
		{27: 43, 29: 337, 138: 336, 146: 335, 431, 785},
		{127: 276, 131: 276, 206: 749, 748, 747},
		// 25
		{1: 119, 119},
		{27: 42, 29: 337, 42, 42, 42, 138: 746},
		{27: 41, 29: 41, 41, 41, 41},
		{40: 341, 43: 342},
		{40: 341, 43: 340, 144: 339},
		// 30
		{1: 13, 13},
		{8, 8, 8, 8, 6: 8, 8, 8, 14: 8, 115: 8, 127: 8, 131: 8},
		{3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 41: 3, 3, 46: 3, 115: 3, 3, 3, 3, 120: 3, 3, 3, 3, 3, 127: 3, 130: 3, 3, 136: 3, 3, 150: 3, 153: 3, 166: 3, 180: 3},
		{39: 343},
		{12: 349, 119: 348, 151: 346, 345, 163: 350, 168: 344, 347},
		// 35
		{92, 92, 92, 92, 687, 6: 92, 92, 92, 14: 92, 27: 92, 29: 92, 92, 92, 92, 115: 92, 92, 125: 685, 683, 128: 684, 686, 142: 735, 149: 736, 174: 734, 267: 733},
		{12: 349, 119: 681, 134: 728, 154: 730, 167: 729},
		{12: 349, 119: 681, 134: 725, 154: 724, 167: 723},
		{44: 556, 135: 677},
		{83, 83, 83, 83, 83, 6: 83, 83, 83, 14: 83, 27: 83, 29: 83, 83, 83, 83, 115: 83, 83, 125: 83, 83, 128: 83, 83, 142: 83, 149: 83},
		// 40
		{66, 13: 66, 40: 341, 43: 510, 124: 66, 139: 509, 170: 508},
		{27: 38, 29: 38, 38, 38, 38, 115: 352, 140: 351},
		{27: 39, 29: 39, 39, 39, 39},
		{4: 392, 394, 12: 395, 40: 341, 43: 427, 383, 382, 406, 388, 425, 387, 389, 391, 400, 418, 416, 424, 421, 401, 402, 413, 384, 409, 420, 385, 403, 407, 404, 410, 390, 399, 405, 419, 397, 408, 415, 414, 411, 412, 417, 386, 398, 374, 353, 354, 375, 426, 364, 357, 356, 377, 361, 369, 368, 363, 378, 372, 365, 362, 396, 370, 381, 367, 366, 355, 359, 371, 376, 358, 373, 423, 422, 360, 379, 380, 393},
		{257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 13: 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 41: 257, 257, 136: 674},
		// 45
		{256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 13: 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 41: 256, 256},
		{255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 13: 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 41: 255, 255},
		{254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 13: 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 41: 254, 254},
		{253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 13: 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 41: 253, 253},
		{252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 13: 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 41: 252, 252},
		// 50
		{251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 13: 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 41: 251, 251},
		{250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 13: 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 41: 250, 250},
		{249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 13: 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 41: 249, 249},
		{248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 13: 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 41: 248, 248},
		{247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 13: 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 41: 247, 247},
		// 55
		{246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 13: 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 41: 246, 246},
		{245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 13: 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 41: 245, 245},
		{244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 13: 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 41: 244, 244},
		{243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 13: 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 41: 243, 243},
		{242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 13: 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 41: 242, 242},
		// 60
		{241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 13: 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 41: 241, 241},
		{240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 13: 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 41: 240, 240},
		{239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 13: 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 41: 239, 239},
		{238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 13: 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 41: 238, 238},
		{237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 13: 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 41: 237, 237},
		// 65
		{236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 13: 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 41: 236, 236, 136: 236, 166: 236},
		{235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 13: 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 41: 235, 235},
		{234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 13: 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 41: 234, 234},
		{233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 13: 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 41: 233, 233},
		{232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 13: 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 41: 232, 232},
		// 70
		{231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 13: 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 41: 231, 231},
		{230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 13: 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 41: 230, 230},
		{229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 13: 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 41: 229, 229},
		{228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 13: 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 41: 228, 228},
		{227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 13: 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 41: 227, 227},
		// 75
		{226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 13: 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 41: 226, 226},
		{225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 13: 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 41: 225, 225},
		{224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 13: 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 41: 224, 224},
		{45: 673},
		{45: 672},
		// 80
		{45: 671},
		{45: 663},
		{213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 13: 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 41: 213, 213},
		{4: 392, 394, 12: 395, 40: 341, 43: 427, 383, 382, 406, 388, 425, 387, 389, 391, 400, 418, 416, 424, 421, 401, 402, 413, 384, 409, 420, 385, 403, 407, 404, 410, 390, 399, 405, 419, 397, 408, 415, 414, 411, 412, 417, 386, 398, 374, 353, 354, 375, 426, 364, 357, 356, 377, 361, 369, 368, 363, 378, 372, 365, 362, 396, 370, 381, 367, 366, 355, 359, 371, 376, 358, 373, 423, 422, 360, 379, 380, 662},
		{37, 37, 37, 4: 452, 465, 37, 37, 37, 10: 448, 451, 13: 463, 37, 461, 464, 450, 449, 456, 455, 453, 457, 458, 454, 459, 462, 37, 460, 37, 37, 37, 37, 37},
		// 85
		{4: 392, 394, 12: 395, 40: 341, 43: 427, 383, 382, 406, 388, 425, 387, 389, 391, 400, 418, 416, 424, 421, 401, 402, 413, 384, 409, 420, 385, 403, 407, 404, 410, 390, 399, 405, 419, 397, 408, 415, 414, 411, 412, 417, 386, 398, 374, 353, 354, 375, 426, 364, 357, 356, 377, 361, 369, 368, 363, 378, 372, 365, 362, 396, 370, 381, 367, 366, 355, 359, 371, 376, 358, 373, 423, 422, 360, 379, 380, 661},
		{4: 392, 394, 12: 395, 27: 43, 29: 337, 40: 341, 43: 427, 383, 382, 406, 388, 425, 387, 389, 391, 400, 418, 416, 424, 421, 401, 402, 413, 384, 409, 420, 385, 403, 407, 404, 410, 390, 399, 405, 419, 397, 408, 415, 414, 411, 412, 417, 386, 398, 374, 353, 354, 375, 426, 364, 357, 356, 377, 361, 369, 368, 363, 378, 372, 365, 362, 396, 370, 381, 367, 366, 355, 359, 371, 376, 358, 373, 423, 422, 360, 379, 380, 659, 138: 336, 146: 335, 431, 430},
		{12: 653},
		{12: 193},
		{12: 192},
		// 90
		{12: 191},
		{12: 190},
		{12: 189},
		{12: 188},
		{12: 187},
		// 95
		{12: 186},
		{12: 185},
		{12: 184},
		{12: 183},
		{12: 182},
		// 100
		{12: 181},
		{12: 180},
		{12: 179},
		{12: 644},
		{12: 638},
		// 105
		{12: 634},
		{12: 630},
		{12: 626},
		{12: 622},
		{12: 618},
		// 110
		{12: 611},
		{12: 598},
		{12: 577},
		{136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 13: 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 41: 136, 136},
		{135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 13: 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 41: 135, 135},
		// 115
		{4: 392, 394, 12: 395, 35: 565, 40: 341, 43: 427, 383, 382, 406, 388, 425, 387, 389, 391, 400, 418, 416, 424, 421, 401, 402, 413, 384, 409, 420, 385, 403, 407, 404, 410, 390, 399, 405, 419, 397, 408, 415, 414, 411, 412, 417, 386, 398, 374, 353, 354, 375, 426, 364, 357, 356, 377, 361, 369, 368, 363, 378, 372, 365, 362, 396, 370, 381, 367, 366, 355, 359, 371, 376, 358, 373, 423, 422, 360, 379, 380, 562, 171: 564, 231: 563},
		{12: 429, 85: 428},
		{120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 13: 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 41: 120, 120},
		{4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 13: 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 41: 4, 4, 136: 4, 166: 4},
		{122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 13: 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 41: 122, 122},
		// 120
		{27: 43, 29: 337, 138: 336, 146: 335, 431, 430},
		{561},
		{27: 433, 223: 432},
		{9: 499, 155: 498},
		{4: 164, 164, 10: 436, 12: 164, 40: 164, 44: 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 132: 434, 435},
		// 125
		{4: 163, 163, 12: 163, 40: 163, 44: 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163},
		{4: 392, 394, 12: 395, 40: 341, 43: 441, 383, 382, 406, 388, 425, 387, 389, 391, 400, 418, 416, 424, 421, 401, 402, 413, 384, 409, 420, 385, 403, 407, 404, 410, 390, 399, 405, 419, 397, 408, 415, 414, 411, 412, 417, 386, 398, 374, 353, 354, 375, 426, 364, 357, 356, 377, 361, 369, 368, 363, 378, 372, 365, 362, 396, 370, 381, 367, 366, 355, 359, 371, 376, 358, 373, 423, 422, 360, 379, 380, 437, 143: 440, 224: 439, 269: 438},
		{9: 116},
		{108, 108, 108, 108, 452, 465, 108, 108, 108, 108, 448, 451, 13: 463, 15: 461, 464, 450, 449, 456, 455, 453, 457, 458, 454, 459, 462, 28: 460, 36: 108, 108, 39: 468, 245: 467, 466},
		{3: 446, 9: 117},
		// 130
		{3: 115, 9: 115},
		{3: 113, 9: 113},
		{3: 4, 4, 4, 9: 4, 4, 4, 13: 4, 15: 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 28: 4, 39: 4, 136: 4, 180: 442},
		{3: 110, 9: 110, 235: 443, 262: 444},
		{3: 112, 9: 112},
		// 135
		{45: 382, 84: 445},
		{3: 109, 9: 109},
		{4: 392, 394, 12: 395, 40: 341, 43: 441, 383, 382, 406, 388, 425, 387, 389, 391, 400, 418, 416, 424, 421, 401, 402, 413, 384, 409, 420, 385, 403, 407, 404, 410, 390, 399, 405, 419, 397, 408, 415, 414, 411, 412, 417, 386, 398, 374, 353, 354, 375, 426, 364, 357, 356, 377, 361, 369, 368, 363, 378, 372, 365, 362, 396, 370, 381, 367, 366, 355, 359, 371, 376, 358, 373, 423, 422, 360, 379, 380, 437, 143: 440, 224: 447},
		{3: 114, 9: 114},
		{4: 392, 394, 12: 395, 40: 341, 43: 427, 383, 382, 406, 388, 425, 387, 389, 391, 400, 418, 416, 424, 421, 401, 402, 413, 384, 409, 420, 385, 403, 407, 404, 410, 390, 399, 405, 419, 397, 408, 415, 414, 411, 412, 417, 386, 398, 374, 353, 354, 375, 426, 364, 357, 356, 377, 361, 369, 368, 363, 378, 372, 365, 362, 396, 370, 381, 367, 366, 355, 359, 371, 376, 358, 373, 423, 422, 360, 379, 380, 497},
		// 140
		{4: 392, 394, 12: 395, 40: 341, 43: 427, 383, 382, 406, 388, 425, 387, 389, 391, 400, 418, 416, 424, 421, 401, 402, 413, 384, 409, 420, 385, 403, 407, 404, 410, 390, 399, 405, 419, 397, 408, 415, 414, 411, 412, 417, 386, 398, 374, 353, 354, 375, 426, 364, 357, 356, 377, 361, 369, 368, 363, 378, 372, 365, 362, 396, 370, 381, 367, 366, 355, 359, 371, 376, 358, 373, 423, 422, 360, 379, 380, 496},
		{4: 392, 394, 12: 395, 40: 341, 43: 427, 383, 382, 406, 388, 425, 387, 389, 391, 400, 418, 416, 424, 421, 401, 402, 413, 384, 409, 420, 385, 403, 407, 404, 410, 390, 399, 405, 419, 397, 408, 415, 414, 411, 412, 417, 386, 398, 374, 353, 354, 375, 426, 364, 357, 356, 377, 361, 369, 368, 363, 378, 372, 365, 362, 396, 370, 381, 367, 366, 355, 359, 371, 376, 358, 373, 423, 422, 360, 379, 380, 495},
		{4: 392, 394, 12: 395, 40: 341, 43: 427, 383, 382, 406, 388, 425, 387, 389, 391, 400, 418, 416, 424, 421, 401, 402, 413, 384, 409, 420, 385, 403, 407, 404, 410, 390, 399, 405, 419, 397, 408, 415, 414, 411, 412, 417, 386, 398, 374, 353, 354, 375, 426, 364, 357, 356, 377, 361, 369, 368, 363, 378, 372, 365, 362, 396, 370, 381, 367, 366, 355, 359, 371, 376, 358, 373, 423, 422, 360, 379, 380, 494},
		{4: 392, 394, 12: 395, 40: 341, 43: 427, 383, 382, 406, 388, 425, 387, 389, 391, 400, 418, 416, 424, 421, 401, 402, 413, 384, 409, 420, 385, 403, 407, 404, 410, 390, 399, 405, 419, 397, 408, 415, 414, 411, 412, 417, 386, 398, 374, 353, 354, 375, 426, 364, 357, 356, 377, 361, 369, 368, 363, 378, 372, 365, 362, 396, 370, 381, 367, 366, 355, 359, 371, 376, 358, 373, 423, 422, 360, 379, 380, 493},
		{4: 392, 394, 12: 395, 40: 341, 43: 427, 383, 382, 406, 388, 425, 387, 389, 391, 400, 418, 416, 424, 421, 401, 402, 413, 384, 409, 420, 385, 403, 407, 404, 410, 390, 399, 405, 419, 397, 408, 415, 414, 411, 412, 417, 386, 398, 374, 353, 354, 375, 426, 364, 357, 356, 377, 361, 369, 368, 363, 378, 372, 365, 362, 396, 370, 381, 367, 366, 355, 359, 371, 376, 358, 373, 423, 422, 360, 379, 380, 492},
		// 145
		{4: 392, 394, 12: 395, 40: 341, 43: 427, 383, 382, 406, 388, 425, 387, 389, 391, 400, 418, 416, 424, 421, 401, 402, 413, 384, 409, 420, 385, 403, 407, 404, 410, 390, 399, 405, 419, 397, 408, 415, 414, 411, 412, 417, 386, 398, 374, 353, 354, 375, 426, 364, 357, 356, 377, 361, 369, 368, 363, 378, 372, 365, 362, 396, 370, 381, 367, 366, 355, 359, 371, 376, 358, 373, 423, 422, 360, 379, 380, 491},
		{4: 392, 394, 12: 395, 40: 341, 43: 427, 383, 382, 406, 388, 425, 387, 389, 391, 400, 418, 416, 424, 421, 401, 402, 413, 384, 409, 420, 385, 403, 407, 404, 410, 390, 399, 405, 419, 397, 408, 415, 414, 411, 412, 417, 386, 398, 374, 353, 354, 375, 426, 364, 357, 356, 377, 361, 369, 368, 363, 378, 372, 365, 362, 396, 370, 381, 367, 366, 355, 359, 371, 376, 358, 373, 423, 422, 360, 379, 380, 490},
		{4: 392, 394, 12: 395, 40: 341, 43: 427, 383, 382, 406, 388, 425, 387, 389, 391, 400, 418, 416, 424, 421, 401, 402, 413, 384, 409, 420, 385, 403, 407, 404, 410, 390, 399, 405, 419, 397, 408, 415, 414, 411, 412, 417, 386, 398, 374, 353, 354, 375, 426, 364, 357, 356, 377, 361, 369, 368, 363, 378, 372, 365, 362, 396, 370, 381, 367, 366, 355, 359, 371, 376, 358, 373, 423, 422, 360, 379, 380, 489},
		{4: 392, 394, 12: 395, 40: 341, 43: 427, 383, 382, 406, 388, 425, 387, 389, 391, 400, 418, 416, 424, 421, 401, 402, 413, 384, 409, 420, 385, 403, 407, 404, 410, 390, 399, 405, 419, 397, 408, 415, 414, 411, 412, 417, 386, 398, 374, 353, 354, 375, 426, 364, 357, 356, 377, 361, 369, 368, 363, 378, 372, 365, 362, 396, 370, 381, 367, 366, 355, 359, 371, 376, 358, 373, 423, 422, 360, 379, 380, 488},
		{4: 392, 394, 12: 395, 40: 341, 43: 427, 383, 382, 406, 388, 425, 387, 389, 391, 400, 418, 416, 424, 421, 401, 402, 413, 384, 409, 420, 385, 403, 407, 404, 410, 390, 399, 405, 419, 397, 408, 415, 414, 411, 412, 417, 386, 398, 374, 353, 354, 375, 426, 364, 357, 356, 377, 361, 369, 368, 363, 378, 372, 365, 362, 396, 370, 381, 367, 366, 355, 359, 371, 376, 358, 373, 423, 422, 360, 379, 380, 487},
		// 150
		{4: 392, 394, 12: 395, 40: 341, 43: 427, 383, 382, 406, 388, 425, 387, 389, 391, 400, 418, 416, 424, 421, 401, 402, 413, 384, 409, 420, 385, 403, 407, 404, 410, 390, 399, 405, 419, 397, 408, 415, 414, 411, 412, 417, 386, 398, 374, 353, 354, 375, 426, 364, 357, 356, 377, 361, 369, 368, 363, 378, 372, 365, 362, 396, 370, 381, 367, 366, 355, 359, 371, 376, 358, 373, 423, 422, 360, 379, 380, 486},
		{4: 392, 394, 12: 395, 40: 341, 43: 427, 383, 382, 406, 388, 425, 387, 389, 391, 400, 418, 416, 424, 421, 401, 402, 413, 384, 409, 420, 385, 403, 407, 404, 410, 390, 399, 405, 419, 397, 408, 415, 414, 411, 412, 417, 386, 398, 374, 353, 354, 375, 426, 364, 357, 356, 377, 361, 369, 368, 363, 378, 372, 365, 362, 396, 370, 381, 367, 366, 355, 359, 371, 376, 358, 373, 423, 422, 360, 379, 380, 485},
		{4: 392, 394, 12: 395, 40: 341, 43: 427, 383, 382, 406, 388, 425, 387, 389, 391, 400, 418, 416, 424, 421, 401, 402, 413, 384, 409, 420, 385, 403, 407, 404, 410, 390, 399, 405, 419, 397, 408, 415, 414, 411, 412, 417, 386, 398, 374, 353, 354, 375, 426, 364, 357, 356, 377, 361, 369, 368, 363, 378, 372, 365, 362, 396, 370, 381, 367, 366, 355, 359, 371, 376, 358, 373, 423, 422, 360, 379, 380, 484},
		{4: 392, 394, 12: 395, 40: 341, 43: 427, 383, 382, 406, 388, 425, 387, 389, 391, 400, 418, 416, 424, 421, 401, 402, 413, 384, 409, 420, 385, 403, 407, 404, 410, 390, 399, 405, 419, 397, 408, 415, 414, 411, 412, 417, 386, 398, 374, 353, 354, 375, 426, 364, 357, 356, 377, 361, 369, 368, 363, 378, 372, 365, 362, 396, 370, 381, 367, 366, 355, 359, 371, 376, 358, 373, 423, 422, 360, 379, 380, 483},
		{5: 481, 218: 480},
		// 155
		{12: 473, 209: 479},
		{16: 471},
		{111, 111, 111, 111, 6: 111, 111, 111, 111, 36: 111, 111},
		{107, 107, 107, 107, 6: 107, 107, 107, 107, 36: 107, 107},
		{40: 341, 43: 469, 45: 470},
		// 160
		{106, 106, 106, 106, 6: 106, 106, 106, 106, 36: 106, 106},
		{105, 105, 105, 105, 6: 105, 105, 105, 105, 36: 105, 105},
		{12: 473, 209: 472},
		{126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 13: 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 41: 126, 126},
		{4: 392, 394, 12: 395, 40: 341, 43: 427, 383, 382, 406, 388, 425, 387, 389, 391, 400, 418, 416, 424, 421, 401, 402, 413, 384, 409, 420, 385, 403, 407, 404, 410, 390, 399, 405, 419, 397, 408, 415, 414, 411, 412, 417, 386, 398, 374, 353, 354, 375, 426, 364, 357, 356, 377, 361, 369, 368, 363, 378, 372, 365, 362, 396, 370, 381, 367, 366, 355, 359, 371, 376, 358, 373, 423, 422, 360, 379, 380, 474, 276: 475},
		// 165
		{124, 3: 124, 452, 465, 10: 448, 451, 13: 463, 15: 461, 464, 450, 449, 456, 455, 453, 457, 458, 454, 459, 462, 28: 460},
		{476, 3: 477},
		{125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 13: 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 41: 125, 125},
		{4: 392, 394, 12: 395, 40: 341, 43: 427, 383, 382, 406, 388, 425, 387, 389, 391, 400, 418, 416, 424, 421, 401, 402, 413, 384, 409, 420, 385, 403, 407, 404, 410, 390, 399, 405, 419, 397, 408, 415, 414, 411, 412, 417, 386, 398, 374, 353, 354, 375, 426, 364, 357, 356, 377, 361, 369, 368, 363, 378, 372, 365, 362, 396, 370, 381, 367, 366, 355, 359, 371, 376, 358, 373, 423, 422, 360, 379, 380, 478},
		{123, 3: 123, 452, 465, 10: 448, 451, 13: 463, 15: 461, 464, 450, 449, 456, 455, 453, 457, 458, 454, 459, 462, 28: 460},
		// 170
		{127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 13: 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 41: 127, 127},
		{151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 13: 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 41: 151, 151},
		{218: 482},
		{150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 13: 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 41: 150, 150},
		{196, 196, 196, 196, 452, 465, 196, 196, 196, 196, 448, 451, 13: 463, 196, 461, 464, 450, 449, 456, 455, 453, 457, 458, 454, 196, 196, 196, 460, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 41: 196, 196},
		// 175
		{198, 198, 198, 198, 452, 465, 198, 198, 198, 198, 448, 451, 13: 463, 198, 198, 464, 450, 449, 456, 455, 453, 457, 458, 454, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 41: 198, 198},
		{199, 199, 199, 199, 452, 465, 199, 199, 199, 199, 448, 451, 13: 463, 199, 461, 464, 450, 449, 456, 455, 453, 457, 458, 454, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 41: 199, 199},
		{200, 200, 200, 200, 452, 465, 200, 200, 200, 200, 448, 451, 13: 463, 200, 461, 464, 450, 449, 456, 455, 453, 457, 458, 454, 200, 200, 200, 460, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 41: 200, 200},
		{201, 201, 201, 201, 452, 465, 201, 201, 201, 201, 448, 451, 13: 201, 201, 201, 201, 450, 449, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 41: 201, 201},
		{202, 202, 202, 202, 452, 465, 202, 202, 202, 202, 448, 451, 13: 202, 202, 202, 202, 450, 449, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 41: 202, 202},
		// 180
		{203, 203, 203, 203, 452, 465, 203, 203, 203, 203, 448, 451, 13: 203, 203, 203, 203, 450, 449, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 41: 203, 203},
		{204, 204, 204, 204, 452, 465, 204, 204, 204, 204, 448, 451, 13: 204, 204, 204, 204, 450, 449, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 41: 204, 204},
		{205, 205, 205, 205, 452, 465, 205, 205, 205, 205, 448, 451, 13: 205, 205, 205, 205, 450, 449, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 41: 205, 205},
		{206, 206, 206, 206, 452, 465, 206, 206, 206, 206, 448, 451, 13: 206, 206, 206, 206, 450, 449, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 41: 206, 206},
		{207, 207, 207, 207, 207, 465, 207, 207, 207, 207, 448, 207, 13: 207, 207, 207, 207, 450, 449, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 41: 207, 207},
		// 185
		{208, 208, 208, 208, 208, 465, 208, 208, 208, 208, 448, 208, 13: 208, 208, 208, 208, 450, 449, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 41: 208, 208},
		{209, 209, 209, 209, 209, 465, 209, 209, 209, 209, 209, 209, 13: 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 41: 209, 209},
		{210, 210, 210, 210, 210, 465, 210, 210, 210, 210, 210, 210, 13: 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 41: 210, 210},
		{211, 211, 211, 211, 211, 465, 211, 211, 211, 211, 211, 211, 13: 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 41: 211, 211},
		{38, 38, 38, 6: 38, 38, 38, 14: 38, 115: 352, 140: 532},
		// 190
		{214: 502, 501, 259: 500},
		{104, 104, 104, 530, 6: 104, 104, 104, 14: 104, 115: 104},
		{103, 103, 103, 103, 6: 103, 103, 103, 14: 103, 115: 103},
		{12: 505, 119: 348, 151: 346, 345, 163: 504, 168: 344, 347, 252: 503},
		{99, 99, 99, 99, 6: 99, 99, 99, 14: 99, 115: 99, 526, 250: 527, 525},
		// 195
		{96, 96, 96, 96, 6: 96, 96, 96, 14: 96, 115: 96, 96},
		{66, 12: 349, 66, 40: 341, 43: 510, 119: 348, 124: 66, 139: 509, 151: 346, 345, 163: 507, 168: 344, 347, 508, 261: 506},
		{522, 3: 523},
		{94, 3: 94},
		{521},
		// 200
		{63, 13: 515, 122: 63, 63, 514, 173: 512, 176: 513, 256: 511},
		{65, 65, 65, 65, 9: 65, 13: 65, 46: 65, 122: 65, 65, 65, 130: 65, 153: 65},
		{67, 122: 67, 67},
		{40: 341, 43: 518, 145: 517, 210: 516},
		{62, 122: 62, 62},
		// 205
		{40: 61},
		{40: 60},
		{64, 10: 64, 64, 117: 64, 64, 120: 64, 64, 64, 64, 137: 519},
		{59, 10: 59, 59, 117: 59, 59, 120: 59, 59, 59, 59, 137: 59},
		{5, 5, 5, 10: 5, 5, 5, 117: 5, 5, 120: 5, 5, 5, 5, 137: 5},
		// 210
		{40: 341, 43: 518, 145: 520},
		{58, 10: 58, 58, 117: 58, 58, 120: 58, 58, 58, 58, 137: 58},
		{76, 76, 76, 76, 76, 6: 76, 76, 76, 12: 76, 14: 76, 27: 76, 29: 76, 76, 76, 76, 76, 115: 76, 76, 125: 76, 76, 128: 76, 76, 142: 76, 149: 76},
		{95, 95, 95, 95, 6: 95, 95, 95, 14: 95, 115: 95, 95},
		{12: 349, 119: 348, 151: 346, 345, 163: 524, 168: 344, 347},
		// 215
		{93, 3: 93},
		{97, 97, 97, 97, 6: 97, 97, 97, 14: 97, 115: 97, 268: 529},
		{40: 341, 43: 340, 144: 528},
		{98, 98, 98, 98, 6: 98, 98, 98, 14: 98, 115: 98},
		{100, 100, 100, 100, 6: 100, 100, 100, 14: 100, 115: 100},
		// 220
		{101, 101, 101, 101, 6: 101, 101, 101, 14: 101, 115: 101},
		{214: 502, 531},
		{102, 102, 102, 102, 6: 102, 102, 102, 14: 102, 115: 102},
		{36, 36, 36, 6: 36, 36, 36, 14: 534, 156: 533},
		{28, 28, 28, 6: 28, 28, 545, 157: 544},
		// 225
		{183: 535},
		{4: 392, 394, 12: 395, 40: 341, 43: 427, 383, 382, 406, 388, 425, 387, 389, 391, 400, 418, 416, 424, 421, 401, 402, 413, 384, 409, 420, 385, 403, 407, 404, 410, 390, 399, 405, 419, 397, 408, 415, 414, 411, 412, 417, 386, 398, 374, 353, 354, 375, 426, 364, 357, 356, 377, 361, 369, 368, 363, 378, 372, 365, 362, 396, 370, 381, 367, 366, 355, 359, 371, 376, 358, 373, 423, 422, 360, 379, 380, 437, 143: 538, 172: 537, 184: 536},
		{35, 35, 35, 542, 6: 35, 35, 35},
		{34, 34, 34, 34, 6: 34, 34, 34},
		{32, 32, 32, 32, 6: 32, 32, 32, 36: 540, 541, 260: 539},
		// 230
		{31, 31, 31, 31, 6: 31, 31, 31},
		{30, 30, 30, 30, 6: 30, 30, 30},
		{29, 29, 29, 29, 6: 29, 29, 29},
		{4: 392, 394, 12: 395, 40: 341, 43: 427, 383, 382, 406, 388, 425, 387, 389, 391, 400, 418, 416, 424, 421, 401, 402, 413, 384, 409, 420, 385, 403, 407, 404, 410, 390, 399, 405, 419, 397, 408, 415, 414, 411, 412, 417, 386, 398, 374, 353, 354, 375, 426, 364, 357, 356, 377, 361, 369, 368, 363, 378, 372, 365, 362, 396, 370, 381, 367, 366, 355, 359, 371, 376, 358, 373, 423, 422, 360, 379, 380, 437, 143: 538, 172: 543},
		{33, 33, 33, 33, 6: 33, 33, 33},
		// 235
		{26, 26, 26, 6: 26, 548, 162: 547},
		{4: 392, 394, 12: 395, 40: 341, 43: 427, 383, 382, 406, 388, 425, 387, 389, 391, 400, 418, 416, 424, 421, 401, 402, 413, 384, 409, 420, 385, 403, 407, 404, 410, 390, 399, 405, 419, 397, 408, 415, 414, 411, 412, 417, 386, 398, 374, 353, 354, 375, 426, 364, 357, 356, 377, 361, 369, 368, 363, 378, 372, 365, 362, 396, 370, 381, 367, 366, 355, 359, 371, 376, 358, 373, 423, 422, 360, 379, 380, 546},
		{27, 27, 27, 4: 452, 465, 27, 27, 10: 448, 451, 13: 463, 15: 461, 464, 450, 449, 456, 455, 453, 457, 458, 454, 459, 462, 28: 460},
		{24, 24, 24, 6: 552, 160: 551},
		{183: 549},
		// 240
		{4: 392, 394, 12: 395, 40: 341, 43: 427, 383, 382, 406, 388, 425, 387, 389, 391, 400, 418, 416, 424, 421, 401, 402, 413, 384, 409, 420, 385, 403, 407, 404, 410, 390, 399, 405, 419, 397, 408, 415, 414, 411, 412, 417, 386, 398, 374, 353, 354, 375, 426, 364, 357, 356, 377, 361, 369, 368, 363, 378, 372, 365, 362, 396, 370, 381, 367, 366, 355, 359, 371, 376, 358, 373, 423, 422, 360, 379, 380, 437, 143: 538, 172: 537, 184: 550},
		{25, 25, 25, 542, 6: 25},
		{118, 118, 118},
		{44: 556, 117: 555, 135: 554, 177: 553},
		{23, 23, 23, 557, 161: 558},
		// 245
		{20, 20, 20, 20, 161: 20},
		{19, 19, 19, 19, 161: 19},
		{18, 18, 18, 18, 141: 18, 154: 18, 161: 18, 167: 18},
		{44: 556, 117: 555, 135: 554, 177: 560},
		{44: 556, 117: 555, 135: 554, 177: 559},
		// 250
		{21, 21, 21},
		{22, 22, 22},
		{121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 13: 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 41: 121, 121},
		{4: 452, 465, 10: 448, 451, 13: 463, 15: 461, 464, 450, 449, 456, 455, 453, 457, 458, 454, 459, 462, 28: 460, 35: 565, 171: 564, 231: 574},
		{34: 129, 565, 38: 571, 171: 570, 195: 569},
		// 255
		{34: 132, 132, 38: 132},
		{4: 392, 394, 12: 395, 40: 341, 43: 427, 383, 382, 406, 388, 425, 387, 389, 391, 400, 418, 416, 424, 421, 401, 402, 413, 384, 409, 420, 385, 403, 407, 404, 410, 390, 399, 405, 419, 397, 408, 415, 414, 411, 412, 417, 386, 398, 374, 353, 354, 375, 426, 364, 357, 356, 377, 361, 369, 368, 363, 378, 372, 365, 362, 396, 370, 381, 367, 366, 355, 359, 371, 376, 358, 373, 423, 422, 360, 379, 380, 566},
		{4: 452, 465, 10: 448, 451, 13: 463, 15: 461, 464, 450, 449, 456, 455, 453, 457, 458, 454, 459, 462, 28: 460, 42: 567},
		{4: 392, 394, 12: 395, 40: 341, 43: 427, 383, 382, 406, 388, 425, 387, 389, 391, 400, 418, 416, 424, 421, 401, 402, 413, 384, 409, 420, 385, 403, 407, 404, 410, 390, 399, 405, 419, 397, 408, 415, 414, 411, 412, 417, 386, 398, 374, 353, 354, 375, 426, 364, 357, 356, 377, 361, 369, 368, 363, 378, 372, 365, 362, 396, 370, 381, 367, 366, 355, 359, 371, 376, 358, 373, 423, 422, 360, 379, 380, 568},
		{4: 452, 465, 10: 448, 451, 13: 463, 15: 461, 464, 450, 449, 456, 455, 453, 457, 458, 454, 459, 462, 28: 460, 34: 130, 130, 38: 130},
		// 260
		{34: 573},
		{34: 131, 131, 38: 131},
		{4: 392, 394, 12: 395, 40: 341, 43: 427, 383, 382, 406, 388, 425, 387, 389, 391, 400, 418, 416, 424, 421, 401, 402, 413, 384, 409, 420, 385, 403, 407, 404, 410, 390, 399, 405, 419, 397, 408, 415, 414, 411, 412, 417, 386, 398, 374, 353, 354, 375, 426, 364, 357, 356, 377, 361, 369, 368, 363, 378, 372, 365, 362, 396, 370, 381, 367, 366, 355, 359, 371, 376, 358, 373, 423, 422, 360, 379, 380, 572},
		{4: 452, 465, 10: 448, 451, 13: 463, 15: 461, 464, 450, 449, 456, 455, 453, 457, 458, 454, 459, 462, 28: 460, 34: 128},
		{133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 13: 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 41: 133, 133},
		// 265
		{34: 129, 565, 38: 571, 171: 570, 195: 575},
		{34: 576},
		{134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 13: 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 41: 134, 134},
		{4: 392, 394, 12: 395, 40: 341, 43: 427, 383, 382, 406, 388, 425, 387, 389, 391, 400, 418, 416, 424, 421, 401, 402, 413, 384, 409, 420, 385, 403, 407, 404, 410, 390, 399, 405, 419, 397, 408, 415, 414, 411, 412, 417, 386, 398, 374, 353, 354, 375, 426, 364, 357, 356, 377, 361, 369, 368, 363, 378, 372, 365, 362, 396, 370, 381, 367, 366, 355, 359, 371, 376, 358, 373, 423, 422, 360, 379, 380, 578},
		{4: 452, 465, 10: 448, 451, 13: 463, 15: 461, 464, 450, 449, 456, 455, 453, 457, 458, 454, 459, 462, 28: 460, 39: 579},
		// 270
		{47: 589, 49: 588, 590, 237: 582, 240: 580, 242: 587, 247: 586, 254: 583, 584, 258: 585, 272: 581},
		{597},
		{148},
		{147},
		{146},
		// 275
		{145},
		{144},
		{143},
		{142},
		{141},
		// 280
		{140, 232: 594},
		{138, 232: 591},
		{47: 592},
		{234: 593},
		{137},
		// 285
		{47: 595},
		{234: 596},
		{139},
		{149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 13: 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 41: 149, 149},
		{190: 602, 202: 603, 216: 604, 601, 222: 605, 233: 600, 244: 599, 273: 606, 607},
		// 290
		{9: 608},
		{9: 159},
		{9: 158},
		{9: 157},
		{9: 156},
		// 295
		{9: 155},
		{9: 154},
		{9: 153},
		{9: 152},
		{4: 392, 394, 12: 395, 40: 341, 43: 427, 383, 382, 406, 388, 425, 387, 389, 391, 400, 418, 416, 424, 421, 401, 402, 413, 384, 409, 420, 385, 403, 407, 404, 410, 390, 399, 405, 419, 397, 408, 415, 414, 411, 412, 417, 386, 398, 374, 353, 354, 375, 426, 364, 357, 356, 377, 361, 369, 368, 363, 378, 372, 365, 362, 396, 370, 381, 367, 366, 355, 359, 371, 376, 358, 373, 423, 422, 360, 379, 380, 609},
		// 300
		{610, 4: 452, 465, 10: 448, 451, 13: 463, 15: 461, 464, 450, 449, 456, 455, 453, 457, 458, 454, 459, 462, 28: 460},
		{160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 13: 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 41: 160, 160},
		{4: 164, 164, 12: 164, 40: 164, 44: 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 132: 434, 612},
		{4: 392, 394, 12: 395, 40: 341, 43: 427, 383, 382, 406, 388, 425, 387, 389, 391, 400, 418, 416, 424, 421, 401, 402, 413, 384, 409, 420, 385, 403, 407, 404, 410, 390, 399, 405, 419, 397, 408, 415, 414, 411, 412, 417, 386, 398, 374, 353, 354, 375, 426, 364, 357, 356, 377, 361, 369, 368, 363, 378, 372, 365, 362, 396, 370, 381, 367, 366, 355, 359, 371, 376, 358, 373, 423, 422, 360, 379, 380, 613},
		{162, 3: 615, 452, 465, 10: 448, 451, 13: 463, 15: 461, 464, 450, 449, 456, 455, 453, 457, 458, 454, 459, 462, 28: 460, 257: 614},
		// 305
		{617},
		{45: 382, 84: 616},
		{161},
		{165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 13: 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 41: 165, 165},
		{4: 164, 164, 12: 164, 40: 164, 44: 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 132: 434, 619},
		// 310
		{4: 392, 394, 12: 395, 40: 341, 43: 427, 383, 382, 406, 388, 425, 387, 389, 391, 400, 418, 416, 424, 421, 401, 402, 413, 384, 409, 420, 385, 403, 407, 404, 410, 390, 399, 405, 419, 397, 408, 415, 414, 411, 412, 417, 386, 398, 374, 353, 354, 375, 426, 364, 357, 356, 377, 361, 369, 368, 363, 378, 372, 365, 362, 396, 370, 381, 367, 366, 355, 359, 371, 376, 358, 373, 423, 422, 360, 379, 380, 620},
		{621, 4: 452, 465, 10: 448, 451, 13: 463, 15: 461, 464, 450, 449, 456, 455, 453, 457, 458, 454, 459, 462, 28: 460},
		{166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 13: 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 41: 166, 166},
		{4: 164, 164, 12: 164, 40: 164, 44: 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 132: 434, 623},
		{4: 392, 394, 12: 395, 40: 341, 43: 427, 383, 382, 406, 388, 425, 387, 389, 391, 400, 418, 416, 424, 421, 401, 402, 413, 384, 409, 420, 385, 403, 407, 404, 410, 390, 399, 405, 419, 397, 408, 415, 414, 411, 412, 417, 386, 398, 374, 353, 354, 375, 426, 364, 357, 356, 377, 361, 369, 368, 363, 378, 372, 365, 362, 396, 370, 381, 367, 366, 355, 359, 371, 376, 358, 373, 423, 422, 360, 379, 380, 624},
		// 315
		{625, 4: 452, 465, 10: 448, 451, 13: 463, 15: 461, 464, 450, 449, 456, 455, 453, 457, 458, 454, 459, 462, 28: 460},
		{167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 13: 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 41: 167, 167},
		{4: 164, 164, 12: 164, 40: 164, 44: 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 132: 434, 627},
		{4: 392, 394, 12: 395, 40: 341, 43: 427, 383, 382, 406, 388, 425, 387, 389, 391, 400, 418, 416, 424, 421, 401, 402, 413, 384, 409, 420, 385, 403, 407, 404, 410, 390, 399, 405, 419, 397, 408, 415, 414, 411, 412, 417, 386, 398, 374, 353, 354, 375, 426, 364, 357, 356, 377, 361, 369, 368, 363, 378, 372, 365, 362, 396, 370, 381, 367, 366, 355, 359, 371, 376, 358, 373, 423, 422, 360, 379, 380, 628},
		{629, 4: 452, 465, 10: 448, 451, 13: 463, 15: 461, 464, 450, 449, 456, 455, 453, 457, 458, 454, 459, 462, 28: 460},
		// 320
		{168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 13: 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 41: 168, 168},
		{4: 164, 164, 12: 164, 40: 164, 44: 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 132: 434, 631},
		{4: 392, 394, 12: 395, 40: 341, 43: 427, 383, 382, 406, 388, 425, 387, 389, 391, 400, 418, 416, 424, 421, 401, 402, 413, 384, 409, 420, 385, 403, 407, 404, 410, 390, 399, 405, 419, 397, 408, 415, 414, 411, 412, 417, 386, 398, 374, 353, 354, 375, 426, 364, 357, 356, 377, 361, 369, 368, 363, 378, 372, 365, 362, 396, 370, 381, 367, 366, 355, 359, 371, 376, 358, 373, 423, 422, 360, 379, 380, 632},
		{633, 4: 452, 465, 10: 448, 451, 13: 463, 15: 461, 464, 450, 449, 456, 455, 453, 457, 458, 454, 459, 462, 28: 460},
		{169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 13: 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 41: 169, 169},
		// 325
		{4: 164, 164, 12: 164, 40: 164, 44: 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 132: 434, 635},
		{4: 392, 394, 12: 395, 40: 341, 43: 427, 383, 382, 406, 388, 425, 387, 389, 391, 400, 418, 416, 424, 421, 401, 402, 413, 384, 409, 420, 385, 403, 407, 404, 410, 390, 399, 405, 419, 397, 408, 415, 414, 411, 412, 417, 386, 398, 374, 353, 354, 375, 426, 364, 357, 356, 377, 361, 369, 368, 363, 378, 372, 365, 362, 396, 370, 381, 367, 366, 355, 359, 371, 376, 358, 373, 423, 422, 360, 379, 380, 636},
		{637, 4: 452, 465, 10: 448, 451, 13: 463, 15: 461, 464, 450, 449, 456, 455, 453, 457, 458, 454, 459, 462, 28: 460},
		{170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 13: 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 41: 170, 170},
		{4: 164, 164, 10: 639, 12: 164, 40: 164, 44: 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 132: 434, 640},
		// 330
		{643},
		{4: 392, 394, 12: 395, 40: 341, 43: 427, 383, 382, 406, 388, 425, 387, 389, 391, 400, 418, 416, 424, 421, 401, 402, 413, 384, 409, 420, 385, 403, 407, 404, 410, 390, 399, 405, 419, 397, 408, 415, 414, 411, 412, 417, 386, 398, 374, 353, 354, 375, 426, 364, 357, 356, 377, 361, 369, 368, 363, 378, 372, 365, 362, 396, 370, 381, 367, 366, 355, 359, 371, 376, 358, 373, 423, 422, 360, 379, 380, 641},
		{642, 4: 452, 465, 10: 448, 451, 13: 463, 15: 461, 464, 450, 449, 456, 455, 453, 457, 458, 454, 459, 462, 28: 460},
		{171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 13: 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 41: 171, 171},
		{172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 13: 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 41: 172, 172},
		// 335
		{4: 392, 394, 12: 395, 40: 341, 43: 427, 383, 382, 406, 388, 425, 387, 389, 391, 400, 418, 416, 424, 421, 401, 402, 413, 384, 409, 420, 385, 403, 407, 404, 410, 390, 399, 405, 419, 397, 408, 415, 414, 411, 412, 417, 386, 398, 374, 353, 354, 375, 426, 364, 357, 356, 377, 361, 369, 368, 363, 378, 372, 365, 362, 396, 370, 381, 367, 366, 355, 359, 371, 376, 358, 373, 423, 422, 360, 379, 380, 645},
		{4: 452, 465, 9: 646, 448, 451, 13: 463, 15: 461, 464, 450, 449, 456, 455, 453, 457, 458, 454, 459, 462, 28: 460},
		{4: 392, 394, 12: 395, 40: 341, 43: 427, 383, 382, 406, 388, 425, 387, 389, 391, 400, 418, 416, 424, 421, 401, 402, 413, 384, 409, 420, 385, 403, 407, 404, 410, 390, 399, 405, 419, 397, 408, 415, 414, 411, 412, 417, 386, 398, 374, 353, 354, 375, 426, 364, 357, 356, 377, 361, 369, 368, 363, 378, 372, 365, 362, 396, 370, 381, 367, 366, 355, 359, 371, 376, 358, 373, 423, 422, 360, 379, 380, 647, 270: 648},
		{175, 4: 452, 465, 10: 448, 451, 13: 463, 15: 461, 464, 450, 449, 456, 455, 453, 457, 458, 454, 459, 462, 28: 460, 41: 175},
		{174, 41: 650, 248: 649},
		// 340
		{652},
		{4: 392, 394, 12: 395, 40: 341, 43: 427, 383, 382, 406, 388, 425, 387, 389, 391, 400, 418, 416, 424, 421, 401, 402, 413, 384, 409, 420, 385, 403, 407, 404, 410, 390, 399, 405, 419, 397, 408, 415, 414, 411, 412, 417, 386, 398, 374, 353, 354, 375, 426, 364, 357, 356, 377, 361, 369, 368, 363, 378, 372, 365, 362, 396, 370, 381, 367, 366, 355, 359, 371, 376, 358, 373, 423, 422, 360, 379, 380, 651},
		{173, 4: 452, 465, 10: 448, 451, 13: 463, 15: 461, 464, 450, 449, 456, 455, 453, 457, 458, 454, 459, 462, 28: 460},
		{176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 13: 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 41: 176, 176},
		{4: 392, 394, 12: 395, 40: 341, 43: 427, 383, 382, 406, 388, 425, 387, 389, 391, 400, 418, 416, 424, 421, 401, 402, 413, 384, 409, 420, 385, 403, 407, 404, 410, 390, 399, 405, 419, 397, 408, 415, 414, 411, 412, 417, 386, 398, 374, 353, 354, 375, 426, 364, 357, 356, 377, 361, 369, 368, 363, 378, 372, 365, 362, 396, 370, 381, 367, 366, 355, 359, 371, 376, 358, 373, 423, 422, 360, 379, 380, 654, 236: 655},
		// 345
		{178, 3: 178, 452, 465, 10: 448, 451, 13: 463, 15: 461, 464, 450, 449, 456, 455, 453, 457, 458, 454, 459, 462, 28: 460},
		{656, 3: 657},
		{194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 13: 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 41: 194, 194},
		{4: 392, 394, 12: 395, 40: 341, 43: 427, 383, 382, 406, 388, 425, 387, 389, 391, 400, 418, 416, 424, 421, 401, 402, 413, 384, 409, 420, 385, 403, 407, 404, 410, 390, 399, 405, 419, 397, 408, 415, 414, 411, 412, 417, 386, 398, 374, 353, 354, 375, 426, 364, 357, 356, 377, 361, 369, 368, 363, 378, 372, 365, 362, 396, 370, 381, 367, 366, 355, 359, 371, 376, 358, 373, 423, 422, 360, 379, 380, 658},
		{177, 3: 177, 452, 465, 10: 448, 451, 13: 463, 15: 461, 464, 450, 449, 456, 455, 453, 457, 458, 454, 459, 462, 28: 460},
		// 350
		{660, 4: 452, 465, 10: 448, 451, 13: 463, 15: 461, 464, 450, 449, 456, 455, 453, 457, 458, 454, 459, 462, 28: 460},
		{195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 13: 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 41: 195, 195},
		{197, 197, 197, 197, 197, 465, 197, 197, 197, 197, 197, 197, 13: 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 41: 197, 197},
		{212, 212, 212, 212, 212, 465, 212, 212, 212, 212, 212, 212, 13: 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 41: 212, 212},
		{190: 667, 202: 668, 216: 669, 666, 222: 670, 233: 665, 241: 664},
		// 355
		{220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 13: 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 41: 220, 220},
		{219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 13: 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 41: 219, 219},
		{218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 13: 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 41: 218, 218},
		{217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 13: 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 41: 217, 217},
		{216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 13: 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 41: 216, 216},
		// 360
		{215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 13: 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 41: 215, 215},
		{214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 13: 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 41: 214, 214},
		{221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 13: 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 41: 221, 221},
		{222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 13: 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 41: 222, 222},
		{223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 13: 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 41: 223, 223},
		// 365
		{40: 341, 43: 676, 179: 675},
		{258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 13: 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 41: 258, 258, 150: 258},
		{7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 13: 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 41: 7, 7, 150: 7},
		{154: 679, 167: 678},
		{12: 349, 119: 681, 134: 722},
		// 370
		{12: 349, 119: 681, 134: 680},
		{85, 85, 85, 85, 6: 85, 85, 85, 14: 85, 27: 85, 29: 85, 85, 85, 85, 115: 85, 85},
		{4: 687, 12: 689, 125: 685, 683, 128: 684, 686, 174: 688, 266: 682},
		{12: 349, 119: 721},
		{13: 66, 40: 341, 43: 510, 122: 66, 66, 66, 139: 509, 170: 718},
		// 375
		{72, 10: 72, 72, 72, 33: 72, 115: 72, 117: 72, 120: 72},
		{13: 66, 40: 341, 43: 510, 122: 66, 124: 66, 139: 509, 170: 716},
		{70, 10: 70, 70, 70, 33: 70, 115: 70, 117: 70, 120: 70},
		{68, 10: 68, 68, 68, 33: 68, 115: 68, 117: 68, 120: 68},
		{10: 701, 702, 45, 117: 703, 120: 704, 164: 705, 715},
		// 380
		{4: 75, 12: 349, 119: 690, 125: 75, 75, 128: 75, 75, 229: 691},
		{74, 4: 74, 33: 74, 115: 74, 125: 74, 74, 128: 74, 74},
		{4: 687, 125: 685, 683, 128: 684, 686, 174: 692},
		{75, 12: 349, 33: 75, 115: 75, 119: 690, 229: 693},
		{38, 33: 38, 115: 352, 140: 694},
		// 385
		{54, 33: 696, 238: 697, 695},
		{699},
		{4: 392, 394, 12: 395, 40: 341, 43: 427, 383, 382, 406, 388, 425, 387, 389, 391, 400, 418, 416, 424, 421, 401, 402, 413, 384, 409, 420, 385, 403, 407, 404, 410, 390, 399, 405, 419, 397, 408, 415, 414, 411, 412, 417, 386, 398, 374, 353, 354, 375, 426, 364, 357, 356, 377, 361, 369, 368, 363, 378, 372, 365, 362, 396, 370, 381, 367, 366, 355, 359, 371, 376, 358, 373, 423, 422, 360, 379, 380, 698},
		{53},
		{55, 4: 452, 465, 10: 448, 451, 13: 463, 15: 461, 464, 450, 449, 456, 455, 453, 457, 458, 454, 459, 462, 28: 460},
		// 390
		{10: 701, 702, 45, 117: 703, 120: 704, 164: 705, 700},
		{12: 56},
		{12: 52, 118: 52, 121: 52},
		{12: 51, 118: 51, 121: 51},
		{12: 50, 118: 50, 121: 50},
		// 395
		{3: 707, 44: 556, 135: 706},
		{12: 44, 118: 44, 121: 44},
		{3: 711, 141: 710},
		{44: 556, 135: 708},
		{141: 709},
		// 400
		{12: 46, 118: 46, 121: 46},
		{12: 49, 118: 49, 121: 49},
		{44: 556, 135: 713, 141: 712},
		{12: 48, 118: 48, 121: 48},
		{141: 714},
		// 405
		{12: 47, 118: 47, 121: 47},
		{12: 57},
		{122: 717},
		{71, 10: 71, 71, 71, 33: 71, 115: 71, 117: 71, 120: 71},
		{122: 720, 719},
		// 410
		{73, 10: 73, 73, 73, 33: 73, 115: 73, 117: 73, 120: 73},
		{69, 10: 69, 69, 69, 33: 69, 115: 69, 117: 69, 120: 69},
		{80, 80, 80, 80, 6: 80, 80, 80, 14: 80, 27: 80, 29: 80, 80, 80, 80, 115: 80, 80},
		{88, 88, 88, 88, 6: 88, 88, 88, 14: 88, 27: 88, 29: 88, 88, 88, 88, 115: 88, 88},
		{12: 349, 119: 681, 134: 727},
		// 415
		{12: 349, 119: 681, 134: 726},
		{84, 84, 84, 84, 6: 84, 84, 84, 14: 84, 27: 84, 29: 84, 84, 84, 84, 115: 84, 84},
		{86, 86, 86, 86, 6: 86, 86, 86, 14: 86, 27: 86, 29: 86, 86, 86, 86, 115: 86, 86},
		{89, 89, 89, 89, 6: 89, 89, 89, 14: 89, 27: 89, 29: 89, 89, 89, 89, 115: 89, 89},
		{91, 91, 91, 91, 6: 91, 91, 91, 14: 91, 27: 91, 29: 91, 91, 91, 91, 115: 91, 91},
		// 420
		{12: 349, 119: 681, 134: 732},
		{12: 349, 119: 681, 134: 731},
		{87, 87, 87, 87, 6: 87, 87, 87, 14: 87, 27: 87, 29: 87, 87, 87, 87, 115: 87, 87},
		{90, 90, 90, 90, 6: 90, 90, 90, 14: 90, 27: 90, 29: 90, 90, 90, 90, 115: 90, 90},
		{12: 349, 119: 745},
		// 425
		{12: 349, 119: 744},
		{13: 515, 124: 514, 173: 512, 176: 740},
		{13: 515, 124: 514, 173: 512, 176: 737},
		{10: 701, 702, 117: 703, 45, 120: 704, 164: 705, 738},
		{118: 739},
		// 430
		{12: 78},
		{10: 701, 702, 117: 703, 45, 120: 704, 45, 164: 705, 741},
		{118: 743, 121: 742},
		{12: 79},
		{12: 77},
		// 435
		{81, 81, 81, 81, 81, 6: 81, 81, 81, 14: 81, 27: 81, 29: 81, 81, 81, 81, 115: 81, 81, 125: 81, 81, 128: 81, 81, 142: 81, 149: 81},
		{82, 82, 82, 82, 82, 6: 82, 82, 82, 14: 82, 27: 82, 29: 82, 82, 82, 82, 115: 82, 82, 125: 82, 82, 128: 82, 82, 142: 82, 149: 82},
		{27: 40, 29: 40, 40, 40, 40},
		{127: 754, 131: 753, 175: 752, 200: 751},
		{127: 275, 131: 275},
		// 440
		{40: 341, 43: 340, 144: 750},
		{127: 274, 131: 274},
		{1: 278, 278, 783},
		{1: 273, 273, 273, 9: 273},
		{1: 66, 66, 66, 9: 66, 40: 341, 43: 510, 46: 66, 130: 66, 139: 781},
		// 445
		{40: 341, 43: 510, 139: 755, 153: 66},
		{153: 756},
		{40: 341, 43: 758, 230: 757},
		{15: 759},
		{1: 269, 269, 269, 9: 269, 15: 269, 46: 269, 130: 269},
		// 450
		{40: 341, 43: 758, 230: 760},
		{1: 267, 267, 267, 9: 267, 46: 764, 130: 267, 211: 761, 763, 762},
		{1: 270, 270, 270, 9: 270},
		{1: 264, 264, 264, 9: 264, 130: 770, 263: 769, 768},
		{1: 266, 266, 266, 9: 266, 130: 266},
		// 455
		{12: 765},
		{40: 341, 43: 518, 145: 517, 210: 766},
		{767, 137: 519},
		{1: 265, 265, 265, 9: 265, 130: 265},
		{1: 268, 268, 268, 9: 268},
		// 460
		{1: 263, 263, 263, 9: 263},
		{12: 771},
		{40: 341, 43: 427, 81: 374, 775, 774, 178: 773, 219: 772},
		{778, 3: 779},
		{261, 3: 261},
		// 465
		{150: 776},
		{136: 674},
		{4: 392, 394, 12: 395, 40: 341, 43: 427, 383, 382, 406, 388, 425, 387, 389, 391, 400, 418, 416, 424, 421, 401, 402, 413, 384, 409, 420, 385, 403, 407, 404, 410, 390, 399, 405, 419, 397, 408, 415, 414, 411, 412, 417, 386, 398, 374, 353, 354, 375, 426, 364, 357, 356, 377, 361, 369, 368, 363, 378, 372, 365, 362, 396, 370, 381, 367, 366, 355, 359, 371, 376, 358, 373, 423, 422, 360, 379, 380, 777},
		{259, 3: 259, 452, 465, 10: 448, 451, 13: 463, 15: 461, 464, 450, 449, 456, 455, 453, 457, 458, 454, 459, 462, 28: 460},
		{1: 262, 262, 262, 9: 262},
		// 470
		{40: 341, 43: 427, 81: 374, 775, 774, 178: 780},
		{260, 3: 260},
		{1: 267, 267, 267, 9: 267, 46: 764, 130: 267, 211: 782, 763, 762},
		{1: 271, 271, 271, 9: 271},
		{127: 754, 131: 753, 175: 784},
		// 475
		{1: 272, 272, 272, 9: 272},
		{1: 279, 279},
		{40: 12, 158: 789, 203: 794},
		{40: 12, 158: 789, 203: 788},
		{40: 341, 43: 791},
		// 480
		{48: 790},
		{40: 11},
		{116: 792},
		{40: 341, 43: 518, 145: 793},
		{1: 280, 280},
		// 485
		{40: 341, 43: 340, 144: 795},
		{1: 281, 281},
		{40: 341, 43: 427, 81: 374, 823, 277: 822},
		{127: 276, 131: 276, 206: 749, 748, 814},
		{40: 341, 43: 427, 81: 374, 801, 201: 800, 249: 799},
		// 490
		{3: 807, 9: 499, 155: 806},
		{3: 16, 9: 16},
		{166: 802},
		{12: 803},
		{40: 341, 43: 427, 81: 374, 775, 774, 178: 773, 219: 804},
		// 495
		{805, 3: 779},
		{3: 14, 9: 14},
		{1: 38, 38, 6: 38, 38, 38, 14: 38, 115: 352, 140: 809},
		{40: 341, 43: 427, 81: 374, 801, 201: 808},
		{3: 15, 9: 15},
		// 500
		{1: 36, 36, 6: 36, 36, 36, 14: 534, 156: 810},
		{1: 28, 28, 6: 28, 28, 545, 157: 811},
		{1: 26, 26, 6: 26, 548, 162: 812},
		{1: 24, 24, 6: 552, 160: 813},
		{1: 17, 17},
		// 505
		{127: 754, 131: 753, 175: 752, 200: 815},
		{3: 783, 9: 499, 155: 816},
		{1: 38, 38, 6: 38, 38, 38, 14: 38, 115: 352, 140: 817},
		{1: 36, 36, 6: 36, 36, 36, 14: 534, 156: 818},
		{1: 28, 28, 6: 28, 28, 545, 157: 819},
		// 510
		{1: 26, 26, 6: 26, 548, 162: 820},
		{1: 24, 24, 6: 552, 160: 821},
		{1: 277, 277},
		{3: 825, 9: 499, 155: 824},
		{3: 283, 9: 283},
		// 515
		{1: 38, 38, 6: 38, 38, 38, 14: 38, 115: 352, 140: 827},
		{40: 341, 43: 427, 81: 374, 826},
		{3: 282, 9: 282},
		{1: 36, 36, 6: 36, 36, 36, 14: 534, 156: 828},
		{1: 28, 28, 6: 28, 28, 545, 157: 829},
		// 520
		{1: 26, 26, 6: 26, 548, 162: 830},
		{1: 24, 24, 6: 552, 160: 831},
		{1: 284, 284},
		{40: 10, 158: 837, 204: 848},
		{159: 835},
		// 525
		{159: 285},
		{116: 10, 158: 837, 204: 836},
		{116: 840},
		{5: 838},
		{48: 839},
		// 530
		{40: 9, 116: 9},
		{40: 341, 43: 518, 145: 841},
		{12: 842},
		{40: 341, 43: 676, 179: 844, 265: 843},
		{845, 3: 846},
		// 535
		{2, 3: 2},
		{1: 287, 287},
		{40: 341, 43: 676, 179: 847},
		{1, 3: 1},
		{40: 341, 43: 340, 144: 849},
		// 540
		{1: 288, 288},
		{1: 291, 291, 27: 43, 29: 337, 43, 333, 43, 138: 336, 146: 335, 330, 324, 181: 327, 314, 185: 328, 315, 329, 316, 317, 191: 318, 331, 319, 320, 196: 313, 332, 321, 205: 322, 220: 334, 323, 225: 851, 325, 338, 326},
		{1: 306, 306},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}
	
func yyParse(yylex yyLexer) int {
	const yyError = 290

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)


	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() { 
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError])+yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x])+yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 2: {
		yyVAL.item = yyS[yypt-0].statement
	}
	case 18: {
		yyVAL.statement = nil
	}
	case 19: {
		yyVAL.statement = &ast.BeginStmt{}
	}
	case 20: {
		yyVAL.statement = &ast.CommitStmt{}
	}
	case 21: {
		yyVAL.statement = &ast.CreateGraphStmt{
			IfNotExists: yyS[yypt-1].item.(bool),
			GraphName:   yyS[yypt-0].item.(model.CIStr),
		}
	}
	case 22: {
		yyVAL.statement = &ast.CreateIndexStmt{
			KeyType:     yyS[yypt-7].item.(IndexKeyType),
			IfNotExists: yyS[yypt-5].item.(bool),
			LabelName:   yyS[yypt-3].item.(model.CIStr),
			Properties:  yyS[yypt-1].item.([]model.CIStr),
		}
	}
	case 23: {
		yyVAL.item = ast.IndexKeyTypeNone
	}
	case 24: {
		yyVAL.item = ast.IndexKeyTypeUnique
	}
	case 25: {
		ds := &ast.DeleteStmt{
			VariableReferences:  yyS[yypt-6].item.([]*ast.VariableReference),
			From:                yyS[yypt-5].item.(*ast.MatchClauseList)
		}
		if yyS[yypt-8].item != nil {
			ds.PathPatternMacros = yyS[yypt-8].item.([]*ast.PathPatternMacro)
		}
		if yyS[yypt-4].item != nil {
			ds.Where = yyS[yypt-4].item.(ast.ExprNode)
		}
		if yyS[yypt-3].item != nil {
			ds.GroupBy = yyS[yypt-3].item.(*ast.GroupByClause)
		}
		if yyS[yypt-2].item != nil {
			ds.Having = yyS[yypt-2].item.(*ast.HavingClause)
		}
		if yyS[yypt-1].item != nil {
			ds.OrderBy = yyS[yypt-1].item.(*ast.OrderByClause)
		}
		if yyS[yypt-0].item != nil {
			ds.Limit = yyS[yypt-0].item.(*ast.LimitClause)
		}
		yyVAL.statement = ds
	}
	case 26: {
		yyVAL.item = yyS[yypt-0].expr
	}
	case 27: {
		yyVAL.item = append(yyS[yypt-2].item.([]string), yyS[yypt-0].expr)
	}
	case 28: {
		yyVAL.statement = &ast.DropGraphStmt{
			IfExists:  yyS[yypt-1].item.(bool),
			GraphName: yyS[yypt-0].item.(model.CIStr),
		}
	}
	case 29: {
		yyVAL.statement = &ast.DropIndexStmt{
			IfExists:  yyS[yypt-3].item.(bool),
			IndexName: model.NewCIStr(yyS[yypt-2].ident),
			LabelName: yyS[yypt-0].item.(model.CIStr),
		}
	}
	case 30: {
		yyVAL.statement = &ast.ExplainStmt{
			Select: yyS[yypt-1].ident.(*ast.ExplainStmt),
		}
	}
	case 31: {
		is := &ast.InsertStmt{
			Insertions: yyS[yypt-0].item.([]*ast.GraphElementInsertion),
		}
		if yyS[yypt-1].item != nil {
			is.IntoGraphName = yyS[yypt-1].item.(*model.CIStr)
		}
		yyVAL.statement = is
	}
	case 32: {
		is := &ast.InsertStmt{
			Insertions: yyS[yypt-6].item.([]*ast.GraphElementInsertion),
			From:       yyS[yypt-5].item.(*ast.MatchClauseList)
		}
		if yyS[yypt-9].item != nil {
			is.PathPatternMacros = yyS[yypt-9].item.([]*ast.PathPatternMacro)
		}
		if yyS[yypt-7].item != nil {
			is.IntoGraphName = yyS[yypt-7].item.(*model.CIStr)
		}
		if yyS[yypt-4].item != nil {
			is.Where = yyS[yypt-4].item.(ast.ExprNode)
		}
		if yyS[yypt-3].item != nil {
			is.GroupBy = yyS[yypt-3].item.(*ast.GroupByClause)
		}
		if yyS[yypt-2].item != nil {
			is.Having = yyS[yypt-2].item.(*ast.HavingClause)
		}
		if yyS[yypt-1].item != nil {
			is.OrderBy = yyS[yypt-1].item.(*ast.OrderByClause)
		}
		if yyS[yypt-0].item != nil {
			is.Limit = yyS[yypt-0].item.(*ast.LimitClause)
		}
		yyVAL.statement = is
	}
	case 33: {
		yyVAL.item = nil
	}
	case 35: {
		yyVAL.item = &yyS[yypt-0].item.(model.CIStr)
	}
	case 36: {
		yyVAL.item = []*ast.GraphElementInsertion{yyS[yypt-0].item.(*ast.GraphElementInsertion)}
	}
	case 37: {
		yyVAL.item = append(yyS[yypt-2].item.([]*ast.GraphElementInsertion), yyS[yypt-0].item.(*ast.GraphElementInsertion))
	}
	case 38: {
		insertion := &ast.GraphElementInsertion{
			InsertionType:       InsertionTypeVertex,
			LabelsAndProperties: yyS[yypt-0].item.(*ast.LabelsAndProperties),
		}
		if yyS[yypt-1].item != nil {
			insertion.VariableName = yyS[yypt-1].item.(*model.CIStr)
		}
		yyVAL.item = insertion
	}
	case 39: {
		insertion := &ast.GraphElementInsertion{
			InsertionType:       InsertionTypeEdge,
			From:                yyS[yypt-3].ident.(string),
			To:                  yyS[yypt-1].ident.(string),
			LabelsAndProperties: yyS[yypt-0].item.(*ast.LabelsAndProperties),
		}
		if yyS[yypt-5].item != nil {
			insertion.VariableName = yyS[yypt-5].item.(*model.CIStr)
		}
		yyVAL.item = insertion
	}
	case 41: {
		lps := &ast.LabelsAndProperties{}
		if yyS[yypt-1].item != nil {
			lps.Labels = yyS[yypt-1].item.([]model.CIStr)
		}
		if yyS[yypt-0].item != nil {
			lps.Assignments = yyS[yypt-0].item.([]*ast.PropertyAssignment)
		}
		yyVAL.item = lps
	}
	case 42: {
		yyVAL.item = nil
	}
	case 44: {
		yyVAL.item = yyS[yypt-1].item
	}
	case 45: {
		yyVAL.item = nil
	}
	case 47: {
		yyVAL.item = yyS[yypt-1].item
	}
	case 48: {
		yyVAL.item = []*ast.PropertyAssignment{yyS[yypt-0].item.(ast.PropertyAssignment)}
	}
	case 49: {
		yyVAL.item = append(yyS[yypt-2].item.([]*ast.PropertyAssignment), yyS[yypt-0].item.(*ast.PropertyAssignment))
	}
	case 50: {
		yyVAL.item = &ast.PropertyAssignment{
			PropertyAccess:  yyS[yypt-2].expr.(*ast.PropertyAccess),
			ValueExpression: yyS[yypt-0].expr.(ast.ExprNode),
		}
	}
	case 51: {
		yyVAL.expr = &ast.PropertyAccess{
			VariableName: yyS[yypt-2].expr.(string),
			PropertyName: yyS[yypt-0].item.(model.CIStr),
		}
	}
	case 73: {
		yyVAL.expr = &ast.VariableReference{
			Name: yyS[yypt-0].ident.(string),
		}
	}
	case 81: {
		yyVAL.expr = &ast.StringLiteral{
			Value: yyS[yypt-0].ident.(string),
		}
	}
	case 82: {
		yyVAL.expr = &ast.IntegerLiteral{
			Value: yyS[yypt-0].item.(int64),
		}
	}
	case 83: {
		yyVAL.expr = &ast.DecimalLiteral{
			Value: yyS[yypt-0].item,
		}
	}
	case 84: {
		yyVAL.expr = &ast.BooleanLiteral{
			Value: false,
		}
	}
	case 85: {
		yyVAL.expr = &ast.BooleanLiteral{
			Value: true,
		}
	}
	case 86: {
		yyVAL.expr = &ast.DateLiteral{
			Value: time.Parse(yyS[yypt-0].ident.(string)),
		}
	}
	case 87: {
		yyVAL.expr = &ast.TimeLiteral{
			Value: time.Parse(yyS[yypt-0].ident.(string)),
		}
	}
	case 88: {
		yyVAL.expr = &ast.TimestampLiteral{
			Value: time.Parse(yyS[yypt-0].ident.(string)),
		}
	}
	case 89: {
		yyVAL.expr = &ast.IntervalLiteral{
			Value: strconv.Parse(yyS[yypt-1].ident.(string)),
			Unit:  yyS[yypt-0].item.(ast.DateTimeField),
		}
	}
	case 90: {
		yyVAL.item = DateTimeFieldYear
	}
	case 91: {
		yyVAL.item = DateTimeFieldMonth
	}
	case 92: {
		yyVAL.item = DateTimeFieldDay
	}
	case 93: {
		yyVAL.item = DateTimeFieldHour
	}
	case 94: {
		yyVAL.item = DateTimeFieldMinite
	}
	case 95: {
		yyVAL.item = DateTimeFieldSecond
	}
	case 96: {
		yyVAL.expr = &ast.BindVariable{}
	}
	case 97: {
		yyVAL.expr = &ast.UnaryOperationExpr{ Op: opcode.Minus, V:  yyS[yypt-0].expr}
	}
	case 98: {
		yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.Mul, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
	}
	case 99: {
		yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.Div, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
	}
	case 100: {
		yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.Mod, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
	}
	case 101: {
		yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.Plus, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
	}
	case 102: {
		yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.Minus, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
	}
	case 103: {
		yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.EQ, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
	}
	case 104: {
		yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.NE, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
	}
	case 105: {
		yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.GT, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
	}
	case 106: {
		yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.LT, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
	}
	case 107: {
		yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.GE, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
	}
	case 108: {
		yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.LE, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
	}
	case 109: {
		yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.LogicOr, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
	}
	case 110: {
		yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.LogicXor, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
	}
	case 111: {
		yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.LogicAnd, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
	}
	case 112: {
		v, ok := yyS[yypt-0].expr.(*ast.ExistsSubqueryExpr)
		if ok {
			v.Not = true
			yyVAL.expr = yyS[yypt-0].expr
		} else {
			yyVAL.expr = &ast.UnaryOperationExpr{ Op: opcode.Not, V:  yyS[yypt-0].expr}
		}
	}
	case 113: {
		yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.Concat, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
	}
	case 114: {
		yyVAL.expr &ast.ParenthesesExpr{Expr: yyS[yypt-1].expr}
	}
	case 115: {
		yyVAL.expr = &ast.FuncCallExpr{
			FnName: model.NewCIStr(yyS[yypt-3].ident),
			Args:   yyS[yypt-1].item.([]ast.ExprNode),
		}
	}
	case 131: {
		yyVAL.item = []ast.ExprNode{yyS[yypt-0].expr}
	}
	case 132: {
		yyVAL.item = append(yyS[yypt-2].item.([]ast.ExprNode), yyS[yypt-0].expr)
	}
	case 133: {
		yyVAL.expr = &ast.SubstrFuncExpr{
			Expr:  yyS[yypt-4].expr,
			Start: yyS[yypt-2].expr,
			For:   yyS[yypt-1].expr,
		}
	}
	case 135: {
		yyVAL.expr = nil
	}
	case 136: {
		yyVAL.expr = yyS[yypt-0].expr
	}
	case 137: {
		yyVAL.expr = &ast.AggregateFuncExpr{
			F:    yyS[yypt-3].ident,
			Args: []ast.ExprNode{
				&ast.IntegerLiteral{Value: 1},
			},
		}
	}
	case 138: {
		yyVAL.expr = &ast.AggregateFuncExpr{
			F:        yyS[yypt-4].ident,
			Args:     []ast.ExprNode{yyS[yypt-1].expr},
			Distinct: yyS[yypt-2].item.(bool),
		}
	}
	case 139: {
		yyVAL.expr = &ast.AggregateFuncExpr{
			F:        yyS[yypt-4].ident,
			Args:     []ast.ExprNode{yyS[yypt-1].expr},
			Distinct: yyS[yypt-2].item.(bool),
		}
	}
	case 140: {
		yyVAL.expr = &ast.AggregateFuncExpr{
			F:        yyS[yypt-4].ident,
			Args:     []ast.ExprNode{yyS[yypt-1].expr},
			Distinct: yyS[yypt-2].item.(bool),
		}
	}
	case 141: {
		yyVAL.expr = &ast.AggregateFuncExpr{
			F:        yyS[yypt-4].ident,
			Args:     []ast.ExprNode{yyS[yypt-1].expr},
			Distinct: yyS[yypt-2].item.(bool),
		}
	}
	case 142: {
		yyVAL.expr = &ast.AggregateFuncExpr{
			F:        yyS[yypt-4].ident,
			Args:     []ast.ExprNode{yyS[yypt-1].expr},
			Distinct: yyS[yypt-2].item.(bool),
		}
	}
	case 143: {
		yyVAL.expr = &ast.AggregateFuncExpr{
			F:        yyS[yypt-4].ident,
			Args:     []ast.ExprNode{yyS[yypt-1].expr},
			Distinct: yyS[yypt-2].item.(bool),
		}
	}
	case 144: {
		expr := &ast.AggregateFuncExpr{
			F:        yyS[yypt-5].ident,
			Args:     []ast.ExprNode{yyS[yypt-2].expr},
			Distinct: yyS[yypt-3].item.(bool),
		}
		if yyS[yypt-1].expr != nil {
			expr.Args = append(expr.Args, yyS[yypt-1].expr)
		}
		yyVAL.expr = expr
	}
	case 145: {
		yyVAL.item = false
	}
	case 146: {
		yyVAL.item = true
	}
	case 147: {
		yyVAL.expr = ""
	}
	case 148: {
		yyVAL.expr = yyS[yypt-0].expr
	}
	case 149: {
		yyVAL.expr = &ast.ExtractFuncExpr{
			ExtractField: yyS[yypt-3].item.(ast.ExtractField),
			Expr:         yyS[yypt-1].expr,
		}
	}
	case 150: {
		yyVAL.item = ast.ExtractFieldYear
	}
	case 151: {
		yyVAL.item = ast.ExtractFieldMonth
	}
	case 152: {
		yyVAL.item = ast.ExtractFieldDay
	}
	case 153: {
		yyVAL.item = ast.ExtractFieldHour
	}
	case 154: {
		yyVAL.item = ast.ExtractFieldMinute
	}
	case 155: {
		yyVAL.item = ast.ExtractFieldSecond
	}
	case 156: {
		yyVAL.item = ast.ExtractFieldTimezoneHour
	}
	case 157: {
		yyVAL.item = ast.ExtractFieldTimezoneMinute
	}
	case 158: {
		yyVAL.expr = &ast.IsNullExpr{
			Expr: yyS[yypt-2].expr,
		}
	}
	case 159: {
		yyVAL.expr = &ast.IsNullExpr{
			Expr: yyS[yypt-3].expr,
			Not:  true,
		}
	}
	case 160: {
		yyVAL.expr = &ast.CastFuncExpr{
			Expr:     yyS[yypt-3].expr,
			DataType: yyS[yypt-1].item.(ast.DataType),
		}
	}
	case 161: {
		yyVAL.item = ast.DataTypeString
	}
	case 162: {
		yyVAL.item = ast.DataTypeBoolean
	}
	case 163: {
		yyVAL.item = ast.DataTypeInteger
	}
	case 164: {
		yyVAL.item = ast.DataTypeInt
	}
	case 165: {
		yyVAL.item = ast.DataTypeLong
	}
	case 166: {
		yyVAL.item = ast.DataTypeFloat
	}
	case 167: {
		yyVAL.item = ast.DataTypeDouble
	}
	case 168: {
		yyVAL.item = ast.DataTypeDouble
	}
	case 169: {
		yyVAL.item = ast.DataTypeTime
	}
	case 170: {
		yyVAL.item = ast.DataTypeTimeWithZone
	}
	case 171: {
		yyVAL.item = ast.DataTypeTimestamp
	}
	case 172: {
		yyVAL.item = ast.DataTypeTimestampWithZone
	}
	case 175: {
		yyVAL.expr = &ast.CaseExpr{
			Value:       yyS[yypt-3].expr,
			WhenClauses: yyS[yypt-2].item.([]*ast.WhenClause),
			ElseClause:  yyS[yypt-1].expr,
		}
	}
	case 176: {
		yyVAL.expr = &ast.CaseExpr{
			WhenClauses: yyS[yypt-2].item.([]*ast.WhenClause),
			ElseClause:  yyS[yypt-1].expr,
		}
	}
	case 177: {
		yyVAL.item = []*ast.WhenClause{yyS[yypt-0].item.(*ast.WhenClause)}
	}
	case 178: {
		yyVAL.item = append(yyS[yypt-1].item.([]*ast.WhenClause), yyS[yypt-0].item.(*ast.WhenClause))
	}
	case 179: {
		yyVAL.item = &ast.WhenClause{
			Expr:   yyS[yypt-2].expr,
			Result: yyS[yypt-0].expr,
		}
	}
	case 180: {
		yyVAL.expr = nil
	}
	case 181: {
		yyVAL.expr = yyS[yypt-0].expr
	}
	case 182: {
		yyVAL.expr = &ast.PatternInExpr{
			Expr: yyS[yypt-2].expr,
			List: yyS[yypt-0].expr.([]ast.ExprNode),
		}
	}
	case 183: {
		yyVAL.expr = &ast.PatternInExpr{
			Expr: yyS[yypt-3].expr,
			List: yyS[yypt-1].ident.([]ast.ExprNode),
			Not:  true,
		}
	}
	case 184: {
		yyVAL.expr = yyS[yypt-1].item
	}
	case 185: {
		yyVAL.item = []ast.ExprNode{yyS[yypt-0].expr}
	}
	case 186: {
		yyVAL.item = append(yyS[yypt-2].item.([]ast.ExprNode), yyS[yypt-0].expr)
	}
	case 187: {
		yyVAL.expr = &ast.ExistsSubqueryExpr{
			Sel: yyS[yypt-0].expr,
		}
	}
	case 188: {
		yyVAL.expr = &ast.SubqueryExpr{
			Query: yyS[yypt-1].statement,
		}
	}
	case 191: {
		ss := &ast.SelectStmt{
			Select: yyS[yypt-6].item.(*ast.SelectStmt),
			From:   yyS[yypt-5].item.(*ast.MatchClauseList),
		}
		if yyS[yypt-7].item != nil {
			ss.PathPatternMacros = yyS[yypt-7].item.([]*ast.PathPatternMacro)
		}
		if yyS[yypt-4].item != nil {
			ss.Where = yyS[yypt-4].item.(ast.ExprNode)
		}
		if yyS[yypt-3].item != nil {
			ss.GroupBy = yyS[yypt-3].item.(*ast.GroupByClause)
		}
		if yyS[yypt-2].item != nil {
			ss.Having = yyS[yypt-2].item.(*ast.HavingClause)
		}
		if yyS[yypt-1].item != nil {
			ss.OrderBy = yyS[yypt-1].item.(*ast.OrderByClause)
		}
		if yyS[yypt-0].item != nil {
			ss.Limit = yyS[yypt-0].item.(*ast.LimitClause)
		}
		yyVAL.statement = ss
	}
	case 192: {
		yyVAL.item = &ast.SelectClause{
			Distinct: yyS[yypt-1].item.(bool),
			Elements: yyS[yypt-0].item.([]*ast.SelectElement),
		}
	}
	case 193: {
		yyVAL.item = &ast.SelectClause{
			Start: true,
		}
	}
	case 194: {
		yyVAL.item = []*ast.SelectEelement{yyS[yypt-0].item.(*ast.SelectEelement)}
	}
	case 195: {
		yyVAL.item = append(yyS[yypt-2].item.([]*ast.SelectEelement), yyS[yypt-0].item.(*ast.SelectEelement))
	}
	case 196: {
		yyVAL.item = &ast.SelectEelement{
			ExpAsVar: yyS[yypt-0].item.(*ast.ExpAsVar),
		}
	}
	case 197: {
		yyVAL.item = &ast.SelectEelement{
			Identifier: yyS[yypt-2].ident,
			Prefix:     yyS[yypt-0].item.(string),
		}
	}
	case 198: {
		ev := &ast.ExpAsVar{
			Expr: yyS[yypt-1].expr.(ast.ExprNode),
		}
		if yyS[yypt-0].item != nil {
			ev.AsName = yyS[yypt-0].item.(*model.CIStr)
		}
		yyVAL.item = ev
	}
	case 199: {
		yyVAL.item = ""
	}
	case 200: {
		yyVAL.item = yyS[yypt-1].ident
	}
	case 201: {
		yyVAL.item = nil
	}
	case 202: {
		yyVAL.item = &yyS[yypt-0].item.(model.CIStr)
	}
	case 203: {
		yyVAL.item = model.NewCIStr(yyS[yypt-0].ident)
	}
	case 204: {
		yyVAL.item = model.NewCIStr(yyS[yypt-0].ident)
	}
	case 205: {
		yyVAL.item = yyS[yypt-0].item.(*ast.MatchClauseList)
	}
	case 206: {
		yyVAL.item = &ast.MatchClauseList{
			Matches: []*ast.MatchClause{yyS[yypt-0].item.(*ast.MatchClause)},
		}
	}
	case 207: {
		ml := yyS[yypt-2].item.(*ast.MatchClauseList)
		ml.Matches = append(ml.Matches, yyS[yypt-0].item.(*ast.MatchClause))
		yyVAL.item = ml
	}
	case 208: {
		yyVAL.item = &ast.MatchClause{
			Graph: yyS[yypt-1].item.(*model.CIStr),
			Paths: yyS[yypt-2].item.([]*ast.PathPattern),
		}
	}
	case 209: {
		yyVAL.item = &yyS[yypt-0].item.(model.CIStr)
	}
	case 210: {
		yyVAL.item = (*model.CIStr)(nil)
	}
	case 213: {
		yyVAL.item = []*ast.PathPattern{yyS[yypt-0].item.(*ast.PathPattern)}
	}
	case 214: {
		yyVAL.item = yyS[yypt-1].item.([]*ast.PathPattern)
	}
	case 215: {
		yyVAL.item = yyS[yypt-0].item.(*ast.PathPattern)
	}
	case 216: {
		yyVAL.item = append(yyS[yypt-2].item.([]*ast.PathPattern), yyS[yypt-0].item.(*ast.PathPattern))
	}
	case 217: {
		pp := yyS[yypt-0].item.(*ast.PathPattern)
		pp.Tp = ast.PathPatternSimple
		yyVAL.item = pp
	}
	case 218: {
		pp := yyS[yypt-0].item.(*ast.PathPattern)
		pp.Tp = ast.PathPatternAny
		yyVAL.item = pp
	}
	case 219: {
		pp := yyS[yypt-0].item.(*ast.PathPattern)
		pp.Tp = ast.PathPatternAnyShortest
		yyVAL.item = pp
	}
	case 220: {
		pp := yyS[yypt-0].item.(*ast.PathPattern)
		pp.Tp = ast.PathPatternAllShortest
		yyVAL.item = pp
	}
	case 221: {
		pp := yyS[yypt-0].item.(*ast.PathPattern)
		pp.Tp = ast.PathPatternTopKShortest
		pp.TopK = yyS[yypt-2].item.(uint64)
		yyVAL.item = pp
	}
	case 222: {
		pp := yyS[yypt-0].item.(*ast.PathPattern)
		pp.Tp = ast.PathPatternAnyCheapest
		yyVAL.item = pp
	}
	case 223: {
		pp := yyS[yypt-0].item.(*ast.PathPattern)
		pp.Tp = ast.PathPatternAllCheapest
		yyVAL.item = pp
	}
	case 224: {
		pp := yyS[yypt-0].item.(*ast.PathPattern)
		pp.Tp = ast.PathPatternTopKCheapest
		pp.TopK = yyS[yypt-2].item.(uint64)
		yyVAL.item = pp
	}
	case 225: {
		pp := yyS[yypt-0].item.(*ast.PathPattern)
		pp.Tp = ast.PathPatternAll
		yyVAL.item = pp
	}
	case 226: {
		yyVAL.item = &ast.PathPattern{Vertices: []*ast.VertexPattern{yyS[yypt-0].item.(*ast.VertexPattern)}}
	}
	case 227: {
		pp := yyS[yypt-2].item.(*ast.PathPattern)
		pp.Vertices = append(pp.Vertices, yyS[yypt-0].item.(*ast.VertexPattern))
		pp.Connections = append(pp.Connections, yyS[yypt-1].item.(*ast.ReachabilityPathExpr))
		yyVAL.item = pp
	}
	case 228: {
		pp := yyS[yypt-2].item.(*ast.PathPattern)
		pp.Vertices = append(pp.Vertices, yyS[yypt-0].item.(*ast.VertexPattern))
		pp.Connections = append(pp.Connections, yyS[yypt-1].item.(*ast.EdgePattern))
		yyVAL.item = pp
	}
	case 229: {
		yyVAL.item = &ast.PathPattern{
			Vertices:    []*ast.VertexPattern{yyS[yypt-2].item.(*ast.VertexPattern), yyS[yypt-0].item.(*ast.VertexPattern)},
			Connections: []ast.VertexPairConnection{yyS[yypt-1].item.(*ast.QuantifiedPathExpr)},
		}
	}
	case 230: {
		yyVAL.item = &ast.ReachabilityPathExpr{
			Labels:     yyS[yypt-2].item.([]model.CIStr),
			Direction:  ast.EdgeDirectionOutgoing,
			Quantifier: yyS[yypt-1].item.(*ast.PatternQuantifier),
		}
	}
	case 231: {
		yyVAL.item = &ast.ReachabilityPathExpr{
			Labels:     yyS[yypt-2].item.([]model.CIStr),
			Direction:  ast.EdgeDirectionIncoming,
			Quantifier: yyS[yypt-1].item.(*ast.PatternQuantifier),
		}
	}
	case 232: {
		yyVAL.item = &ast.ReachabilityPathExpr{
			Labels:     yyS[yypt-2].item.([]model.CIStr),
			Direction:  ast.EdgeDirectionAnyDirected,
			Quantifier: yyS[yypt-1].item.(*ast.PatternQuantifier),
		}
	}
	case 233: {
		yyVAL.item = &ast.VertexPattern{Variable: yyS[yypt-1].item.(*ast.VariableSpec)}
	}
	case 234: {
		yyVAL.item = (*ast.VertexPattern)(nil)
	}
	case 236: {
		yyVAL.item = &ast.EdgePattern{
			Variable:  yyS[yypt-1].item.(*ast.VariableSpec),
			Direction: ast.EdgeDirectionOutgoing,
		}
	}
	case 237: {
		yyVAL.item = &ast.EdgePattern{Direction: ast.EdgeDirectionOutgoing}
	}
	case 238: {
		yyVAL.item = &ast.EdgePattern{
			Variable:  yyS[yypt-1].item.(*ast.VariableSpec),
			Direction: ast.EdgeDirectionIncoming,
		}
	}
	case 239: {
		yyVAL.item = &ast.EdgePattern{Direction: ast.EdgeDirectionIncoming}
	}
	case 240: {
		yyVAL.item = &ast.EdgePattern{
			Variable:  yyS[yypt-1].item.(*ast.VariableSpec),
			Direction: ast.EdgeDirectionAnyDirected,
		}
	}
	case 241: {
		yyVAL.item = &ast.EdgePattern{Direction: ast.EdgeDirectionAnyDirected}
	}
	case 242: {
		v := &ast.VariableSpec{
			Name:   yyS[yypt-1].item.(model.CIStr),
			Labels: yyS[yypt-0].item.([]model.CIStr),
		}
		if v.Name.L == "" {
			v.Anonymous = true
		}
		yyVAL.item = v
	}
	case 243: {
		yyVAL.item = nil
	}
	case 244: {
		yyVAL.item = &model.NewCIStr(yyS[yypt-0].ident)
	}
	case 245: {
		yyVAL.item = yyS[yypt-0].item.([]model.CIStr)
	}
	case 246: {
		yyVAL.item = []model.CIStr(nil)
	}
	case 250: {
		yyVAL.item = []model.CIStr{yyS[yypt-0].item.(model.CIStr)}
	}
	case 251: {
		yyVAL.item = append(yyS[yypt-2].item.([]model.CIStr), yyS[yypt-0].item.(model.CIStr))
	}
	case 252: {
		yyVAL.item = &ast.QuantifiedPathExpr{
			Edge:       yyS[yypt-1].item.(*ast.EdgePattern),
			Quantifier: yyS[yypt-0].item.(*ast.PatternQuantifier),
		}
	}
	case 253: {
		q := &ast.QuantifiedPathExpr{
			Edge:        yyS[yypt-5].item.(*ast.EdgePattern),
			Quantifier:  yyS[yypt-0].item.(*ast.PatternQuantifier),
			Source:      yyS[yypt-6].item.(*ast.VertexPattern),
			Destination: yyS[yypt-4].item.(*ast.VertexPattern),
		}
		if yyS[yypt-3].item != nil {
			q.Where = yyS[yypt-3].item.(ast.ExprNode)
		}
		if yyS[yypt-2].item != nil {
			q.Cost = yyS[yypt-2].item.(ast.ExprNode)
		}
		yyVAL.item = q
	}
	case 254: {
		yyVAL.item = yyS[yypt-0].expr.(ast.ExprNode)
	}
	case 255: {
		yyVAL.item = nil
	}
	case 257: {
		yyVAL.item = &ast.PatternQuantifier{Tp: ast.PatternQuantifierZeroOrMore, M: 18446744073709551615}
	}
	case 258: {
		yyVAL.item = &ast.PatternQuantifier{Tp: ast.PatternQuantifierOneOrMore, N: 1, M: 18446744073709551615}
	}
	case 259: {
		yyVAL.item = &ast.PatternQuantifier{Tp: ast.PatternQuantifierOptional, N: 0, M: 1}
	}
	case 260: {
		yyVAL.item = &ast.PatternQuantifier{Tp: ast.PatternQuantifierExactlyN, N: yyS[yypt-1].item.(uint64), M: yyS[yypt-1].item.(uint64)}
	}
	case 261: {
		yyVAL.item = &ast.PatternQuantifier{Tp: ast.PatternQuantifierNOrMore, N: yyS[yypt-2].item.(uint64), M: 18446744073709551615}
	}
	case 262: {
		yyVAL.item = &ast.PatternQuantifier{Tp: ast.PatternQuantifierBetweenNAndM, N: yyS[yypt-3].item.(uint64), M: yyS[yypt-1].item.(uint64)}
	}
	case 263: {
		yyVAL.item = &ast.PatternQuantifier{Tp: ast.PatternQuantifierBetweenZeroAndM, N: 0, M: yyS[yypt-1].item.(uint64)}
	}
	case 264: {
		yyVAL.item = (*ast.PatternQuantifier)(nil)
	}
	case 266: {
		yyVAL.item = nil
	}
	case 268: {
		yyVAL.item = []*ast.PathPatternMacro{yyS[yypt-0].item.(*ast.PathPatternMacro)}
	}
	case 269: {
		yyVAL.item = append(yyS[yypt-1].item.([]*ast.PathPatternMacro), yyS[yypt-0].item.(*ast.PathPatternMacro))
	}
	case 270: {
		p := &ast.PathPatternMacro{
			Name: model.NewCIStr(yyS[yypt-3].ident),
			Path: yyS[yypt-1].item.(*ast.PathPattern),
		}
		if yyS[yypt-0].item != nil {
			p.Where = yyS[yypt-0].item.(ast.ExprNode)
		}
		yyVAL.item = p
	}
	case 271: {
 		yyVAL.item = nil
 	}
	case 272: {
		yyVAL.item = yyS[yypt-1].ident
	}
	case 273: {
 		yyVAL.item = nil
 	}
	case 274: {
		yyVAL.item = yyS[yypt-0].item
	}
	case 276: {
		yyVAL.item = append(yyS[yypt-2].item.([]*ast.ByItem), yyS[yypt-0].item.(*ast.ByItem))
	}
	case 277: {
		yyVAL.item = &ast.ByItem{
			Expr: yyS[yypt-0].item.(*ast.ExpAsVar),
		}
	}
	case 278: {
		yyVAL.item = &ast.ByItem{
			Expr: yyS[yypt-1].item.(*ast.ExpAsVar),
			Desc: yyS[yypt-0].item.(bool),
		}
	}
	case 279: {
		yyVAL.item = false
	}
	case 280: {
		yyVAL.item = true
	}
	case 281: {
		yyVAL.item = nil
	}
	case 282: {
		yyVAL.item = &ast.HavingClause{
			Expr: yyS[yypt-0].expr,
		}
	}
	case 283: {
 		yyVAL.item = nil
 	}
	case 284: {
		yyVAL.item = &ast.OrderByClause{
			Items: yyS[yypt-0].item.([]*ast.ByItem),
		}
	}
	case 285: {
 		yyVAL.item = nil
 	}
	case 286: {
		yyVAL.item = &ast.LimitClause{
			Count: yyS[yypt-1].ident.(ast.ExprNode),
		}
	}
	case 287: {
		yyVAL.item = &ast.LimitClause{
			Count:  yyS[yypt-0].item.(ast.ExprNode),
			Offset: yyS[yypt-2].item.(ast.ExprNode),
		}
	}
	case 288: {
		yyVAL.item = &ast.LimitClause{
			Count:  yyS[yypt-2].item.(ast.ExprNode),
			Offset: yyS[yypt-0].item.(ast.ExprNode),
		}
	}
	case 290: {
		yyVAL.item = &ast.BindVariable{}
	}
	case 291: {
		yyVAL.item = &ast.IntegerLiteral{
			Value: yyS[yypt-0].item,
		}
	}
	case 292: {
		us := &ast.UpdateStmt{
			Updates:  yyS[yypt-6].item.([]*ast.GraphElementUpdate),
			From:     yyS[yypt-5].item.(*ast.MatchClauseList)
		}
		if yyS[yypt-8].item != nil {
			us.PathPatternMacros = yyS[yypt-8].item.([]*ast.PathPatternMacro)
		}
		if yyS[yypt-4].item != nil {
			us.Where = yyS[yypt-4].item.(ast.ExprNode)
		}
		if yyS[yypt-3].item != nil {
			us.GroupBy = yyS[yypt-3].item.(*ast.GroupByClause)
		}
		if yyS[yypt-2].item != nil {
			us.Having = yyS[yypt-2].item.(*ast.HavingClause)
		}
		if yyS[yypt-1].item != nil {
			us.OrderBy = yyS[yypt-1].item.(*ast.OrderByClause)
		}
		if yyS[yypt-0].item != nil {
			us.Limit = yyS[yypt-0].item.(*ast.LimitClause)
		}
		yyVAL.statement = us
	}
	case 293: {
		yyVAL.item = []*ast.GraphElementUpdate{yyS[yypt-0].item.(*ast.GraphElementUpdate)}
	}
	case 294: {
		yyVAL.item = append(yyS[yypt-2].item.([]*ast.GraphElementUpdate), yyS[yypt-0].item.(*ast.GraphElementUpdate))
	}
	case 295: {
		yyVAL.item = &ast.GraphElementUpdate{
			VariableName: yyS[yypt-4].expr.(*ast.GraphElementUpdate),
			Assignments:  yyS[yypt-1].item.([]*ast.PropertyAssignment)
		}
	}
	case 296: {
		yyVAL.statement = &ast.UseStmt{}
	}
	case 297: {
		yyVAL.item = false
	}
	case 298: {
		yyVAL.item = true
	}
	case 299: {
		yyVAL.item = false
	}
	case 300: {
		yyVAL.item = true
	}
	case 301: {
		yyVAL.item = model.NewCIStr(yyS[yypt-0].ident)
	}
	case 302: {
		yyVAL.item = model.NewCIStr(yyS[yypt-0].ident)
	}
	case 303: {
		yyVAL.item = model.NewCIStr(yyS[yypt-0].ident)
	}
	case 304: {
		yyVAL.item = model.NewCIStr(yyS[yypt-0].ident)
	}
	case 308: {
		yyVAL.item = append(yyS[yypt-2].item.([]model.CIStr), yyS[yypt-0].item.(model.CIStr))
	}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}




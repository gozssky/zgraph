// Code generated by goyacc - DO NOT EDIT.

// Copyright 2013 The ql Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSES/QL-LICENSE file.

// Copyright 2022 zGraph Authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Initial yacc source generated by ebnf2y[1]
// at 2013-10-04 23:10:47.861401015 +0200 CEST
//
//  $ ebnf2y -o ql.y -oe ql.ebnf -start StatementList -pkg ql -p _
//
//   [1]: http://github.com/cznic/ebnf2y

// The parser implements the PGQL specification
//
// - https://pgql-lang.org/spec/1.5/
//

package parser

import __yyfmt__ "fmt"

import (
	"strings"

	"github.com/vescale/zgraph/parser/ast"
)

type yySymType struct {
	yys       int
	offset    int // offset
	item      interface{}
	ident     string
	expr      ast.ExprNode
	statement ast.StmtNode
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault               = 57486
	yyEofCode               = 57344
	and                     = 57427
	andand                  = 57352
	andnot                  = 57463
	as                      = 57354
	asc                     = 57355
	assignmentEq            = 57464
	autoIncrement           = 57451
	begin                   = 57428
	between                 = 57482
	bigIntType              = 57356
	bitLit                  = 57462
	bitType                 = 57435
	boolType                = 57432
	booleanType             = 57431
	by                      = 57357
	charType                = 57359
	character               = 57358
	comment                 = 57430
	commit                  = 57429
	create                  = 57360
	currentTs               = 57361
	data                    = 57440
	database                = 57362
	dateType                = 57442
	datetimeType            = 57441
	day                     = 57443
	decLit                  = 57459
	decimalType             = 57363
	defaultKwd              = 57364
	deleteKwd               = 57365
	desc                    = 57366
	destination             = 57367
	div                     = 57483
	doubleAtIdentifier      = 57350
	doubleType              = 57368
	drop                    = 57369
	duplicate               = 57448
	edge                    = 57370
	empty                   = 57478
	eq                      = 57465
	yyErrCode               = 57345
	exists                  = 57371
	explain                 = 57433
	falseKwd                = 57372
	fixed                   = 57434
	floatLit                = 57458
	floatType               = 57373
	from                    = 57374
	ge                      = 57466
	graph                   = 57457
	group                   = 57375
	having                  = 57376
	hexLit                  = 57461
	identifier              = 57346
	ifKwd                   = 57377
	index                   = 57378
	insert                  = 57379
	insertValues            = 57480
	int1Type                = 57380
	int2Type                = 57381
	int3Type                = 57382
	int4Type                = 57383
	int8Type                = 57384
	intLit                  = 57460
	intType                 = 57387
	integerType             = 57385
	into                    = 57386
	invalid                 = 57351
	invisible               = 57453
	is                      = 57388
	jss                     = 57468
	juss                    = 57469
	key                     = 57389
	le                      = 57467
	limit                   = 57390
	localTime               = 57391
	localTs                 = 57392
	longtextType            = 57393
	lowerThanKey            = 57481
	lowerThanStringLitToken = 57479
	lsh                     = 57470
	match                   = 57394
	mediumIntType           = 57395
	mediumtextType          = 57396
	mod                     = 57484
	national                = 57436
	ncharType               = 57437
	neg                     = 57485
	neq                     = 57471
	neqSynonym              = 57472
	not                     = 57397
	not2                    = 57477
	null                    = 57398
	nulleq                  = 57473
	numericType             = 57399
	nvarcharType            = 57454
	offset                  = 57450
	on                      = 57400
	or                      = 57426
	order                   = 57401
	outgoing                = 57476
	paramMarker             = 57474
	pipes                   = 57353
	pipesAsOr               = 57456
	precisionType           = 57402
	primary                 = 57403
	realType                = 57404
	references              = 57405
	rollback                = 57449
	rsh                     = 57475
	selectKwd               = 57406
	set                     = 57407
	signed                  = 57446
	singleAtIdentifier      = 57349
	smallIntType            = 57408
	source                  = 57409
	sqlTsiYear              = 57455
	stringLit               = 57348
	tableKwd                = 57410
	textType                = 57439
	timeType                = 57445
	timestampType           = 57444
	tinyIntType             = 57411
	tinytextType            = 57412
	trueKwd                 = 57413
	underscoreCS            = 57347
	unique                  = 57414
	unsigned                = 57415
	update                  = 57416
	use                     = 57417
	value                   = 57447
	values                  = 57418
	varcharType             = 57420
	varcharacter            = 57419
	varying                 = 57421
	vertex                  = 57422
	visible                 = 57452
	where                   = 57423
	xor                     = 57424
	yearType                = 57438
	zerofill                = 57425

	yyMaxDepth = 200
	yyTabOfs   = -341
)

var (
	yyPrec = map[int]int{
		empty:                   0,
		value:                   1,
		lowerThanStringLitToken: 2,
		insertValues:            3,
		lowerThanKey:            4,
		key:                     5,
		'(':                     6,
		')':                     7,
		assignmentEq:            8,
		pipes:                   9,
		or:                      9,
		pipesAsOr:               9,
		xor:                     10,
		andand:                  11,
		and:                     11,
		between:                 12,
		'|':                     13,
		'&':                     14,
		rsh:                     15,
		lsh:                     15,
		'-':                     16,
		'+':                     16,
		'*':                     17,
		'/':                     17,
		'%':                     17,
		div:                     17,
		mod:                     17,
		'^':                     18,
		'~':                     19,
		neg:                     19,
		not:                     20,
		',':                     21,
	}

	yyXLAT = map[int]int{
		44:    0,   // ',' (236x)
		41:    1,   // ')' (234x)
		57430: 2,   // comment (216x)
		57451: 3,   // autoIncrement (213x)
		57446: 4,   // signed (147x)
		57344: 5,   // $end (139x)
		59:    6,   // ';' (138x)
		57397: 7,   // not (132x)
		40:    8,   // '(' (124x)
		57364: 9,   // defaultKwd (115x)
		57398: 10,  // null (113x)
		57403: 11,  // primary (113x)
		57414: 12,  // unique (113x)
		57367: 13,  // destination (111x)
		57405: 14,  // references (111x)
		57409: 15,  // source (111x)
		57450: 16,  // offset (107x)
		57435: 17,  // bitType (106x)
		57431: 18,  // booleanType (106x)
		57432: 19,  // boolType (106x)
		57441: 20,  // datetimeType (106x)
		57442: 21,  // dateType (106x)
		57434: 22,  // fixed (106x)
		57436: 23,  // national (106x)
		57437: 24,  // ncharType (106x)
		57454: 25,  // nvarcharType (106x)
		57455: 26,  // sqlTsiYear (106x)
		57444: 27,  // timestampType (106x)
		57445: 28,  // timeType (106x)
		57438: 29,  // yearType (106x)
		57453: 30,  // invisible (105x)
		57452: 31,  // visible (105x)
		57428: 32,  // begin (104x)
		57429: 33,  // commit (104x)
		57433: 34,  // explain (104x)
		57449: 35,  // rollback (104x)
		57447: 36,  // value (104x)
		57448: 37,  // duplicate (103x)
		57457: 38,  // graph (103x)
		57440: 39,  // data (102x)
		57443: 40,  // day (102x)
		57346: 41,  // identifier (102x)
		57439: 42,  // textType (102x)
		57400: 43,  // on (89x)
		57390: 44,  // limit (82x)
		57401: 45,  // order (78x)
		57423: 46,  // where (64x)
		57376: 47,  // having (61x)
		57375: 48,  // group (53x)
		57374: 49,  // from (51x)
		57415: 50,  // unsigned (45x)
		57425: 51,  // zerofill (45x)
		57536: 52,  // Identifier (42x)
		57602: 53,  // UnreservedKeywords (42x)
		57354: 54,  // as (41x)
		57407: 55,  // set (39x)
		58:    56,  // ':' (38x)
		57388: 57,  // is (38x)
		57419: 58,  // varcharacter (37x)
		57420: 59,  // varcharType (37x)
		46:    60,  // '.' (36x)
		57358: 61,  // character (36x)
		57359: 62,  // charType (36x)
		57465: 63,  // eq (36x)
		57356: 64,  // bigIntType (35x)
		57363: 65,  // decimalType (35x)
		57368: 66,  // doubleType (35x)
		57373: 67,  // floatType (35x)
		57380: 68,  // int1Type (35x)
		57381: 69,  // int2Type (35x)
		57382: 70,  // int3Type (35x)
		57383: 71,  // int4Type (35x)
		57384: 72,  // int8Type (35x)
		57385: 73,  // integerType (35x)
		57387: 74,  // intType (35x)
		57395: 75,  // mediumIntType (35x)
		57399: 76,  // numericType (35x)
		57404: 77,  // realType (35x)
		57408: 78,  // smallIntType (35x)
		57411: 79,  // tinyIntType (35x)
		57418: 80,  // values (35x)
		57349: 81,  // singleAtIdentifier (20x)
		57523: 82,  // Expression (16x)
		57348: 83,  // stringLit (13x)
		57527: 84,  // FieldLen (12x)
		57427: 85,  // and (10x)
		57352: 86,  // andand (10x)
		57500: 87,  // ColumnName (10x)
		57460: 88,  // intLit (10x)
		57616: 89,  // logAnd (10x)
		57617: 90,  // logOr (10x)
		57426: 91,  // or (10x)
		57456: 92,  // pipesAsOr (10x)
		57424: 93,  // xor (10x)
		57377: 94,  // ifKwd (9x)
		57389: 95,  // key (9x)
		93:    96,  // ']' (8x)
		57558: 97,  // NUM (7x)
		57355: 98,  // asc (6x)
		57366: 99,  // desc (6x)
		57551: 100, // LengthNum (6x)
		57568: 101, // OptFieldLen (6x)
		57596: 102, // TableName (6x)
		45:    103, // '-' (5x)
		57529: 104, // FieldOpt (5x)
		57530: 105, // FieldOpts (5x)
		57406: 106, // selectKwd (5x)
		57582: 107, // SelectStmt (5x)
		57421: 108, // varying (5x)
		42:    109, // '*' (4x)
		60:    110, // '<' (4x)
		57512: 111, // DatabaseName (4x)
		57522: 112, // ExprOrDefault (4x)
		57468: 113, // jss (4x)
		57476: 114, // outgoing (4x)
		57610: 115, // VariableName (4x)
		57611: 116, // VariableNameOpt (4x)
		57612: 117, // VariableSpecification (4x)
		57488: 118, // Assignment (3x)
		57494: 119, // ByItem (3x)
		57499: 120, // ColumnList (3x)
		57459: 121, // decLit (3x)
		57458: 122, // floatLit (3x)
		57538: 123, // IfNotExists (3x)
		57378: 124, // index (3x)
		57540: 125, // IndexInvisible (3x)
		57541: 126, // IndexName (3x)
		57542: 127, // IndexOptionList (3x)
		57547: 128, // KeyOrIndex (3x)
		57552: 129, // LimitClauseOpt (3x)
		57553: 130, // LimitOption (3x)
		57570: 131, // OrderByClauseOpt (3x)
		57474: 132, // paramMarker (3x)
		57579: 133, // RowValue (3x)
		57416: 134, // update (3x)
		57613: 135, // VertexPattern (3x)
		57614: 136, // WhereClauseOpt (3x)
		57489: 137, // AssignmentList (2x)
		57491: 138, // BeginStmt (2x)
		57357: 139, // by (2x)
		57495: 140, // ByList (2x)
		57498: 141, // ColumnDef (2x)
		57503: 142, // ColumnOption (2x)
		57506: 143, // ColumnSetValue (2x)
		57508: 144, // CommitStmt (2x)
		57509: 145, // Constraint (2x)
		57360: 146, // create (2x)
		57510: 147, // CreateDatabaseStmt (2x)
		57511: 148, // CreateTableStmt (2x)
		57361: 149, // currentTs (2x)
		57362: 150, // database (2x)
		57365: 151, // deleteKwd (2x)
		57515: 152, // DeleteStmt (2x)
		57369: 153, // drop (2x)
		57516: 154, // DropDatabaseStmt (2x)
		57517: 155, // DropTableStmt (2x)
		57519: 156, // EmptyStmt (2x)
		57371: 157, // exists (2x)
		57521: 158, // ExplainStmt (2x)
		57524: 159, // Field (2x)
		57532: 160, // FloatOpt (2x)
		57537: 161, // IfExists (2x)
		57379: 162, // insert (2x)
		57543: 163, // InsertStmt (2x)
		57391: 164, // localTime (2x)
		57392: 165, // localTs (2x)
		57394: 166, // match (2x)
		57555: 167, // MatchClause (2x)
		57560: 168, // NowSym (2x)
		57561: 169, // NowSymFunc (2x)
		57562: 170, // NowSymOptionFraction (2x)
		57563: 171, // NowSymOptionFractionParentheses (2x)
		57564: 172, // NumLiteral (2x)
		57572: 173, // PathPattern (2x)
		57576: 174, // Precision (2x)
		57578: 175, // RollbackStmt (2x)
		57584: 176, // SimplePathPattern (2x)
		57585: 177, // Statement (2x)
		57591: 178, // TableAsName (2x)
		57592: 179, // TableAsNameOpt (2x)
		57593: 180, // TableElement (2x)
		57603: 181, // UpdateStmt (2x)
		57417: 182, // use (2x)
		57604: 183, // UseStmt (2x)
		57607: 184, // ValuesList (2x)
		57605: 185, // ValueSym (2x)
		43:    186, // '+' (1x)
		57487: 187, // AnyDirectedEdgePattern (1x)
		57464: 188, // assignmentEq (1x)
		57462: 189, // bitLit (1x)
		57492: 190, // BitValueType (1x)
		57493: 191, // BooleanType (1x)
		57496: 192, // Char (1x)
		57497: 193, // ColonOrIsKeyword (1x)
		57501: 194, // ColumnNameList (1x)
		57502: 195, // ColumnNameListOpt (1x)
		57504: 196, // ColumnOptionList (1x)
		57505: 197, // ColumnOptionListOpt (1x)
		57507: 198, // ColumnSetValueList (1x)
		57513: 199, // DateAndTimeType (1x)
		57514: 200, // DefaultValueExpr (1x)
		57370: 201, // edge (1x)
		57518: 202, // EdgePattern (1x)
		57520: 203, // Entry (1x)
		57372: 204, // falseKwd (1x)
		57525: 205, // FieldAsName (1x)
		57526: 206, // FieldAsNameOpt (1x)
		57528: 207, // FieldList (1x)
		57531: 208, // FixedPointType (1x)
		57533: 209, // FloatingPointType (1x)
		57534: 210, // GroupByClauseOpt (1x)
		57535: 211, // HavingClauseOpt (1x)
		57461: 212, // hexLit (1x)
		57539: 213, // IncomingEdgePattern (1x)
		57544: 214, // InsertValues (1x)
		57545: 215, // IntegerType (1x)
		57386: 216, // into (1x)
		57546: 217, // IntoOpt (1x)
		57548: 218, // KeyOrIndexOpt (1x)
		57550: 219, // LabelList (1x)
		57554: 220, // Literal (1x)
		57556: 221, // MatchClauseList (1x)
		57557: 222, // NChar (1x)
		57565: 223, // NumericType (1x)
		57559: 224, // NVarchar (1x)
		57566: 225, // OnClauseOpt (1x)
		57567: 226, // OnDuplicateKeyUpdate (1x)
		57569: 227, // Order (1x)
		57571: 228, // OutgoingEdgePattern (1x)
		57573: 229, // PathPatternList (1x)
		57574: 230, // PathPrimary (1x)
		57575: 231, // PathPrimaryList (1x)
		57402: 232, // precisionType (1x)
		57577: 233, // PredicateOpt (1x)
		57580: 234, // RowsPerMatchOpt (1x)
		57581: 235, // SelectFieldList (1x)
		57583: 236, // SignedLiteral (1x)
		57586: 237, // StatementList (1x)
		57588: 238, // StringLiteral (1x)
		57589: 239, // StringType (1x)
		57590: 240, // SubSelect (1x)
		57594: 241, // TableElementList (1x)
		57595: 242, // TableElementListOpt (1x)
		57410: 243, // tableKwd (1x)
		57597: 244, // TableType (1x)
		57413: 245, // trueKwd (1x)
		57601: 246, // Type (1x)
		57606: 247, // Values (1x)
		57608: 248, // ValuesOpt (1x)
		57609: 249, // Varchar (1x)
		57422: 250, // vertex (1x)
		57615: 251, // Year (1x)
		57486: 252, // $default (0x)
		37:    253, // '%' (0x)
		38:    254, // '&' (0x)
		47:    255, // '/' (0x)
		94:    256, // '^' (0x)
		124:   257, // '|' (0x)
		126:   258, // '~' (0x)
		57463: 259, // andnot (0x)
		57490: 260, // AssignmentListOpt (0x)
		57482: 261, // between (0x)
		57483: 262, // div (0x)
		57350: 263, // doubleAtIdentifier (0x)
		57478: 264, // empty (0x)
		57345: 265, // error (0x)
		57466: 266, // ge (0x)
		57480: 267, // insertValues (0x)
		57351: 268, // invalid (0x)
		57469: 269, // juss (0x)
		57549: 270, // Label (0x)
		57467: 271, // le (0x)
		57393: 272, // longtextType (0x)
		57481: 273, // lowerThanKey (0x)
		57479: 274, // lowerThanStringLitToken (0x)
		57470: 275, // lsh (0x)
		57396: 276, // mediumtextType (0x)
		57484: 277, // mod (0x)
		57485: 278, // neg (0x)
		57471: 279, // neq (0x)
		57472: 280, // neqSynonym (0x)
		57477: 281, // not2 (0x)
		57473: 282, // nulleq (0x)
		57353: 283, // pipes (0x)
		57475: 284, // rsh (0x)
		57587: 285, // StringList (0x)
		57598: 286, // TextString (0x)
		57599: 287, // TextStringList (0x)
		57600: 288, // TextType (0x)
		57412: 289, // tinytextType (0x)
		57347: 290, // underscoreCS (0x)
	}

	yySymNames = []string{
		"','",
		"')'",
		"comment",
		"autoIncrement",
		"signed",
		"$end",
		"';'",
		"not",
		"'('",
		"defaultKwd",
		"null",
		"primary",
		"unique",
		"destination",
		"references",
		"source",
		"offset",
		"bitType",
		"booleanType",
		"boolType",
		"datetimeType",
		"dateType",
		"fixed",
		"national",
		"ncharType",
		"nvarcharType",
		"sqlTsiYear",
		"timestampType",
		"timeType",
		"yearType",
		"invisible",
		"visible",
		"begin",
		"commit",
		"explain",
		"rollback",
		"value",
		"duplicate",
		"graph",
		"data",
		"day",
		"identifier",
		"textType",
		"on",
		"limit",
		"order",
		"where",
		"having",
		"group",
		"from",
		"unsigned",
		"zerofill",
		"Identifier",
		"UnreservedKeywords",
		"as",
		"set",
		"':'",
		"is",
		"varcharacter",
		"varcharType",
		"'.'",
		"character",
		"charType",
		"eq",
		"bigIntType",
		"decimalType",
		"doubleType",
		"floatType",
		"int1Type",
		"int2Type",
		"int3Type",
		"int4Type",
		"int8Type",
		"integerType",
		"intType",
		"mediumIntType",
		"numericType",
		"realType",
		"smallIntType",
		"tinyIntType",
		"values",
		"singleAtIdentifier",
		"Expression",
		"stringLit",
		"FieldLen",
		"and",
		"andand",
		"ColumnName",
		"intLit",
		"logAnd",
		"logOr",
		"or",
		"pipesAsOr",
		"xor",
		"ifKwd",
		"key",
		"']'",
		"NUM",
		"asc",
		"desc",
		"LengthNum",
		"OptFieldLen",
		"TableName",
		"'-'",
		"FieldOpt",
		"FieldOpts",
		"selectKwd",
		"SelectStmt",
		"varying",
		"'*'",
		"'<'",
		"DatabaseName",
		"ExprOrDefault",
		"jss",
		"outgoing",
		"VariableName",
		"VariableNameOpt",
		"VariableSpecification",
		"Assignment",
		"ByItem",
		"ColumnList",
		"decLit",
		"floatLit",
		"IfNotExists",
		"index",
		"IndexInvisible",
		"IndexName",
		"IndexOptionList",
		"KeyOrIndex",
		"LimitClauseOpt",
		"LimitOption",
		"OrderByClauseOpt",
		"paramMarker",
		"RowValue",
		"update",
		"VertexPattern",
		"WhereClauseOpt",
		"AssignmentList",
		"BeginStmt",
		"by",
		"ByList",
		"ColumnDef",
		"ColumnOption",
		"ColumnSetValue",
		"CommitStmt",
		"Constraint",
		"create",
		"CreateDatabaseStmt",
		"CreateTableStmt",
		"currentTs",
		"database",
		"deleteKwd",
		"DeleteStmt",
		"drop",
		"DropDatabaseStmt",
		"DropTableStmt",
		"EmptyStmt",
		"exists",
		"ExplainStmt",
		"Field",
		"FloatOpt",
		"IfExists",
		"insert",
		"InsertStmt",
		"localTime",
		"localTs",
		"match",
		"MatchClause",
		"NowSym",
		"NowSymFunc",
		"NowSymOptionFraction",
		"NowSymOptionFractionParentheses",
		"NumLiteral",
		"PathPattern",
		"Precision",
		"RollbackStmt",
		"SimplePathPattern",
		"Statement",
		"TableAsName",
		"TableAsNameOpt",
		"TableElement",
		"UpdateStmt",
		"use",
		"UseStmt",
		"ValuesList",
		"ValueSym",
		"'+'",
		"AnyDirectedEdgePattern",
		"assignmentEq",
		"bitLit",
		"BitValueType",
		"BooleanType",
		"Char",
		"ColonOrIsKeyword",
		"ColumnNameList",
		"ColumnNameListOpt",
		"ColumnOptionList",
		"ColumnOptionListOpt",
		"ColumnSetValueList",
		"DateAndTimeType",
		"DefaultValueExpr",
		"edge",
		"EdgePattern",
		"Entry",
		"falseKwd",
		"FieldAsName",
		"FieldAsNameOpt",
		"FieldList",
		"FixedPointType",
		"FloatingPointType",
		"GroupByClauseOpt",
		"HavingClauseOpt",
		"hexLit",
		"IncomingEdgePattern",
		"InsertValues",
		"IntegerType",
		"into",
		"IntoOpt",
		"KeyOrIndexOpt",
		"LabelList",
		"Literal",
		"MatchClauseList",
		"NChar",
		"NumericType",
		"NVarchar",
		"OnClauseOpt",
		"OnDuplicateKeyUpdate",
		"Order",
		"OutgoingEdgePattern",
		"PathPatternList",
		"PathPrimary",
		"PathPrimaryList",
		"precisionType",
		"PredicateOpt",
		"RowsPerMatchOpt",
		"SelectFieldList",
		"SignedLiteral",
		"StatementList",
		"StringLiteral",
		"StringType",
		"SubSelect",
		"TableElementList",
		"TableElementListOpt",
		"tableKwd",
		"TableType",
		"trueKwd",
		"Type",
		"Values",
		"ValuesOpt",
		"Varchar",
		"vertex",
		"Year",
		"$default",
		"'%'",
		"'&'",
		"'/'",
		"'^'",
		"'|'",
		"'~'",
		"andnot",
		"AssignmentListOpt",
		"between",
		"div",
		"doubleAtIdentifier",
		"empty",
		"error",
		"ge",
		"insertValues",
		"invalid",
		"juss",
		"Label",
		"le",
		"longtextType",
		"lowerThanKey",
		"lowerThanStringLitToken",
		"lsh",
		"mediumtextType",
		"mod",
		"neg",
		"neq",
		"neqSynonym",
		"not2",
		"nulleq",
		"pipes",
		"rsh",
		"StringList",
		"TextString",
		"TextStringList",
		"TextType",
		"tinytextType",
		"underscoreCS",
	}

	yyTokenLiteralStrings = map[int]string{
		57430: "COMMENT",
		57451: "AUTO_INCREMENT",
		57446: "SIGNED",
		57397: "NOT",
		57364: "DEFAULT",
		57398: "NULL",
		57403: "PRIMARY",
		57414: "UNIQUE",
		57367: "DESTINATION",
		57405: "REFERENCES",
		57409: "SOURCE",
		57450: "OFFSET",
		57435: "BIT",
		57431: "BOOLEAN",
		57432: "BOOL",
		57441: "DATETIME",
		57442: "DATE",
		57434: "FIXED",
		57436: "NATIONAL",
		57437: "NCHAR",
		57454: "NVARCHAR",
		57455: "SQL_TSI_YEAR",
		57444: "TIMESTAMP",
		57445: "TIME",
		57438: "YEAR",
		57453: "INVISIBLE",
		57452: "VISIBLE",
		57428: "BEGIN",
		57429: "COMMIT",
		57433: "EXPLAIN",
		57449: "ROLLBACK",
		57447: "VALUE",
		57448: "DUPLICATE",
		57457: "GRAPH",
		57440: "DATA",
		57443: "DAY",
		57346: "identifier",
		57439: "TEXT",
		57400: "ON",
		57390: "LIMIT",
		57401: "ORDER",
		57423: "WHERE",
		57376: "HAVING",
		57375: "GROUP",
		57374: "FROM",
		57415: "UNSIGNED",
		57425: "ZEROFILL",
		57354: "AS",
		57407: "SET",
		57388: "IS",
		57419: "VARCHARACTER",
		57420: "VARCHAR",
		57358: "CHARACTER",
		57359: "CHAR",
		57465: "=",
		57356: "BIGINT",
		57363: "DECIMAL",
		57368: "DOUBLE",
		57373: "FLOAT",
		57380: "INT1",
		57381: "INT2",
		57382: "INT3",
		57383: "INT4",
		57384: "INT8",
		57385: "INTEGER",
		57387: "INT",
		57395: "MEDIUMINT",
		57399: "NUMERIC",
		57404: "REAL",
		57408: "SMALLINT",
		57411: "TINYINT",
		57418: "VALUES",
		57349: "identifier with single leading at",
		57348: "string literal",
		57427: "AND",
		57352: "&&",
		57460: "integer literal",
		57426: "OR",
		57424: "XOR",
		57377: "IF",
		57389: "KEY",
		57355: "ASC",
		57366: "DESC",
		57406: "SELECT",
		57421: "VARYING",
		57468: "->",
		57476: "-]",
		57459: "decimal literal",
		57458: "floating-point literal",
		57378: "INDEX",
		57474: "?",
		57416: "UPDATE",
		57357: "BY",
		57360: "CREATE",
		57361: "CURRENT_TIMESTAMP",
		57362: "DATABASE",
		57365: "DELETE",
		57369: "DROP",
		57371: "EXISTS",
		57379: "INSERT",
		57391: "LOCALTIME",
		57392: "LOCALTIMESTAMP",
		57394: "MATCH",
		57417: "USE",
		57464: ":=",
		57462: "bit literal",
		57370: "EDGE",
		57372: "FALSE",
		57461: "hexadecimal literal",
		57386: "INTO",
		57402: "PRECISION",
		57410: "TABLE",
		57413: "TRUE",
		57422: "VERTEX",
		57463: "&^",
		57350: "identifier with double leading at",
		57466: ">=",
		57351: "a special token never used by parser, used by lexer to indicate error",
		57469: "->>",
		57467: "<=",
		57393: "LONGTEXT",
		57470: "<<",
		57396: "MEDIUMTEXT",
		57471: "!=",
		57472: "<>",
		57473: "<=>",
		57353: "||",
		57475: ">>",
		57412: "TINYTEXT",
		57347: "UNDERSCORE_CHARSET",
	}

	yyReductions = map[int]struct{ xsym, components int }{
		0:   {0, 1},
		1:   {203, 1},
		2:   {237, 1},
		3:   {237, 3},
		4:   {177, 1},
		5:   {177, 1},
		6:   {177, 1},
		7:   {177, 1},
		8:   {177, 1},
		9:   {177, 1},
		10:  {177, 1},
		11:  {177, 1},
		12:  {177, 1},
		13:  {177, 1},
		14:  {177, 1},
		15:  {177, 1},
		16:  {177, 1},
		17:  {177, 1},
		18:  {156, 0},
		19:  {138, 1},
		20:  {144, 1},
		21:  {147, 5},
		22:  {148, 5},
		23:  {244, 1},
		24:  {244, 1},
		25:  {242, 0},
		26:  {242, 3},
		27:  {241, 1},
		28:  {241, 3},
		29:  {180, 1},
		30:  {180, 1},
		31:  {141, 3},
		32:  {197, 0},
		33:  {197, 1},
		34:  {196, 1},
		35:  {196, 2},
		36:  {142, 2},
		37:  {142, 1},
		38:  {142, 1},
		39:  {142, 2},
		40:  {142, 1},
		41:  {142, 2},
		42:  {142, 2},
		43:  {142, 2},
		44:  {142, 2},
		45:  {142, 2},
		46:  {142, 5},
		47:  {200, 1},
		48:  {200, 1},
		49:  {236, 1},
		50:  {236, 2},
		51:  {236, 2},
		52:  {220, 1},
		53:  {220, 1},
		54:  {220, 1},
		55:  {220, 1},
		56:  {220, 1},
		57:  {220, 1},
		58:  {220, 1},
		59:  {220, 1},
		60:  {220, 1},
		61:  {238, 1},
		62:  {238, 2},
		63:  {172, 1},
		64:  {172, 1},
		65:  {172, 1},
		66:  {171, 3},
		67:  {171, 1},
		68:  {170, 1},
		69:  {170, 3},
		70:  {170, 4},
		71:  {169, 1},
		72:  {169, 1},
		73:  {169, 1},
		74:  {168, 1},
		75:  {168, 1},
		76:  {168, 1},
		77:  {145, 7},
		78:  {145, 7},
		79:  {145, 7},
		80:  {120, 1},
		81:  {120, 3},
		82:  {194, 1},
		83:  {194, 3},
		84:  {195, 0},
		85:  {195, 1},
		86:  {128, 1},
		87:  {128, 1},
		88:  {218, 0},
		89:  {218, 1},
		90:  {127, 0},
		91:  {127, 1},
		92:  {127, 2},
		93:  {125, 1},
		94:  {125, 1},
		95:  {246, 1},
		96:  {246, 1},
		97:  {246, 1},
		98:  {223, 3},
		99:  {223, 2},
		100: {223, 3},
		101: {223, 3},
		102: {223, 2},
		103: {215, 1},
		104: {215, 1},
		105: {215, 1},
		106: {215, 1},
		107: {215, 1},
		108: {215, 1},
		109: {215, 1},
		110: {215, 1},
		111: {215, 1},
		112: {215, 1},
		113: {215, 1},
		114: {191, 1},
		115: {191, 1},
		116: {208, 1},
		117: {208, 1},
		118: {208, 1},
		119: {209, 1},
		120: {209, 1},
		121: {209, 1},
		122: {209, 2},
		123: {190, 1},
		124: {239, 2},
		125: {239, 1},
		126: {239, 2},
		127: {239, 1},
		128: {239, 2},
		129: {239, 2},
		130: {192, 1},
		131: {192, 1},
		132: {222, 1},
		133: {222, 2},
		134: {222, 2},
		135: {249, 2},
		136: {249, 2},
		137: {249, 1},
		138: {249, 1},
		139: {224, 2},
		140: {224, 2},
		141: {224, 1},
		142: {224, 2},
		143: {224, 2},
		144: {224, 3},
		145: {224, 3},
		146: {224, 2},
		147: {251, 1},
		148: {251, 1},
		149: {288, 1},
		150: {288, 2},
		151: {288, 1},
		152: {288, 1},
		153: {199, 1},
		154: {199, 2},
		155: {199, 2},
		156: {199, 2},
		157: {199, 3},
		158: {84, 3},
		159: {101, 0},
		160: {101, 1},
		161: {104, 1},
		162: {104, 1},
		163: {104, 1},
		164: {105, 0},
		165: {105, 2},
		166: {160, 0},
		167: {160, 1},
		168: {160, 1},
		169: {174, 5},
		170: {285, 1},
		171: {285, 3},
		172: {286, 1},
		173: {286, 1},
		174: {286, 1},
		175: {287, 1},
		176: {287, 3},
		177: {97, 1},
		178: {152, 7},
		179: {179, 0},
		180: {179, 1},
		181: {178, 1},
		182: {178, 2},
		183: {154, 4},
		184: {155, 4},
		185: {158, 2},
		186: {163, 5},
		187: {217, 0},
		188: {217, 1},
		189: {214, 5},
		190: {214, 4},
		191: {214, 4},
		192: {214, 2},
		193: {214, 2},
		194: {185, 1},
		195: {185, 1},
		196: {184, 1},
		197: {184, 3},
		198: {133, 3},
		199: {248, 0},
		200: {248, 1},
		201: {247, 3},
		202: {247, 1},
		203: {112, 1},
		204: {112, 1},
		205: {143, 3},
		206: {198, 0},
		207: {198, 1},
		208: {198, 3},
		209: {226, 0},
		210: {226, 5},
		211: {118, 3},
		212: {137, 1},
		213: {137, 3},
		214: {260, 0},
		215: {260, 1},
		216: {175, 1},
		217: {240, 3},
		218: {107, 9},
		219: {235, 1},
		220: {207, 1},
		221: {207, 3},
		222: {159, 1},
		223: {159, 3},
		224: {159, 5},
		225: {159, 2},
		226: {206, 0},
		227: {206, 1},
		228: {205, 1},
		229: {205, 2},
		230: {205, 1},
		231: {205, 2},
		232: {82, 3},
		233: {82, 3},
		234: {82, 3},
		235: {82, 3},
		236: {82, 2},
		237: {90, 1},
		238: {90, 1},
		239: {89, 1},
		240: {89, 1},
		241: {221, 1},
		242: {221, 3},
		243: {167, 4},
		244: {229, 1},
		245: {229, 3},
		246: {173, 1},
		247: {176, 2},
		248: {231, 0},
		249: {231, 3},
		250: {230, 1},
		251: {202, 1},
		252: {202, 1},
		253: {202, 1},
		254: {228, 1},
		255: {228, 3},
		256: {213, 1},
		257: {213, 3},
		258: {187, 1},
		259: {187, 3},
		260: {135, 3},
		261: {117, 2},
		262: {116, 0},
		263: {116, 1},
		264: {233, 2},
		265: {193, 1},
		266: {193, 1},
		267: {219, 0},
		268: {270, 0},
		269: {270, 3},
		270: {270, 1},
		271: {225, 0},
		272: {225, 1},
		273: {234, 0},
		274: {136, 0},
		275: {136, 2},
		276: {210, 0},
		277: {210, 3},
		278: {140, 1},
		279: {140, 3},
		280: {119, 1},
		281: {119, 2},
		282: {227, 1},
		283: {227, 1},
		284: {211, 0},
		285: {211, 2},
		286: {131, 0},
		287: {131, 3},
		288: {129, 0},
		289: {129, 2},
		290: {129, 4},
		291: {129, 4},
		292: {130, 1},
		293: {130, 1},
		294: {100, 1},
		295: {181, 8},
		296: {183, 2},
		297: {161, 0},
		298: {161, 2},
		299: {123, 0},
		300: {123, 3},
		301: {111, 1},
		302: {102, 1},
		303: {102, 3},
		304: {87, 1},
		305: {87, 3},
		306: {87, 5},
		307: {126, 0},
		308: {126, 1},
		309: {115, 1},
		310: {52, 1},
		311: {52, 1},
		312: {53, 1},
		313: {53, 1},
		314: {53, 1},
		315: {53, 1},
		316: {53, 1},
		317: {53, 1},
		318: {53, 1},
		319: {53, 1},
		320: {53, 1},
		321: {53, 1},
		322: {53, 1},
		323: {53, 1},
		324: {53, 1},
		325: {53, 1},
		326: {53, 1},
		327: {53, 1},
		328: {53, 1},
		329: {53, 1},
		330: {53, 1},
		331: {53, 1},
		332: {53, 1},
		333: {53, 1},
		334: {53, 1},
		335: {53, 1},
		336: {53, 1},
		337: {53, 1},
		338: {53, 1},
		339: {53, 1},
		340: {53, 1},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [467][]uint16{
		// 0
		{5: 323, 323, 32: 359, 360, 364, 366, 106: 367, 356, 134: 368, 138: 346, 144: 347, 146: 361, 348, 349, 151: 362, 350, 363, 351, 352, 345, 158: 353, 162: 365, 354, 175: 355, 177: 344, 181: 357, 369, 358, 203: 342, 237: 343},
		{5: 341},
		{5: 340, 806},
		{5: 339, 339},
		{5: 337, 337},
		// 5
		{5: 336, 336},
		{5: 335, 335},
		{5: 334, 334},
		{5: 333, 333},
		{5: 332, 332},
		// 10
		{5: 331, 331},
		{5: 330, 330},
		{5: 329, 329},
		{5: 328, 328},
		{5: 327, 327},
		// 15
		{5: 326, 326},
		{5: 325, 325},
		{5: 324, 324},
		{5: 322, 322},
		{5: 321, 321},
		// 20
		{38: 601, 201: 604, 244: 602, 250: 603},
		{49: 595},
		{150: 587, 243: 588},
		{106: 367, 586},
		{2: 154, 154, 154, 16: 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 216: 541, 540},
		// 25
		{5: 125, 125},
		{2: 376, 397, 392, 7: 439, 16: 396, 381, 377, 378, 387, 388, 380, 382, 383, 400, 401, 390, 391, 384, 399, 398, 374, 375, 379, 395, 393, 394, 402, 386, 389, 372, 385, 52: 471, 373, 81: 437, 472, 109: 470, 159: 469, 207: 468, 235: 467},
		{2: 376, 397, 392, 16: 396, 381, 377, 378, 387, 388, 380, 382, 383, 400, 401, 390, 391, 384, 399, 398, 374, 375, 379, 395, 393, 394, 402, 386, 389, 372, 385, 52: 404, 373, 102: 403},
		{2: 376, 397, 392, 16: 396, 381, 377, 378, 387, 388, 380, 382, 383, 400, 401, 390, 391, 384, 399, 398, 374, 375, 379, 395, 393, 394, 402, 386, 389, 372, 385, 52: 371, 373, 111: 370},
		{5: 45, 45},
		// 30
		{40, 40, 5: 40, 40, 43: 40, 40, 40, 40, 40, 40},
		{31, 31, 31, 31, 31, 31, 31, 8: 31, 16: 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 54: 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31},
		{30, 30, 30, 30, 30, 30, 30, 8: 30, 16: 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 54: 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30},
		{29, 29, 29, 29, 29, 29, 29, 8: 29, 16: 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 54: 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29},
		{28, 28, 28, 28, 28, 28, 28, 8: 28, 16: 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 54: 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28},
		// 35
		{27, 27, 27, 27, 27, 27, 27, 8: 27, 16: 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 54: 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27},
		{26, 26, 26, 26, 26, 26, 26, 8: 26, 16: 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 54: 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26},
		{25, 25, 25, 25, 25, 25, 25, 8: 25, 16: 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 54: 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25},
		{24, 24, 24, 24, 24, 24, 24, 8: 24, 16: 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 54: 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24},
		{23, 23, 23, 23, 23, 23, 23, 8: 23, 16: 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 54: 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23},
		// 40
		{22, 22, 22, 22, 22, 22, 22, 8: 22, 16: 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 54: 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22},
		{21, 21, 21, 21, 21, 21, 21, 8: 21, 16: 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 54: 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21},
		{20, 20, 20, 20, 20, 20, 20, 8: 20, 16: 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 54: 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20},
		{19, 19, 19, 19, 19, 19, 19, 8: 19, 16: 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 54: 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19},
		{18, 18, 18, 18, 18, 18, 18, 8: 18, 16: 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 54: 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18},
		// 45
		{17, 17, 17, 17, 17, 17, 17, 8: 17, 16: 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 54: 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17},
		{16, 16, 16, 16, 16, 16, 16, 8: 16, 16: 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 54: 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16},
		{15, 15, 15, 15, 15, 15, 15, 8: 15, 16: 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 54: 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15},
		{14, 14, 14, 14, 14, 14, 14, 8: 14, 16: 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 54: 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14},
		{13, 13, 13, 13, 13, 13, 13, 8: 13, 16: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 54: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13},
		// 50
		{12, 12, 12, 12, 12, 12, 12, 8: 12, 16: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 54: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12},
		{11, 11, 11, 11, 11, 11, 11, 8: 11, 16: 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 54: 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11},
		{10, 10, 10, 10, 10, 10, 10, 8: 10, 16: 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 54: 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10},
		{9, 9, 9, 9, 9, 9, 9, 8: 9, 16: 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 54: 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9},
		{8, 8, 8, 8, 8, 8, 8, 8: 8, 16: 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 54: 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8},
		// 55
		{7, 7, 7, 7, 7, 7, 7, 8: 7, 16: 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 54: 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7},
		{6, 6, 6, 6, 6, 6, 6, 8: 6, 16: 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 54: 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6},
		{5, 5, 5, 5, 5, 5, 5, 8: 5, 16: 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 54: 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5},
		{4, 4, 4, 4, 4, 4, 4, 8: 4, 16: 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 54: 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4},
		{3, 3, 3, 3, 3, 3, 3, 8: 3, 16: 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 54: 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3},
		// 60
		{2, 2, 2, 2, 2, 2, 2, 8: 2, 16: 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 54: 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
		{1, 1, 1, 1, 1, 1, 1, 8: 1, 16: 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 54: 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		{2: 376, 397, 392, 16: 396, 381, 377, 378, 387, 388, 380, 382, 383, 400, 401, 390, 391, 384, 399, 398, 374, 375, 379, 395, 393, 394, 402, 386, 389, 372, 385, 52: 408, 373, 409, 162, 178: 407, 410},
		{2: 39, 39, 39, 39, 39, 8: 39, 16: 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 44: 39, 39, 39, 54: 39, 39, 60: 405, 80: 39},
		{2: 376, 397, 392, 16: 396, 381, 377, 378, 387, 388, 380, 382, 383, 400, 401, 390, 391, 384, 399, 398, 374, 375, 379, 395, 393, 394, 402, 386, 389, 372, 385, 52: 406, 373},
		// 65
		{2: 38, 38, 38, 38, 38, 8: 38, 16: 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 44: 38, 38, 38, 54: 38, 38, 80: 38},
		{5: 161, 161, 44: 161, 161, 161, 55: 161},
		{5: 160, 160, 44: 160, 160, 160, 55: 160},
		{2: 376, 397, 392, 16: 396, 381, 377, 378, 387, 388, 380, 382, 383, 400, 401, 390, 391, 384, 399, 398, 374, 375, 379, 395, 393, 394, 402, 386, 389, 372, 385, 52: 466, 373},
		{55: 411},
		// 70
		{2: 376, 397, 392, 16: 396, 381, 377, 378, 387, 388, 380, 382, 383, 400, 401, 390, 391, 384, 399, 398, 374, 375, 379, 395, 393, 394, 402, 386, 389, 372, 385, 52: 415, 373, 87: 412, 118: 413, 137: 414},
		{63: 462},
		{129, 5: 129, 129, 44: 129, 129, 129},
		{420, 5: 67, 67, 44: 67, 67, 421, 136: 422},
		{37, 37, 17: 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 58: 37, 37, 416, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37},
		// 75
		{2: 376, 397, 392, 16: 396, 381, 377, 378, 387, 388, 380, 382, 383, 400, 401, 390, 391, 384, 399, 398, 374, 375, 379, 395, 393, 394, 402, 386, 389, 372, 385, 52: 417, 373},
		{36, 36, 17: 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 58: 36, 36, 418, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36},
		{2: 376, 397, 392, 16: 396, 381, 377, 378, 387, 388, 380, 382, 383, 400, 401, 390, 391, 384, 399, 398, 374, 375, 379, 395, 393, 394, 402, 386, 389, 372, 385, 52: 419, 373},
		{35, 35, 17: 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 58: 35, 35, 61: 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35},
		{2: 376, 397, 392, 16: 396, 381, 377, 378, 387, 388, 380, 382, 383, 400, 401, 390, 391, 384, 399, 398, 374, 375, 379, 395, 393, 394, 402, 386, 389, 372, 385, 52: 415, 373, 87: 412, 118: 461},
		// 80
		{7: 439, 81: 437, 460},
		{5: 55, 55, 44: 55, 423, 131: 424},
		{139: 436},
		{5: 53, 53, 44: 425, 129: 426},
		{88: 427, 97: 431, 100: 429, 130: 428, 132: 430},
		// 85
		{5: 46, 46},
		{164, 164, 5: 164, 164, 16: 164, 43: 164},
		{432, 52, 5: 52, 52, 16: 433, 43: 52},
		{49, 49, 5: 49, 49, 16: 49, 43: 49},
		{48, 48, 5: 48, 48, 16: 48, 43: 48},
		// 90
		{47, 47, 5: 47, 47, 16: 47, 43: 47},
		{88: 427, 97: 431, 100: 429, 130: 435, 132: 430},
		{88: 427, 97: 431, 100: 429, 130: 434, 132: 430},
		{1: 50, 5: 50, 50, 43: 50},
		{1: 51, 5: 51, 51, 43: 51},
		// 95
		{7: 439, 81: 437, 438, 119: 440, 140: 441},
		{188: 458},
		{61, 61, 5: 61, 61, 43: 61, 61, 61, 47: 61, 85: 451, 450, 89: 447, 445, 449, 448, 446, 98: 456, 457, 227: 455},
		{7: 439, 81: 437, 444},
		{63, 63, 5: 63, 63, 43: 63, 63, 63, 47: 63},
		// 100
		{442, 54, 5: 54, 54, 43: 54, 54},
		{7: 439, 81: 437, 438, 119: 443},
		{62, 62, 5: 62, 62, 43: 62, 62, 62, 47: 62},
		{105, 105, 105, 105, 105, 105, 105, 16: 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 54: 105, 83: 105, 85: 105, 105, 89: 447, 445, 105, 105, 105, 98: 105, 105},
		{7: 439, 81: 437, 454},
		// 105
		{7: 439, 81: 437, 453},
		{7: 439, 81: 437, 452},
		{7: 104, 81: 104},
		{7: 103, 81: 103},
		{7: 102, 81: 102},
		// 110
		{7: 101, 81: 101},
		{106, 106, 106, 106, 106, 106, 106, 16: 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 54: 106, 83: 106, 85: 106, 106, 89: 447, 445, 106, 106, 106, 98: 106, 106},
		{107, 107, 107, 107, 107, 107, 107, 16: 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 54: 107, 83: 107, 85: 451, 450, 89: 447, 445, 107, 107, 107, 98: 107, 107},
		{108, 108, 108, 108, 108, 108, 108, 16: 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 54: 108, 83: 108, 85: 451, 450, 89: 447, 445, 108, 108, 446, 98: 108, 108},
		{60, 60, 5: 60, 60, 43: 60, 60, 60, 47: 60},
		// 115
		{59, 59, 5: 59, 59, 43: 59, 59, 59, 47: 59},
		{58, 58, 5: 58, 58, 43: 58, 58, 58, 47: 58},
		{7: 439, 81: 437, 459},
		{109, 109, 109, 109, 109, 109, 109, 16: 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 54: 109, 83: 109, 85: 451, 450, 89: 447, 445, 449, 448, 446, 98: 109, 109},
		{1: 66, 5: 66, 66, 43: 66, 66, 66, 47: 66, 66, 85: 451, 450, 89: 447, 445, 449, 448, 446},
		// 120
		{128, 5: 128, 128, 44: 128, 128, 128},
		{7: 439, 9: 464, 81: 437, 463, 112: 465},
		{138, 138, 5: 138, 138, 43: 138, 138, 138, 138, 85: 451, 450, 89: 447, 445, 449, 448, 446},
		{137, 137, 5: 137, 137, 43: 137, 137, 137, 137},
		{130, 5: 130, 130, 44: 130, 130, 130},
		// 125
		{5: 159, 159, 44: 159, 159, 159, 55: 159},
		{49: 487},
		{485, 49: 122},
		{121, 49: 121},
		{119, 49: 119},
		// 130
		{60: 480},
		{115, 2: 376, 397, 392, 16: 396, 381, 377, 378, 387, 388, 380, 382, 383, 400, 401, 390, 391, 384, 399, 398, 374, 375, 379, 395, 393, 394, 402, 386, 389, 372, 385, 49: 115, 52: 475, 373, 476, 83: 477, 85: 451, 450, 89: 447, 445, 449, 448, 446, 205: 474, 473},
		{116, 49: 116},
		{114, 49: 114},
		{113, 49: 113},
		// 135
		{2: 376, 397, 392, 16: 396, 381, 377, 378, 387, 388, 380, 382, 383, 400, 401, 390, 391, 384, 399, 398, 374, 375, 379, 395, 393, 394, 402, 386, 389, 372, 385, 52: 478, 373, 83: 479},
		{111, 49: 111},
		{112, 49: 112},
		{110, 49: 110},
		{2: 376, 397, 392, 16: 396, 381, 377, 378, 387, 388, 380, 382, 383, 400, 401, 390, 391, 384, 399, 398, 374, 375, 379, 395, 393, 394, 402, 386, 389, 372, 385, 52: 482, 373, 109: 481},
		// 140
		{118, 49: 118},
		{60: 483},
		{109: 484},
		{117, 49: 117},
		{2: 376, 397, 392, 7: 439, 16: 396, 381, 377, 378, 387, 388, 380, 382, 383, 400, 401, 390, 391, 384, 399, 398, 374, 375, 379, 395, 393, 394, 402, 386, 389, 372, 385, 52: 471, 373, 81: 437, 472, 109: 470, 159: 486},
		// 145
		{120, 49: 120},
		{166: 490, 489, 221: 488},
		{529, 67, 5: 67, 67, 43: 67, 67, 67, 421, 67, 67, 136: 528},
		{100, 100, 5: 100, 100, 43: 100, 100, 100, 100, 100, 100},
		{8: 495, 135: 494, 173: 492, 176: 493, 229: 491},
		// 150
		{524, 70, 376, 397, 392, 70, 70, 16: 396, 381, 377, 378, 387, 388, 380, 382, 383, 400, 401, 390, 391, 384, 399, 398, 374, 375, 379, 395, 393, 394, 402, 386, 389, 372, 385, 70, 70, 70, 70, 70, 70, 52: 371, 373, 111: 525, 225: 523},
		{97, 97, 97, 97, 97, 97, 97, 16: 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97},
		{95, 95, 95, 95, 95, 95, 95, 16: 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95},
		{93, 93, 93, 93, 93, 93, 93, 16: 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 103: 93, 110: 93, 113: 93, 93, 231: 506},
		{2: 376, 397, 392, 16: 396, 381, 377, 378, 387, 388, 380, 382, 383, 400, 401, 390, 391, 384, 399, 398, 374, 375, 379, 395, 393, 394, 402, 386, 389, 372, 385, 52: 499, 373, 56: 79, 79, 115: 498, 497, 496},
		// 155
		{1: 505},
		{56: 502, 503, 193: 501, 233: 500},
		{56: 78, 78},
		{56: 32, 32},
		{1: 80, 96: 80},
		// 160
		{1: 74, 96: 74, 219: 504},
		{1: 76, 96: 76},
		{1: 75, 96: 75},
		{1: 77, 96: 77},
		{81, 81, 81, 81, 81, 81, 81, 16: 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 103: 81, 110: 81, 113: 81, 81},
		// 165
		{94, 94, 94, 94, 94, 94, 94, 16: 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 103: 515, 110: 514, 113: 512, 513, 187: 511, 202: 508, 213: 510, 228: 509, 230: 507},
		{8: 495, 135: 522},
		{8: 91},
		{8: 90},
		{8: 89},
		// 170
		{8: 88},
		{8: 87},
		{2: 376, 397, 392, 16: 396, 381, 377, 378, 387, 388, 380, 382, 383, 400, 401, 390, 391, 384, 399, 398, 374, 375, 379, 395, 393, 394, 402, 386, 389, 372, 385, 52: 499, 373, 56: 79, 79, 115: 498, 497, 520},
		{2: 376, 397, 392, 8: 85, 16: 396, 381, 377, 378, 387, 388, 380, 382, 383, 400, 401, 390, 391, 384, 399, 398, 374, 375, 379, 395, 393, 394, 402, 386, 389, 372, 385, 52: 499, 373, 56: 79, 79, 115: 498, 497, 518},
		{2: 376, 397, 392, 8: 83, 16: 396, 381, 377, 378, 387, 388, 380, 382, 383, 400, 401, 390, 391, 384, 399, 398, 374, 375, 379, 395, 393, 394, 402, 386, 389, 372, 385, 52: 499, 373, 56: 79, 79, 115: 498, 497, 516},
		// 175
		{96: 517},
		{8: 82},
		{96: 519},
		{8: 84},
		{96: 521},
		// 180
		{8: 86},
		{92, 92, 92, 92, 92, 92, 92, 16: 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 103: 92, 110: 92, 113: 92, 92},
		{68, 68, 5: 68, 68, 43: 68, 68, 68, 68, 68, 68, 234: 527},
		{8: 495, 135: 494, 173: 526, 176: 493},
		{69, 69, 5: 69, 69, 43: 69, 69, 69, 69, 69, 69},
		// 185
		{96, 96, 96, 96, 96, 96, 96, 16: 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96},
		{98, 98, 5: 98, 98, 43: 98, 98, 98, 98, 98, 98},
		{1: 65, 5: 65, 65, 43: 65, 65, 65, 47: 65, 532, 210: 531},
		{166: 490, 530},
		{99, 99, 5: 99, 99, 43: 99, 99, 99, 99, 99, 99},
		// 190
		{1: 57, 5: 57, 57, 43: 57, 57, 57, 47: 536, 211: 535},
		{139: 533},
		{7: 439, 81: 437, 438, 119: 440, 140: 534},
		{442, 64, 5: 64, 64, 43: 64, 64, 64, 47: 64},
		{1: 55, 5: 55, 55, 43: 55, 55, 423, 131: 538},
		// 195
		{7: 439, 81: 437, 537},
		{1: 56, 5: 56, 56, 43: 56, 56, 56, 85: 451, 450, 89: 447, 445, 449, 448, 446},
		{1: 53, 5: 53, 53, 43: 53, 425, 129: 539},
		{1: 123, 5: 123, 123, 43: 123},
		{2: 376, 397, 392, 16: 396, 381, 377, 378, 387, 388, 380, 382, 383, 400, 401, 390, 391, 384, 399, 398, 374, 375, 379, 395, 393, 394, 402, 386, 389, 372, 385, 52: 404, 373, 102: 542},
		// 200
		{2: 153, 153, 153, 16: 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153},
		{8: 544, 36: 547, 55: 546, 80: 548, 185: 545, 214: 543},
		{5: 132, 132, 43: 581, 226: 580},
		{1: 257, 376, 397, 392, 16: 396, 381, 377, 378, 387, 388, 380, 382, 383, 400, 401, 390, 391, 384, 399, 398, 374, 375, 379, 395, 393, 394, 402, 386, 389, 372, 385, 52: 415, 373, 87: 567, 194: 568, 569},
		{8: 558, 133: 557, 184: 556},
		// 205
		{135, 2: 376, 397, 392, 135, 135, 16: 396, 381, 377, 378, 387, 388, 380, 382, 383, 400, 401, 390, 391, 384, 399, 398, 374, 375, 379, 395, 393, 394, 402, 386, 389, 372, 385, 135, 52: 415, 373, 87: 550, 143: 551, 198: 549},
		{8: 147},
		{8: 146},
		{554, 5: 148, 148, 43: 148},
		{63: 552},
		// 210
		{134, 5: 134, 134, 43: 134},
		{7: 439, 9: 464, 81: 437, 463, 112: 553},
		{136, 5: 136, 136, 43: 136},
		{2: 376, 397, 392, 16: 396, 381, 377, 378, 387, 388, 380, 382, 383, 400, 401, 390, 391, 384, 399, 398, 374, 375, 379, 395, 393, 394, 402, 386, 389, 372, 385, 52: 415, 373, 87: 550, 143: 555},
		{133, 5: 133, 133, 43: 133},
		// 215
		{565, 5: 149, 149, 43: 149},
		{145, 5: 145, 145, 43: 145},
		{1: 142, 7: 439, 9: 464, 81: 437, 463, 112: 561, 247: 560, 559},
		{1: 564},
		{562, 141},
		// 220
		{139, 139},
		{7: 439, 9: 464, 81: 437, 463, 112: 563},
		{140, 140},
		{143, 5: 143, 143, 43: 143},
		{8: 558, 133: 566},
		// 225
		{144, 5: 144, 144, 43: 144},
		{259, 259},
		{578, 256},
		{1: 570},
		{8: 574, 36: 547, 80: 548, 106: 367, 572, 185: 571, 240: 573},
		// 230
		{8: 558, 133: 557, 184: 577},
		{5: 151, 151, 43: 151},
		{5: 150, 150, 43: 150},
		{106: 367, 575},
		{1: 576},
		// 235
		{5: 124, 124, 43: 124},
		{565, 5: 152, 152, 43: 152},
		{2: 376, 397, 392, 16: 396, 381, 377, 378, 387, 388, 380, 382, 383, 400, 401, 390, 391, 384, 399, 398, 374, 375, 379, 395, 393, 394, 402, 386, 389, 372, 385, 52: 415, 373, 87: 579},
		{258, 258},
		{5: 155, 155},
		// 240
		{37: 582},
		{95: 583},
		{134: 584},
		{2: 376, 397, 392, 16: 396, 381, 377, 378, 387, 388, 380, 382, 383, 400, 401, 390, 391, 384, 399, 398, 374, 375, 379, 395, 393, 394, 402, 386, 389, 372, 385, 52: 415, 373, 87: 412, 118: 413, 137: 585},
		{420, 5: 131, 131},
		// 245
		{5: 156, 156},
		{2: 44, 44, 44, 16: 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 94: 590, 161: 593},
		{2: 44, 44, 44, 16: 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 94: 590, 161: 589},
		{2: 376, 397, 392, 16: 396, 381, 377, 378, 387, 388, 380, 382, 383, 400, 401, 390, 391, 384, 399, 398, 374, 375, 379, 395, 393, 394, 402, 386, 389, 372, 385, 52: 404, 373, 102: 592},
		{157: 591},
		// 250
		{2: 43, 43, 43, 16: 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43},
		{5: 157, 157},
		{2: 376, 397, 392, 16: 396, 381, 377, 378, 387, 388, 380, 382, 383, 400, 401, 390, 391, 384, 399, 398, 374, 375, 379, 395, 393, 394, 402, 386, 389, 372, 385, 52: 371, 373, 111: 594},
		{5: 158, 158},
		{2: 376, 397, 392, 16: 396, 381, 377, 378, 387, 388, 380, 382, 383, 400, 401, 390, 391, 384, 399, 398, 374, 375, 379, 395, 393, 394, 402, 386, 389, 372, 385, 52: 404, 373, 102: 596},
		// 255
		{2: 376, 397, 392, 162, 162, 16: 396, 381, 377, 378, 387, 388, 380, 382, 383, 400, 401, 390, 391, 384, 399, 398, 374, 375, 379, 395, 393, 394, 402, 386, 389, 372, 385, 44: 162, 162, 162, 52: 408, 373, 409, 178: 407, 597},
		{5: 67, 67, 44: 67, 67, 421, 136: 598},
		{5: 55, 55, 44: 55, 423, 131: 599},
		{5: 53, 53, 44: 425, 129: 600},
		{5: 163, 163},
		// 260
		{150: 803},
		{2: 42, 42, 42, 16: 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 94: 606, 123: 605},
		{2: 318, 318, 318, 16: 318, 318, 318, 318, 318, 318, 318, 318, 318, 318, 318, 318, 318, 318, 318, 318, 318, 318, 318, 318, 318, 318, 318, 318, 318, 318, 318, 94: 318},
		{2: 317, 317, 317, 16: 317, 317, 317, 317, 317, 317, 317, 317, 317, 317, 317, 317, 317, 317, 317, 317, 317, 317, 317, 317, 317, 317, 317, 317, 317, 317, 317, 94: 317},
		{2: 376, 397, 392, 16: 396, 381, 377, 378, 387, 388, 380, 382, 383, 400, 401, 390, 391, 384, 399, 398, 374, 375, 379, 395, 393, 394, 402, 386, 389, 372, 385, 52: 404, 373, 102: 609},
		// 265
		{7: 607},
		{157: 608},
		{2: 41, 41, 41, 8: 41, 16: 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41},
		{5: 316, 316, 8: 611, 242: 610},
		{5: 319, 319},
		// 270
		{2: 376, 397, 392, 11: 617, 619, 16: 396, 381, 377, 378, 387, 388, 380, 382, 383, 400, 401, 390, 391, 384, 399, 398, 374, 375, 379, 395, 393, 394, 402, 386, 389, 372, 385, 52: 415, 373, 87: 616, 95: 620, 124: 621, 128: 618, 141: 614, 145: 615, 180: 613, 241: 612},
		{801, 800},
		{314, 314},
		{312, 312},
		{311, 311},
		// 275
		{17: 678, 671, 670, 693, 692, 674, 686, 685, 689, 691, 694, 695, 690, 58: 688, 687, 61: 683, 684, 64: 669, 672, 677, 675, 663, 664, 665, 666, 667, 668, 662, 661, 673, 676, 660, 659, 190: 658, 655, 679, 199: 653, 208: 656, 657, 215: 654, 222: 680, 651, 682, 239: 652, 246: 650, 249: 681, 251: 696},
		{95: 644},
		{2: 42, 42, 42, 8: 42, 16: 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 94: 606, 123: 638},
		{2: 253, 253, 253, 8: 253, 16: 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 95: 620, 124: 621, 128: 623, 218: 622},
		{2: 255, 255, 255, 8: 255, 16: 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 94: 255},
		// 280
		{2: 254, 254, 254, 8: 254, 16: 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 94: 254},
		{2: 376, 397, 392, 8: 34, 16: 396, 381, 377, 378, 387, 388, 380, 382, 383, 400, 401, 390, 391, 384, 399, 398, 374, 375, 379, 395, 393, 394, 402, 386, 389, 372, 385, 52: 625, 373, 126: 624},
		{2: 252, 252, 252, 8: 252, 16: 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252},
		{8: 626},
		{8: 33},
		// 285
		{2: 376, 397, 392, 16: 396, 381, 377, 378, 387, 388, 380, 382, 383, 400, 401, 390, 391, 384, 399, 398, 374, 375, 379, 395, 393, 394, 402, 386, 389, 372, 385, 52: 628, 373, 120: 627},
		{630, 629},
		{261, 261},
		{251, 251, 634, 30: 636, 635, 125: 633, 127: 632},
		{2: 376, 397, 392, 16: 396, 381, 377, 378, 387, 388, 380, 382, 383, 400, 401, 390, 391, 384, 399, 398, 374, 375, 379, 395, 393, 394, 402, 386, 389, 372, 385, 52: 631, 373},
		// 290
		{260, 260},
		{262, 262},
		{250, 250},
		{83: 637},
		{248, 248},
		// 295
		{247, 247},
		{249, 249},
		{2: 376, 397, 392, 8: 34, 16: 396, 381, 377, 378, 387, 388, 380, 382, 383, 400, 401, 390, 391, 384, 399, 398, 374, 375, 379, 395, 393, 394, 402, 386, 389, 372, 385, 52: 625, 373, 126: 639},
		{8: 640},
		{2: 376, 397, 392, 16: 396, 381, 377, 378, 387, 388, 380, 382, 383, 400, 401, 390, 391, 384, 399, 398, 374, 375, 379, 395, 393, 394, 402, 386, 389, 372, 385, 52: 628, 373, 120: 641},
		// 300
		{630, 642},
		{251, 251, 634, 30: 636, 635, 125: 633, 127: 643},
		{263, 263},
		{2: 376, 397, 392, 8: 34, 16: 396, 381, 377, 378, 387, 388, 380, 382, 383, 400, 401, 390, 391, 384, 399, 398, 374, 375, 379, 395, 393, 394, 402, 386, 389, 372, 385, 52: 625, 373, 126: 645},
		{8: 646},
		// 305
		{2: 376, 397, 392, 16: 396, 381, 377, 378, 387, 388, 380, 382, 383, 400, 401, 390, 391, 384, 399, 398, 374, 375, 379, 395, 393, 394, 402, 386, 389, 372, 385, 52: 628, 373, 120: 647},
		{630, 648},
		{251, 251, 634, 30: 636, 635, 125: 633, 127: 649},
		{264, 264},
		{309, 309, 752, 746, 7: 744, 9: 751, 745, 747, 748, 750, 753, 749, 142: 743, 196: 742, 741},
		// 310
		{246, 246, 246, 246, 7: 246, 9: 246, 246, 246, 246, 246, 246, 246},
		{245, 245, 245, 245, 7: 245, 9: 245, 245, 245, 245, 245, 245, 245},
		{244, 244, 244, 244, 7: 244, 9: 244, 244, 244, 244, 244, 244, 244},
		{182, 182, 182, 182, 182, 7: 182, 698, 182, 182, 182, 182, 182, 182, 182, 50: 182, 182, 84: 699, 101: 739},
		{177, 177, 177, 177, 177, 7: 177, 9: 177, 177, 177, 177, 177, 177, 177, 50: 177, 177, 105: 738},
		// 315
		{175, 175, 175, 175, 175, 7: 175, 728, 175, 175, 175, 175, 175, 175, 175, 50: 175, 175, 84: 729, 160: 736, 174: 730},
		{175, 175, 175, 175, 175, 7: 175, 728, 175, 175, 175, 175, 175, 175, 175, 50: 175, 175, 84: 729, 160: 727, 174: 730},
		{182, 182, 182, 182, 7: 182, 698, 182, 182, 182, 182, 182, 182, 182, 84: 699, 101: 726},
		{238, 238, 238, 238, 238, 7: 238, 238, 238, 238, 238, 238, 238, 238, 238, 50: 238, 238},
		{237, 237, 237, 237, 237, 7: 237, 237, 237, 237, 237, 237, 237, 237, 237, 50: 237, 237},
		// 320
		{236, 236, 236, 236, 236, 7: 236, 236, 236, 236, 236, 236, 236, 236, 236, 50: 236, 236},
		{235, 235, 235, 235, 235, 7: 235, 235, 235, 235, 235, 235, 235, 235, 235, 50: 235, 235},
		{234, 234, 234, 234, 234, 7: 234, 234, 234, 234, 234, 234, 234, 234, 234, 50: 234, 234},
		{233, 233, 233, 233, 233, 7: 233, 233, 233, 233, 233, 233, 233, 233, 233, 50: 233, 233},
		{232, 232, 232, 232, 232, 7: 232, 232, 232, 232, 232, 232, 232, 232, 232, 50: 232, 232},
		// 325
		{231, 231, 231, 231, 231, 7: 231, 231, 231, 231, 231, 231, 231, 231, 231, 50: 231, 231},
		{230, 230, 230, 230, 230, 7: 230, 230, 230, 230, 230, 230, 230, 230, 230, 50: 230, 230},
		{229, 229, 229, 229, 229, 7: 229, 229, 229, 229, 229, 229, 229, 229, 229, 50: 229, 229},
		{228, 228, 228, 228, 228, 7: 228, 228, 228, 228, 228, 228, 228, 228, 228, 50: 228, 228},
		{227, 227, 227, 227, 227, 7: 227, 9: 227, 227, 227, 227, 227, 227, 227, 50: 227, 227},
		// 330
		{226, 226, 226, 226, 226, 7: 226, 9: 226, 226, 226, 226, 226, 226, 226, 50: 226, 226},
		{225, 225, 225, 225, 225, 7: 225, 225, 225, 225, 225, 225, 225, 225, 225, 50: 225, 225},
		{224, 224, 224, 224, 224, 7: 224, 224, 224, 224, 224, 224, 224, 224, 224, 50: 224, 224},
		{223, 223, 223, 223, 223, 7: 223, 223, 223, 223, 223, 223, 223, 223, 223, 50: 223, 223},
		{222, 222, 222, 222, 222, 7: 222, 222, 222, 222, 222, 222, 222, 222, 222, 50: 222, 222},
		// 335
		{221, 221, 221, 221, 221, 7: 221, 221, 221, 221, 221, 221, 221, 221, 221, 50: 221, 221},
		{220, 220, 220, 220, 220, 7: 220, 220, 220, 220, 220, 220, 220, 220, 220, 50: 220, 220, 232: 725},
		{218, 218, 218, 218, 7: 218, 218, 218, 218, 218, 218, 218, 218, 218},
		{216, 216, 216, 216, 7: 216, 698, 216, 216, 216, 216, 216, 216, 216, 84: 724},
		{214, 214, 214, 214, 7: 214, 698, 214, 214, 214, 214, 214, 214, 214, 84: 723},
		// 340
		{8: 698, 84: 722},
		{8: 698, 84: 721},
		{211, 211, 211, 211, 7: 211, 211, 211, 211, 211, 211, 211, 211, 211, 108: 720},
		{210, 210, 210, 210, 7: 210, 210, 210, 210, 210, 210, 210, 210, 210, 108: 719},
		{209, 209, 209, 209, 7: 209, 209, 209, 209, 209, 209, 209, 209, 209, 58: 717, 716, 108: 718},
		// 345
		{58: 713, 712, 61: 710, 711},
		{8: 204},
		{8: 203},
		{8: 200},
		{194, 194, 194, 194, 194, 7: 194, 194, 194, 194, 194, 194, 194, 194, 194, 50: 194, 194},
		// 350
		{193, 193, 193, 193, 193, 7: 193, 193, 193, 193, 193, 193, 193, 193, 193, 50: 193, 193},
		{188, 188, 188, 188, 7: 188, 9: 188, 188, 188, 188, 188, 188, 188},
		{182, 182, 182, 182, 7: 182, 698, 182, 182, 182, 182, 182, 182, 182, 84: 699, 101: 709},
		{182, 182, 182, 182, 7: 182, 698, 182, 182, 182, 182, 182, 182, 182, 84: 699, 101: 708},
		{182, 182, 182, 182, 7: 182, 698, 182, 182, 182, 182, 182, 182, 182, 84: 699, 101: 707},
		// 355
		{182, 182, 182, 182, 182, 7: 182, 698, 182, 182, 182, 182, 182, 182, 182, 50: 182, 182, 84: 699, 101: 697},
		{177, 177, 177, 177, 177, 7: 177, 9: 177, 177, 177, 177, 177, 177, 177, 50: 177, 177, 105: 702},
		{88: 427, 97: 431, 100: 700},
		{181, 181, 181, 181, 181, 7: 181, 9: 181, 181, 181, 181, 181, 181, 181, 50: 181, 181},
		{1: 701},
		// 360
		{183, 183, 183, 183, 183, 7: 183, 9: 183, 183, 183, 183, 183, 183, 183, 50: 183, 183},
		{184, 184, 184, 184, 704, 7: 184, 9: 184, 184, 184, 184, 184, 184, 184, 50: 703, 705, 104: 706},
		{180, 180, 180, 180, 180, 7: 180, 9: 180, 180, 180, 180, 180, 180, 180, 50: 180, 180},
		{179, 179, 179, 179, 179, 7: 179, 9: 179, 179, 179, 179, 179, 179, 179, 50: 179, 179},
		{178, 178, 178, 178, 178, 7: 178, 9: 178, 178, 178, 178, 178, 178, 178, 50: 178, 178},
		// 365
		{176, 176, 176, 176, 176, 7: 176, 9: 176, 176, 176, 176, 176, 176, 176, 50: 176, 176},
		{185, 185, 185, 185, 7: 185, 9: 185, 185, 185, 185, 185, 185, 185},
		{186, 186, 186, 186, 7: 186, 9: 186, 186, 186, 186, 186, 186, 186},
		{187, 187, 187, 187, 7: 187, 9: 187, 187, 187, 187, 187, 187, 187},
		{208, 208, 208, 208, 7: 208, 208, 208, 208, 208, 208, 208, 208, 208, 108: 715},
		// 370
		{207, 207, 207, 207, 7: 207, 207, 207, 207, 207, 207, 207, 207, 207, 108: 714},
		{8: 202},
		{8: 201},
		{8: 196},
		{8: 197},
		// 375
		{8: 199},
		{8: 198},
		{8: 195},
		{8: 205},
		{8: 206},
		// 380
		{212, 212, 212, 212, 7: 212, 9: 212, 212, 212, 212, 212, 212, 212},
		{213, 213, 213, 213, 7: 213, 9: 213, 213, 213, 213, 213, 213, 213},
		{215, 215, 215, 215, 7: 215, 9: 215, 215, 215, 215, 215, 215, 215},
		{217, 217, 217, 217, 7: 217, 9: 217, 217, 217, 217, 217, 217, 217},
		{219, 219, 219, 219, 219, 7: 219, 219, 219, 219, 219, 219, 219, 219, 219, 50: 219, 219},
		// 385
		{239, 239, 239, 239, 7: 239, 9: 239, 239, 239, 239, 239, 239, 239},
		{177, 177, 177, 177, 177, 7: 177, 9: 177, 177, 177, 177, 177, 177, 177, 50: 177, 177, 105: 735},
		{88: 427, 97: 431, 100: 731},
		{174, 174, 174, 174, 174, 7: 174, 9: 174, 174, 174, 174, 174, 174, 174, 50: 174, 174},
		{173, 173, 173, 173, 173, 7: 173, 9: 173, 173, 173, 173, 173, 173, 173, 50: 173, 173},
		// 390
		{732, 701},
		{88: 427, 97: 431, 100: 733},
		{1: 734},
		{172, 172, 172, 172, 172, 7: 172, 9: 172, 172, 172, 172, 172, 172, 172, 50: 172, 172},
		{240, 240, 240, 240, 704, 7: 240, 9: 240, 240, 240, 240, 240, 240, 240, 50: 703, 705, 104: 706},
		// 395
		{177, 177, 177, 177, 177, 7: 177, 9: 177, 177, 177, 177, 177, 177, 177, 50: 177, 177, 105: 737},
		{241, 241, 241, 241, 704, 7: 241, 9: 241, 241, 241, 241, 241, 241, 241, 50: 703, 705, 104: 706},
		{242, 242, 242, 242, 704, 7: 242, 9: 242, 242, 242, 242, 242, 242, 242, 50: 703, 705, 104: 706},
		{177, 177, 177, 177, 177, 7: 177, 9: 177, 177, 177, 177, 177, 177, 177, 50: 177, 177, 105: 740},
		{243, 243, 243, 243, 704, 7: 243, 9: 243, 243, 243, 243, 243, 243, 243, 50: 703, 705, 104: 706},
		// 400
		{310, 310},
		{308, 308, 752, 746, 7: 744, 9: 751, 745, 747, 748, 750, 753, 749, 142: 799},
		{307, 307, 307, 307, 7: 307, 9: 307, 307, 307, 307, 307, 307, 307},
		{10: 798},
		{304, 304, 304, 304, 7: 304, 9: 304, 304, 304, 304, 304, 304, 304},
		// 405
		{303, 303, 303, 303, 7: 303, 9: 303, 303, 303, 303, 303, 303, 303},
		{95: 797},
		{301, 301, 301, 301, 7: 301, 9: 301, 301, 301, 301, 301, 301, 301, 95: 796},
		{95: 795},
		{95: 794},
		// 410
		{8: 775, 10: 766, 83: 774, 88: 770, 103: 764, 121: 769, 768, 149: 779, 164: 780, 781, 168: 777, 778, 776, 761, 186: 763, 189: 773, 200: 759, 204: 765, 212: 772, 220: 762, 236: 760, 238: 771, 245: 767},
		{83: 758},
		{2: 376, 397, 392, 16: 396, 381, 377, 378, 387, 388, 380, 382, 383, 400, 401, 390, 391, 384, 399, 398, 374, 375, 379, 395, 393, 394, 402, 386, 389, 372, 385, 52: 404, 373, 102: 754},
		{8: 755},
		{2: 376, 397, 392, 16: 396, 381, 377, 378, 387, 388, 380, 382, 383, 400, 401, 390, 391, 384, 399, 398, 374, 375, 379, 395, 393, 394, 402, 386, 389, 372, 385, 52: 415, 373, 87: 756},
		// 415
		{1: 757},
		{295, 295, 295, 295, 7: 295, 9: 295, 295, 295, 295, 295, 295, 295},
		{296, 296, 296, 296, 7: 296, 9: 296, 296, 296, 296, 296, 296, 296},
		{297, 297, 297, 297, 7: 297, 9: 297, 297, 297, 297, 297, 297, 297},
		{294, 294, 294, 294, 7: 294, 9: 294, 294, 294, 294, 294, 294, 294},
		// 420
		{293, 293, 293, 293, 7: 293, 9: 293, 293, 293, 293, 293, 293, 293},
		{292, 292, 292, 292, 7: 292, 9: 292, 292, 292, 292, 292, 292, 292},
		{88: 790, 121: 792, 791, 172: 793},
		{88: 790, 121: 792, 791, 172: 789},
		{289, 289, 289, 289, 7: 289, 9: 289, 289, 289, 289, 289, 289, 289},
		// 425
		{288, 288, 288, 288, 7: 288, 9: 288, 288, 288, 288, 288, 288, 288},
		{287, 287, 287, 287, 7: 287, 9: 287, 287, 287, 287, 287, 287, 287},
		{286, 286, 286, 286, 7: 286, 9: 286, 286, 286, 286, 286, 286, 286},
		{285, 285, 285, 285, 7: 285, 9: 285, 285, 285, 285, 285, 285, 285},
		{284, 284, 284, 284, 7: 284, 9: 284, 284, 284, 284, 284, 284, 284},
		// 430
		{283, 283, 283, 283, 7: 283, 9: 283, 283, 283, 283, 283, 283, 283, 83: 788},
		{282, 282, 282, 282, 7: 282, 9: 282, 282, 282, 282, 282, 282, 282},
		{281, 281, 281, 281, 7: 281, 9: 281, 281, 281, 281, 281, 281, 281},
		{280, 280, 280, 280, 7: 280, 9: 280, 280, 280, 280, 280, 280, 280, 83: 280},
		{8: 775, 149: 779, 164: 780, 781, 168: 777, 778, 776, 786},
		// 435
		{274, 274, 274, 274, 7: 274, 9: 274, 274, 274, 274, 274, 274, 274},
		{273, 273, 273, 273, 7: 273, 9: 273, 273, 273, 273, 273, 273, 273},
		{8: 782},
		{267, 267, 267, 267, 7: 267, 270, 267, 267, 267, 267, 267, 267, 267},
		{266, 266, 266, 266, 7: 266, 269, 266, 266, 266, 266, 266, 266, 266},
		// 440
		{265, 265, 265, 265, 7: 265, 268, 265, 265, 265, 265, 265, 265, 265},
		{1: 783, 88: 427, 97: 784},
		{272, 272, 272, 272, 7: 272, 9: 272, 272, 272, 272, 272, 272, 272},
		{1: 785},
		{271, 271, 271, 271, 7: 271, 9: 271, 271, 271, 271, 271, 271, 271},
		// 445
		{1: 787},
		{275, 275, 275, 275, 7: 275, 9: 275, 275, 275, 275, 275, 275, 275},
		{279, 279, 279, 279, 7: 279, 9: 279, 279, 279, 279, 279, 279, 279, 83: 279},
		{290, 290, 290, 290, 7: 290, 9: 290, 290, 290, 290, 290, 290, 290},
		{278, 278, 278, 278, 7: 278, 9: 278, 278, 278, 278, 278, 278, 278},
		// 450
		{277, 277, 277, 277, 7: 277, 9: 277, 277, 277, 277, 277, 277, 277},
		{276, 276, 276, 276, 7: 276, 9: 276, 276, 276, 276, 276, 276, 276},
		{291, 291, 291, 291, 7: 291, 9: 291, 291, 291, 291, 291, 291, 291},
		{298, 298, 298, 298, 7: 298, 9: 298, 298, 298, 298, 298, 298, 298},
		{299, 299, 299, 299, 7: 299, 9: 299, 299, 299, 299, 299, 299, 299},
		// 455
		{300, 300, 300, 300, 7: 300, 9: 300, 300, 300, 300, 300, 300, 300},
		{302, 302, 302, 302, 7: 302, 9: 302, 302, 302, 302, 302, 302, 302},
		{305, 305, 305, 305, 7: 305, 9: 305, 305, 305, 305, 305, 305, 305},
		{306, 306, 306, 306, 7: 306, 9: 306, 306, 306, 306, 306, 306, 306},
		{5: 315, 315},
		// 460
		{2: 376, 397, 392, 11: 617, 619, 16: 396, 381, 377, 378, 387, 388, 380, 382, 383, 400, 401, 390, 391, 384, 399, 398, 374, 375, 379, 395, 393, 394, 402, 386, 389, 372, 385, 52: 415, 373, 87: 616, 95: 620, 124: 621, 128: 618, 141: 614, 145: 615, 180: 802},
		{313, 313},
		{2: 42, 42, 42, 16: 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 94: 606, 123: 804},
		{2: 376, 397, 392, 16: 396, 381, 377, 378, 387, 388, 380, 382, 383, 400, 401, 390, 391, 384, 399, 398, 374, 375, 379, 395, 393, 394, 402, 386, 389, 372, 385, 52: 371, 373, 111: 805},
		{5: 320, 320},
		// 465
		{5: 323, 323, 32: 359, 360, 364, 366, 106: 367, 356, 134: 368, 138: 346, 144: 347, 146: 361, 348, 349, 151: 362, 350, 363, 351, 352, 345, 158: 353, 162: 365, 354, 175: 355, 177: 807, 181: 357, 369, 358},
		{5: 338, 338},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 265

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 2:
		{
			yyVAL.item = yyS[yypt-0].statement
		}
	case 51:
		{
			ß
		}
	case 90:
		{
			yyVAL.item = nil
		}
	case 93:
		{
			yyVAL.item = ast.IndexVisibilityVisible
		}
	case 94:
		{
			yyVAL.item = ast.IndexVisibilityInvisible
		}
	case 179:
		{
			yyVAL.item = model.CIStr{}
		}
	case 181:
		{
			yyVAL.item = model.NewCIStr(yyS[yypt-0].ident)
		}
	case 182:
		{
			yyVAL.item = model.NewCIStr(yyS[yypt-0].ident)
		}
	case 196:
		{
			yyVAL.item = [][]ast.ExprNode{yyS[yypt-0].item.([]ast.ExprNode)}
		}
	case 197:
		{
			yyVAL.item = append(yyS[yypt-2].item.([][]ast.ExprNode), yyS[yypt-0].item.([]ast.ExprNode))
		}
	case 198:
		{
			yyVAL.item = yyS[yypt-1].item
		}
	case 199:
		{
			yyVAL.item = []ast.ExprNode{}
		}
	case 204:
		{
			yyVAL.expr = &ast.DefaultExpr{}
		}
	case 205:
		{
			yyVAL.item = &ast.Assignment{
				Column: yyS[yypt-2].item.(*ast.ColumnName),
				Expr:   yyS[yypt-0].expr,
			}
		}
	case 206:
		{
			yyVAL.item = []*ast.Assignment{}
		}
	case 207:
		{
			yyVAL.item = []*ast.Assignment{yyS[yypt-0].item.(*ast.Assignment)}
		}
	case 208:
		{
			yyVAL.item = append(yyS[yypt-2].item.([]*ast.Assignment), yyS[yypt-0].item.(*ast.Assignment))
		}
	case 209:
		{
			yyVAL.item = nil
		}
	case 210:
		{
			yyVAL.item = yyS[yypt-0].item
		}
	case 211:
		{
			yyVAL.item = &ast.Assignment{Column: yyS[yypt-2].item.(*ast.ColumnName), Expr: yyS[yypt-0].expr}
		}
	case 212:
		{
			yyVAL.item = []*ast.Assignment{yyS[yypt-0].item.(*ast.Assignment)}
		}
	case 213:
		{
			yyVAL.item = append(yyS[yypt-2].item.([]*ast.Assignment), yyS[yypt-0].item.(*ast.Assignment))
		}
	case 214:
		{
			yyVAL.item = []*ast.Assignment{}
		}
	case 226:
		{
			yyVAL.ident = ""
		}
	case 282:
		{
			yyVAL.item = false
		}
	case 283:
		{
			yyVAL.item = true
		}
	case 284:
		{
			yyVAL.item = nil
		}
	case 297:
		{
			yyVAL.item = false
		}
	case 298:
		{
			yyVAL.item = true
		}
	case 299:
		{
			yyVAL.item = false
		}
	case 300:
		{
			yyVAL.item = true
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}

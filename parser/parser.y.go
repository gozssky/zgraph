// Code generated by goyacc DO NOT EDIT.

// Copyright 2013 The ql Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSES/QL-LICENSE file.

// Copyright 2022 zGraph Authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Initial yacc source generated by ebnf2y[1]
// at 2013-10-04 23:10:47.861401015 +0200 CEST
//
//  $ ebnf2y -o ql.y -oe ql.ebnf -start StatementList -pkg ql -p _
//
//   [1]: http://github.com/cznic/ebnf2y

// The parser implements the PGQL specification
//
// - https://pgql-lang.org/spec/1.5/
//

package parser

import __yyfmt__ "fmt"

import (
	"math"

	"github.com/vescale/zgraph/parser/ast"
	"github.com/vescale/zgraph/parser/model"
	"github.com/vescale/zgraph/parser/opcode"
	"github.com/vescale/zgraph/parser/types"
)

type yySymType struct {
	yys       int
	offset    int // offset
	item      interface{}
	ident     string
	expr      ast.ExprNode
	statement ast.StmtNode
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault          = 57494
	yyEOFCode          = 57344
	abs                = 57455
	all                = 57416
	allDifferent       = 57462
	allProp            = 57477
	and                = 57395
	andand             = 57351
	andnot             = 57468
	any                = 57417
	arrayAgg           = 57430
	as                 = 57353
	asc                = 57354
	assignmentEq       = 57469
	avg                = 57431
	begin              = 57403
	between            = 57396
	bigIntType         = 57355
	bitLit             = 57467
	booleanType        = 57406
	by                 = 57356
	caseKwd            = 57399
	cast               = 57441
	ceil               = 57456
	ceiling            = 57457
	cheapest           = 57419
	commit             = 57405
	cost               = 57421
	count              = 57432
	create             = 57357
	dateType           = 57409
	day                = 57410
	decLit             = 57464
	defaultKwd         = 57358
	deleteKwd          = 57359
	desc               = 57360
	distinct           = 57437
	div                = 57491
	doubleAtIdentifier = 57349
	doubleType         = 57361
	drop               = 57362
	edge               = 57363
	edgeIncomingLeft   = 57482
	edgeIncomingRight  = 57483
	edgeOutgoingLeft   = 57480
	edgeOutgoingRight  = 57481
	elementNumber      = 57458
	elseKwd            = 57402
	empty              = 57488
	end                = 57404
	eq                 = 57470
	yyErrCode          = 57345
	exists             = 57364
	explain            = 57407
	extract            = 57438
	falseKwd           = 57365
	floatLit           = 57463
	floatType          = 57366
	floor              = 57459
	forkKwd            = 57429
	from               = 57367
	ge                 = 57471
	graph              = 57415
	group              = 57368
	hasLabel           = 57460
	having             = 57369
	hexLit             = 57466
	hour               = 57424
	id                 = 57461
	identifier         = 57346
	ifKwd              = 57370
	in                 = 57446
	inDegree           = 57450
	index              = 57371
	insert             = 57372
	intLit             = 57465
	intType            = 57375
	integerType        = 57373
	interval           = 57423
	into               = 57374
	invalid            = 57350
	is                 = 57376
	javaRegexpLike     = 57451
	label              = 57452
	labels             = 57397
	le                 = 57472
	leftArrow          = 57478
	limit              = 57377
	listagg            = 57433
	long               = 57442
	lower              = 57448
	lowerThanOn        = 57489
	match              = 57378
	matchNumber        = 57453
	max                = 57434
	min                = 57435
	minute             = 57425
	mod                = 57492
	month              = 57426
	neg                = 57493
	neq                = 57473
	neqSynonym         = 57474
	not                = 57379
	null               = 57380
	nulleq             = 57475
	offset             = 57414
	on                 = 57381
	or                 = 57394
	order              = 57382
	outDegree          = 57454
	paramMarker        = 57476
	path               = 57422
	pipes              = 57352
	pipesAsOr          = 57490
	precisionType      = 57383
	prefix             = 57447
	primary            = 57384
	properties         = 57398
	reachIncomingLeft  = 57486
	reachIncomingRight = 57487
	reachOutgoingLeft  = 57484
	reachOutgoingRight = 57485
	rightArrow         = 57479
	rollback           = 57413
	second             = 57427
	selectKwd          = 57385
	set                = 57386
	shortest           = 57418
	singleAtIdentifier = 57348
	stringKwd          = 57443
	stringLit          = 57347
	substring          = 57428
	sum                = 57436
	then               = 57400
	timeType           = 57412
	timestampType      = 57411
	timezoneHour       = 57439
	timezoneMinute     = 57440
	top                = 57420
	trueKwd            = 57387
	unique             = 57388
	update             = 57389
	uppper             = 57449
	use                = 57390
	vertex             = 57391
	when               = 57401
	where              = 57392
	with               = 57444
	xor                = 57393
	yearType           = 57408
	zone               = 57445

	yyMaxDepth = 200
	yyTabOfs   = -313
)

var (
	yyXLAT = map[int]int{
		41:    0,   // ')' (218x)
		57344: 1,   // $end (210x)
		59:    2,   // ';' (209x)
		44:    3,   // ',' (188x)
		45:    4,   // '-' (186x)
		57379: 5,   // not (179x)
		57377: 6,   // limit (154x)
		57382: 7,   // order (149x)
		57369: 8,   // having (144x)
		57367: 9,   // from (142x)
		42:    10,  // '*' (137x)
		43:    11,  // '+' (135x)
		40:    12,  // '(' (132x)
		57376: 13,  // is (129x)
		57368: 14,  // group (128x)
		57395: 15,  // and (123x)
		57446: 16,  // in (122x)
		37:    17,  // '%' (121x)
		47:    18,  // '/' (121x)
		60:    19,  // '<' (121x)
		62:    20,  // '>' (121x)
		57470: 21,  // eq (121x)
		57471: 22,  // ge (121x)
		57472: 23,  // le (121x)
		57474: 24,  // neqSynonym (121x)
		57394: 25,  // or (121x)
		57352: 26,  // pipes (121x)
		57385: 27,  // selectKwd (121x)
		57393: 28,  // xor (121x)
		57422: 29,  // path (119x)
		57359: 30,  // deleteKwd (117x)
		57372: 31,  // insert (117x)
		57389: 32,  // update (117x)
		57421: 33,  // cost (106x)
		57404: 34,  // end (102x)
		57401: 35,  // when (101x)
		57354: 36,  // asc (100x)
		57360: 37,  // desc (100x)
		57402: 38,  // elseKwd (99x)
		57353: 39,  // as (98x)
		57429: 40,  // forkKwd (96x)
		57400: 41,  // then (95x)
		57346: 42,  // identifier (94x)
		57546: 43,  // Identifier (78x)
		57465: 44,  // intLit (63x)
		57347: 45,  // stringLit (63x)
		57397: 46,  // labels (62x)
		57412: 47,  // timeType (59x)
		57467: 48,  // bitLit (58x)
		57364: 49,  // exists (58x)
		57466: 50,  // hexLit (58x)
		57409: 51,  // dateType (57x)
		57411: 52,  // timestampType (57x)
		63:    53,  // '?' (56x)
		57455: 54,  // abs (56x)
		57462: 55,  // allDifferent (56x)
		57430: 56,  // arrayAgg (56x)
		57431: 57,  // avg (56x)
		57399: 58,  // caseKwd (56x)
		57441: 59,  // cast (56x)
		57456: 60,  // ceil (56x)
		57457: 61,  // ceiling (56x)
		57432: 62,  // count (56x)
		57464: 63,  // decLit (56x)
		57458: 64,  // elementNumber (56x)
		57438: 65,  // extract (56x)
		57365: 66,  // falseKwd (56x)
		57463: 67,  // floatLit (56x)
		57459: 68,  // floor (56x)
		57460: 69,  // hasLabel (56x)
		57461: 70,  // id (56x)
		57450: 71,  // inDegree (56x)
		57423: 72,  // interval (56x)
		57451: 73,  // javaRegexpLike (56x)
		57452: 74,  // label (56x)
		57433: 75,  // listagg (56x)
		57448: 76,  // lower (56x)
		57453: 77,  // matchNumber (56x)
		57434: 78,  // max (56x)
		57435: 79,  // min (56x)
		57454: 80,  // outDegree (56x)
		57428: 81,  // substring (56x)
		57436: 82,  // sum (56x)
		57387: 83,  // trueKwd (56x)
		57449: 84,  // uppper (56x)
		57618: 85,  // VariableName (54x)
		57620: 86,  // VariableReference (54x)
		57587: 87,  // PropertyAccess (50x)
		57609: 88,  // StringLiteral (49x)
		57610: 89,  // Subquery (48x)
		57495: 90,  // Aggregation (47x)
		57498: 91,  // ArithmeticExpression (47x)
		57500: 92,  // BindVariable (47x)
		57501: 93,  // BooleanLiteral (47x)
		57502: 94,  // BracketedValueExpression (47x)
		57505: 95,  // CaseExpression (47x)
		57506: 96,  // CastSpecification (47x)
		57507: 97,  // CharacterSubstring (47x)
		57515: 98,  // DateLiteral (47x)
		57525: 99,  // ExistsPredicate (47x)
		57529: 100, // ExtractFunction (47x)
		57534: 101, // FunctionInvocation (47x)
		57535: 102, // FunctionName (47x)
		57549: 103, // InPredicate (47x)
		57554: 104, // IntervalLiteral (47x)
		57557: 105, // IsNotNullPredicate (47x)
		57558: 106, // IsNullPredicate (47x)
		57570: 107, // Literal (47x)
		57571: 108, // LogicalExpression (47x)
		57574: 109, // NotInPredicate (47x)
		57575: 110, // NumericLiteral (47x)
		57594: 111, // RelationalExpression (47x)
		57597: 112, // ScalarSubquery (47x)
		57598: 113, // SearchedCase (47x)
		57603: 114, // SimpleCase (47x)
		57608: 115, // StringConcat (47x)
		57611: 116, // TimeLiteral (47x)
		57612: 117, // TimestampLiteral (47x)
		57615: 118, // ValueExpression (47x)
		57392: 119, // where (40x)
		57381: 120, // on (22x)
		57476: 121, // paramMarker (18x)
		57487: 122, // reachIncomingRight (17x)
		57623: 123, // VertexPattern (17x)
		123:   124, // '{' (15x)
		57485: 125, // reachOutgoingRight (15x)
		57483: 126, // edgeIncomingRight (13x)
		57481: 127, // edgeOutgoingRight (11x)
		58:    128, // ':' (9x)
		57363: 129, // edge (9x)
		57482: 130, // edgeIncomingLeft (9x)
		57480: 131, // edgeOutgoingLeft (9x)
		57478: 132, // leftArrow (9x)
		57398: 133, // properties (9x)
		57479: 134, // rightArrow (9x)
		57391: 135, // vertex (9x)
		57437: 136, // distinct (8x)
		57518: 137, // DistinctOpt (8x)
		57617: 138, // VariableLengthPathPattern (8x)
		46:    139, // '.' (6x)
		124:   140, // '|' (6x)
		57580: 141, // PathPatternMacro (6x)
		57619: 142, // VariableNameOpt (6x)
		57628: 143, // WhereClauseOpt (6x)
		57526: 144, // ExpAsVar (5x)
		57540: 145, // GraphName (5x)
		57559: 146, // LabelName (5x)
		57581: 147, // PathPatternMacroList (5x)
		57582: 148, // PathPatternMacroOpt (5x)
		57486: 149, // reachIncomingLeft (5x)
		57484: 150, // reachOutgoingLeft (5x)
		57602: 151, // SelectStmt (5x)
		61:    152, // '=' (4x)
		125:   153, // '}' (4x)
		57416: 154, // all (4x)
		57417: 155, // any (4x)
		57396: 156, // between (4x)
		57533: 157, // FromClause (4x)
		57544: 158, // GroupByClauseOpt (4x)
		57545: 159, // HavingClauseOpt (4x)
		57370: 160, // ifKwd (4x)
		57371: 161, // index (4x)
		57567: 162, // LimitClauseOpt (4x)
		57414: 163, // offset (4x)
		57577: 164, // OrderByClauseOpt (4x)
		57578: 165, // PathPattern (4x)
		57583: 166, // PatternQuantifier (4x)
		57584: 167, // PatternQuantifierOpt (4x)
		57386: 168, // set (4x)
		57604: 169, // SimplePathPattern (4x)
		57420: 170, // top (4x)
		57622: 171, // VariableSpec (4x)
		57626: 172, // WhenClause (4x)
		57503: 173, // ByItem (3x)
		57419: 174, // cheapest (3x)
		57508: 175, // ColonOrIsKeyword (3x)
		57521: 176, // EdgePattern (3x)
		57536: 177, // GraphElementInsertion (3x)
		57561: 178, // LabelPredicate (3x)
		57566: 179, // LengthNum (3x)
		57568: 180, // LimitOption (3x)
		57588: 181, // PropertyAssignment (3x)
		57590: 182, // PropertyName (3x)
		57418: 183, // shortest (3x)
		57477: 184, // allProp (2x)
		57403: 185, // begin (2x)
		57499: 186, // BeginStmt (2x)
		57356: 187, // by (2x)
		57504: 188, // ByList (2x)
		57405: 189, // commit (2x)
		57509: 190, // CommitStmt (2x)
		57357: 191, // create (2x)
		57512: 192, // CreateGraphStmt (2x)
		57513: 193, // CreateIndexStmt (2x)
		57410: 194, // day (2x)
		57517: 195, // DeleteStmt (2x)
		57362: 196, // drop (2x)
		57519: 197, // DropGraphStmt (2x)
		57520: 198, // DropIndexStmt (2x)
		57522: 199, // ElseClauseOpt (2x)
		57523: 200, // EmptyStmt (2x)
		57407: 201, // explain (2x)
		57527: 202, // ExplainStmt (2x)
		57415: 203, // graph (2x)
		57537: 204, // GraphElementInsertionList (2x)
		57538: 205, // GraphElementUpdate (2x)
		57424: 206, // hour (2x)
		57547: 207, // IfExists (2x)
		57548: 208, // IfNotExists (2x)
		57553: 209, // InsertStmt (2x)
		57374: 210, // into (2x)
		57555: 211, // IntoClause (2x)
		57556: 212, // IntoClauseOpt (2x)
		57550: 213, // InValueList (2x)
		57560: 214, // LabelNameList (2x)
		57565: 215, // LabelsAndProperties (2x)
		57563: 216, // LabelSpecification (2x)
		57564: 217, // LabelSpecificationOpt (2x)
		57378: 218, // match (2x)
		57572: 219, // MatchClause (2x)
		57425: 220, // minute (2x)
		57426: 221, // month (2x)
		57380: 222, // null (2x)
		57589: 223, // PropertyAssignmentList (2x)
		57413: 224, // rollback (2x)
		57595: 225, // RollbackStmt (2x)
		57427: 226, // second (2x)
		57599: 227, // SelectClause (2x)
		57600: 228, // SelectEelement (2x)
		57606: 229, // Statement (2x)
		57613: 230, // UpdateStmt (2x)
		57390: 231, // use (2x)
		57614: 232, // UseStmt (2x)
		57624: 233, // VertexPatternOpt (2x)
		57625: 234, // VertexReference (2x)
		57627: 235, // WhenClauseList (2x)
		57444: 236, // with (2x)
		57408: 237, // yearType (2x)
		57445: 238, // zone (2x)
		57496: 239, // AllPropertiesPrefixOpt (1x)
		57497: 240, // ArgumentList (1x)
		57406: 241, // booleanType (1x)
		57510: 242, // CostClause (1x)
		57511: 243, // CostClauseOpt (1x)
		57514: 244, // DataType (1x)
		57516: 245, // DateTimeField (1x)
		57361: 246, // doubleType (1x)
		57524: 247, // Entry (1x)
		57528: 248, // ExtractField (1x)
		57530: 249, // FieldAsName (1x)
		57531: 250, // FieldAsNameOpt (1x)
		57366: 251, // floatType (1x)
		57532: 252, // ForStringLengthOpt (1x)
		57539: 253, // GraphElementUpdateList (1x)
		57541: 254, // GraphOnClause (1x)
		57542: 255, // GraphOnClauseOpt (1x)
		57543: 256, // GraphPattern (1x)
		57551: 257, // IndexKeyTypeOpt (1x)
		57373: 258, // integerType (1x)
		57375: 259, // intType (1x)
		57562: 260, // LabelPredicateOpt (1x)
		57569: 261, // ListaggSeparatorOpt (1x)
		57442: 262, // long (1x)
		57573: 263, // MatchClauseList (1x)
		57576: 264, // Order (1x)
		57579: 265, // PathPatternList (1x)
		57447: 266, // prefix (1x)
		57585: 267, // PropertiesSpecification (1x)
		57586: 268, // PropertiesSpecificationOpt (1x)
		57591: 269, // PropertyNameList (1x)
		57592: 270, // QuantifiedPathExpr (1x)
		57593: 271, // ReachabilityPathExpr (1x)
		57596: 272, // RowsPerMatchOpt (1x)
		57601: 273, // SelectElementList (1x)
		57605: 274, // StartPosition (1x)
		57607: 275, // StatementList (1x)
		57443: 276, // stringKwd (1x)
		57439: 277, // timezoneHour (1x)
		57440: 278, // timezoneMinute (1x)
		57388: 279, // unique (1x)
		57616: 280, // ValueExpressionList (1x)
		57621: 281, // VariableReferenceList (1x)
		57494: 282, // $default (0x)
		38:    283, // '&' (0x)
		94:    284, // '^' (0x)
		126:   285, // '~' (0x)
		57351: 286, // andand (0x)
		57468: 287, // andnot (0x)
		57469: 288, // assignmentEq (0x)
		57355: 289, // bigIntType (0x)
		57358: 290, // defaultKwd (0x)
		57491: 291, // div (0x)
		57349: 292, // doubleAtIdentifier (0x)
		57488: 293, // empty (0x)
		57345: 294, // error (0x)
		57552: 295, // IndexName (0x)
		57350: 296, // invalid (0x)
		57489: 297, // lowerThanOn (0x)
		57492: 298, // mod (0x)
		57493: 299, // neg (0x)
		57473: 300, // neq (0x)
		57475: 301, // nulleq (0x)
		57490: 302, // pipesAsOr (0x)
		57383: 303, // precisionType (0x)
		57384: 304, // primary (0x)
		57348: 305, // singleAtIdentifier (0x)
	}

	yySymNames = []string{
		"')'",
		"$end",
		"';'",
		"','",
		"'-'",
		"not",
		"limit",
		"order",
		"having",
		"from",
		"'*'",
		"'+'",
		"'('",
		"is",
		"group",
		"and",
		"in",
		"'%'",
		"'/'",
		"'<'",
		"'>'",
		"eq",
		"ge",
		"le",
		"neqSynonym",
		"or",
		"pipes",
		"selectKwd",
		"xor",
		"path",
		"deleteKwd",
		"insert",
		"update",
		"cost",
		"end",
		"when",
		"asc",
		"desc",
		"elseKwd",
		"as",
		"forkKwd",
		"then",
		"identifier",
		"Identifier",
		"intLit",
		"stringLit",
		"labels",
		"timeType",
		"bitLit",
		"exists",
		"hexLit",
		"dateType",
		"timestampType",
		"'?'",
		"abs",
		"allDifferent",
		"arrayAgg",
		"avg",
		"caseKwd",
		"cast",
		"ceil",
		"ceiling",
		"count",
		"decLit",
		"elementNumber",
		"extract",
		"falseKwd",
		"floatLit",
		"floor",
		"hasLabel",
		"id",
		"inDegree",
		"interval",
		"javaRegexpLike",
		"label",
		"listagg",
		"lower",
		"matchNumber",
		"max",
		"min",
		"outDegree",
		"substring",
		"sum",
		"trueKwd",
		"uppper",
		"VariableName",
		"VariableReference",
		"PropertyAccess",
		"StringLiteral",
		"Subquery",
		"Aggregation",
		"ArithmeticExpression",
		"BindVariable",
		"BooleanLiteral",
		"BracketedValueExpression",
		"CaseExpression",
		"CastSpecification",
		"CharacterSubstring",
		"DateLiteral",
		"ExistsPredicate",
		"ExtractFunction",
		"FunctionInvocation",
		"FunctionName",
		"InPredicate",
		"IntervalLiteral",
		"IsNotNullPredicate",
		"IsNullPredicate",
		"Literal",
		"LogicalExpression",
		"NotInPredicate",
		"NumericLiteral",
		"RelationalExpression",
		"ScalarSubquery",
		"SearchedCase",
		"SimpleCase",
		"StringConcat",
		"TimeLiteral",
		"TimestampLiteral",
		"ValueExpression",
		"where",
		"on",
		"paramMarker",
		"reachIncomingRight",
		"VertexPattern",
		"'{'",
		"reachOutgoingRight",
		"edgeIncomingRight",
		"edgeOutgoingRight",
		"':'",
		"edge",
		"edgeIncomingLeft",
		"edgeOutgoingLeft",
		"leftArrow",
		"properties",
		"rightArrow",
		"vertex",
		"distinct",
		"DistinctOpt",
		"VariableLengthPathPattern",
		"'.'",
		"'|'",
		"PathPatternMacro",
		"VariableNameOpt",
		"WhereClauseOpt",
		"ExpAsVar",
		"GraphName",
		"LabelName",
		"PathPatternMacroList",
		"PathPatternMacroOpt",
		"reachIncomingLeft",
		"reachOutgoingLeft",
		"SelectStmt",
		"'='",
		"'}'",
		"all",
		"any",
		"between",
		"FromClause",
		"GroupByClauseOpt",
		"HavingClauseOpt",
		"ifKwd",
		"index",
		"LimitClauseOpt",
		"offset",
		"OrderByClauseOpt",
		"PathPattern",
		"PatternQuantifier",
		"PatternQuantifierOpt",
		"set",
		"SimplePathPattern",
		"top",
		"VariableSpec",
		"WhenClause",
		"ByItem",
		"cheapest",
		"ColonOrIsKeyword",
		"EdgePattern",
		"GraphElementInsertion",
		"LabelPredicate",
		"LengthNum",
		"LimitOption",
		"PropertyAssignment",
		"PropertyName",
		"shortest",
		"allProp",
		"begin",
		"BeginStmt",
		"by",
		"ByList",
		"commit",
		"CommitStmt",
		"create",
		"CreateGraphStmt",
		"CreateIndexStmt",
		"day",
		"DeleteStmt",
		"drop",
		"DropGraphStmt",
		"DropIndexStmt",
		"ElseClauseOpt",
		"EmptyStmt",
		"explain",
		"ExplainStmt",
		"graph",
		"GraphElementInsertionList",
		"GraphElementUpdate",
		"hour",
		"IfExists",
		"IfNotExists",
		"InsertStmt",
		"into",
		"IntoClause",
		"IntoClauseOpt",
		"InValueList",
		"LabelNameList",
		"LabelsAndProperties",
		"LabelSpecification",
		"LabelSpecificationOpt",
		"match",
		"MatchClause",
		"minute",
		"month",
		"null",
		"PropertyAssignmentList",
		"rollback",
		"RollbackStmt",
		"second",
		"SelectClause",
		"SelectEelement",
		"Statement",
		"UpdateStmt",
		"use",
		"UseStmt",
		"VertexPatternOpt",
		"VertexReference",
		"WhenClauseList",
		"with",
		"yearType",
		"zone",
		"AllPropertiesPrefixOpt",
		"ArgumentList",
		"booleanType",
		"CostClause",
		"CostClauseOpt",
		"DataType",
		"DateTimeField",
		"doubleType",
		"Entry",
		"ExtractField",
		"FieldAsName",
		"FieldAsNameOpt",
		"floatType",
		"ForStringLengthOpt",
		"GraphElementUpdateList",
		"GraphOnClause",
		"GraphOnClauseOpt",
		"GraphPattern",
		"IndexKeyTypeOpt",
		"integerType",
		"intType",
		"LabelPredicateOpt",
		"ListaggSeparatorOpt",
		"long",
		"MatchClauseList",
		"Order",
		"PathPatternList",
		"prefix",
		"PropertiesSpecification",
		"PropertiesSpecificationOpt",
		"PropertyNameList",
		"QuantifiedPathExpr",
		"ReachabilityPathExpr",
		"RowsPerMatchOpt",
		"SelectElementList",
		"StartPosition",
		"StatementList",
		"stringKwd",
		"timezoneHour",
		"timezoneMinute",
		"unique",
		"ValueExpressionList",
		"VariableReferenceList",
		"$default",
		"'&'",
		"'^'",
		"'~'",
		"andand",
		"andnot",
		"assignmentEq",
		"bigIntType",
		"defaultKwd",
		"div",
		"doubleAtIdentifier",
		"empty",
		"error",
		"IndexName",
		"invalid",
		"lowerThanOn",
		"mod",
		"neg",
		"neq",
		"nulleq",
		"pipesAsOr",
		"precisionType",
		"primary",
		"singleAtIdentifier",
	}

	yyReductions = []struct{ xsym, components int }{
		{0, 1},
		{247, 1},
		{275, 1},
		{275, 3},
		{229, 1},
		{229, 1},
		{229, 1},
		{229, 1},
		{229, 1},
		{229, 1},
		{229, 1},
		{229, 1},
		{229, 1},
		{229, 1},
		{229, 1},
		{229, 1},
		{229, 1},
		{229, 1},
		{200, 0},
		{186, 1},
		{190, 1},
		{192, 4},
		{193, 9},
		{257, 0},
		{257, 1},
		{195, 9},
		{281, 1},
		{281, 3},
		{197, 4},
		{198, 6},
		{202, 2},
		{209, 3},
		{209, 10},
		{212, 0},
		{212, 1},
		{211, 2},
		{204, 1},
		{204, 3},
		{177, 3},
		{177, 7},
		{234, 1},
		{215, 2},
		{217, 0},
		{217, 1},
		{216, 4},
		{268, 0},
		{268, 1},
		{267, 4},
		{223, 1},
		{223, 3},
		{181, 3},
		{87, 3},
		{118, 1},
		{118, 1},
		{118, 1},
		{118, 1},
		{118, 1},
		{118, 1},
		{118, 1},
		{118, 1},
		{118, 1},
		{118, 1},
		{118, 1},
		{118, 1},
		{118, 1},
		{118, 1},
		{118, 1},
		{118, 1},
		{118, 1},
		{118, 1},
		{118, 1},
		{118, 1},
		{118, 1},
		{86, 1},
		{107, 1},
		{107, 1},
		{107, 1},
		{107, 1},
		{107, 1},
		{107, 1},
		{107, 1},
		{88, 1},
		{88, 1},
		{88, 1},
		{110, 1},
		{110, 1},
		{110, 1},
		{93, 1},
		{93, 1},
		{98, 2},
		{116, 2},
		{117, 2},
		{104, 3},
		{245, 1},
		{245, 1},
		{245, 1},
		{245, 1},
		{245, 1},
		{245, 1},
		{92, 1},
		{91, 2},
		{91, 3},
		{91, 3},
		{91, 3},
		{91, 3},
		{91, 3},
		{111, 3},
		{111, 3},
		{111, 3},
		{111, 3},
		{111, 3},
		{111, 3},
		{108, 3},
		{108, 3},
		{108, 3},
		{108, 2},
		{115, 3},
		{94, 3},
		{101, 4},
		{102, 1},
		{102, 1},
		{102, 1},
		{102, 1},
		{102, 1},
		{102, 1},
		{102, 1},
		{102, 1},
		{102, 1},
		{102, 1},
		{102, 1},
		{102, 1},
		{102, 1},
		{102, 1},
		{102, 1},
		{102, 1},
		{240, 1},
		{240, 3},
		{97, 7},
		{274, 1},
		{252, 0},
		{252, 2},
		{90, 4},
		{90, 5},
		{90, 5},
		{90, 5},
		{90, 5},
		{90, 5},
		{90, 5},
		{90, 6},
		{137, 0},
		{137, 1},
		{261, 0},
		{261, 2},
		{100, 6},
		{248, 1},
		{248, 1},
		{248, 1},
		{248, 1},
		{248, 1},
		{248, 1},
		{248, 1},
		{248, 1},
		{106, 3},
		{105, 4},
		{96, 6},
		{244, 1},
		{244, 1},
		{244, 1},
		{244, 1},
		{244, 1},
		{244, 1},
		{244, 1},
		{244, 1},
		{244, 1},
		{244, 4},
		{244, 1},
		{244, 4},
		{95, 1},
		{95, 1},
		{114, 5},
		{113, 4},
		{235, 1},
		{235, 2},
		{172, 4},
		{199, 0},
		{199, 2},
		{103, 3},
		{109, 4},
		{213, 3},
		{280, 1},
		{280, 3},
		{99, 2},
		{89, 3},
		{112, 1},
		{225, 1},
		{151, 8},
		{227, 3},
		{227, 2},
		{273, 1},
		{273, 3},
		{228, 1},
		{228, 3},
		{144, 2},
		{239, 0},
		{239, 2},
		{250, 0},
		{250, 1},
		{249, 2},
		{249, 2},
		{157, 2},
		{263, 1},
		{263, 3},
		{219, 4},
		{254, 2},
		{255, 0},
		{255, 1},
		{272, 0},
		{256, 1},
		{256, 3},
		{265, 1},
		{265, 3},
		{165, 1},
		{165, 2},
		{165, 3},
		{165, 3},
		{165, 4},
		{165, 3},
		{165, 3},
		{165, 4},
		{165, 2},
		{169, 1},
		{169, 3},
		{169, 3},
		{138, 3},
		{271, 4},
		{271, 4},
		{271, 4},
		{123, 3},
		{233, 0},
		{233, 1},
		{176, 3},
		{176, 1},
		{176, 3},
		{176, 1},
		{176, 3},
		{176, 1},
		{171, 2},
		{142, 0},
		{142, 1},
		{178, 2},
		{260, 0},
		{260, 1},
		{175, 1},
		{175, 1},
		{214, 1},
		{214, 3},
		{270, 2},
		{270, 8},
		{242, 2},
		{243, 0},
		{243, 1},
		{166, 1},
		{166, 1},
		{166, 1},
		{166, 3},
		{166, 4},
		{166, 5},
		{166, 4},
		{167, 0},
		{167, 1},
		{148, 0},
		{148, 1},
		{147, 1},
		{147, 2},
		{141, 5},
		{143, 0},
		{143, 2},
		{158, 0},
		{158, 3},
		{188, 1},
		{188, 3},
		{173, 1},
		{173, 2},
		{264, 1},
		{264, 1},
		{159, 0},
		{159, 2},
		{164, 0},
		{164, 3},
		{162, 0},
		{162, 2},
		{162, 4},
		{162, 4},
		{180, 1},
		{180, 1},
		{179, 1},
		{230, 9},
		{253, 1},
		{253, 3},
		{205, 5},
		{232, 2},
		{207, 0},
		{207, 2},
		{208, 0},
		{208, 3},
		{145, 1},
		{182, 1},
		{295, 1},
		{146, 1},
		{85, 1},
		{43, 1},
		{269, 1},
		{269, 3},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [547][]uint16{
		// 0
		{1: 295, 295, 27: 43, 29: 341, 43, 337, 43, 141: 340, 147: 339, 334, 151: 328, 185: 331, 318, 189: 332, 319, 333, 320, 321, 195: 322, 335, 323, 324, 200: 317, 336, 325, 209: 326, 224: 338, 327, 229: 316, 329, 342, 330, 247: 314, 275: 315},
		{1: 313},
		{1: 312, 858},
		{1: 311, 311},
		{1: 309, 309},
		// 5
		{1: 308, 308},
		{1: 307, 307},
		{1: 306, 306},
		{1: 305, 305},
		{1: 304, 304},
		// 10
		{1: 303, 303},
		{1: 302, 302},
		{1: 301, 301},
		{1: 300, 300},
		{1: 299, 299},
		// 15
		{1: 298, 298},
		{1: 297, 297},
		{1: 296, 296},
		{1: 294, 294},
		{1: 293, 293},
		// 20
		{161: 290, 203: 840, 257: 841, 279: 842},
		{27: 441, 30: 804, 805, 806, 227: 440},
		{161: 795, 203: 794},
		{27: 43, 29: 341, 141: 340, 147: 339, 439, 151: 793},
		{129: 280, 135: 280, 210: 757, 756, 755},
		// 25
		{1: 119, 119},
		{27: 42, 29: 341, 42, 42, 42, 141: 754},
		{27: 41, 29: 41, 41, 41, 41},
		{42: 345, 346},
		{42: 345, 344, 145: 343},
		// 30
		{1: 13, 13},
		{8, 8, 8, 8, 6: 8, 8, 8, 14: 8, 119: 8, 129: 8, 135: 8},
		{3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 46: 3, 119: 3, 3, 3, 3, 124: 3, 3, 3, 3, 3, 3, 133: 3, 135: 3, 139: 3, 3, 152: 3, 156: 3, 168: 3, 184: 3},
		{39: 347},
		{12: 353, 123: 352, 154: 350, 349, 165: 354, 169: 348, 351},
		// 35
		{92, 92, 92, 92, 695, 6: 92, 92, 92, 14: 92, 27: 92, 29: 92, 92, 92, 92, 119: 92, 92, 130: 693, 691, 694, 134: 692, 149: 744, 743, 176: 742, 271: 741},
		{12: 353, 123: 689, 138: 736, 174: 738, 183: 737},
		{12: 353, 123: 689, 138: 733, 174: 732, 183: 731},
		{44: 685},
		{83, 83, 83, 83, 83, 6: 83, 83, 83, 14: 83, 27: 83, 29: 83, 83, 83, 83, 119: 83, 83, 130: 83, 83, 83, 134: 83, 149: 83, 83},
		// 40
		{66, 13: 66, 42: 345, 518, 128: 66, 142: 517, 171: 516},
		{27: 38, 29: 38, 38, 38, 38, 119: 356, 143: 355},
		{27: 39, 29: 39, 39, 39, 39},
		{4: 399, 401, 12: 402, 42: 345, 435, 389, 386, 413, 395, 388, 433, 387, 394, 396, 398, 407, 419, 426, 424, 432, 429, 408, 409, 421, 390, 416, 428, 392, 391, 410, 414, 411, 417, 397, 406, 412, 427, 404, 415, 423, 422, 418, 420, 425, 393, 405, 378, 357, 358, 379, 434, 368, 361, 360, 381, 365, 373, 372, 367, 382, 376, 369, 366, 403, 374, 385, 371, 370, 359, 363, 375, 380, 362, 377, 431, 430, 364, 383, 384, 400},
		{261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 13: 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 139: 682},
		// 45
		{260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 13: 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260},
		{259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 13: 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259},
		{258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 13: 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258},
		{257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 13: 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257},
		{256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 13: 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256},
		// 50
		{255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 13: 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255},
		{254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 13: 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254},
		{253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 13: 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253},
		{252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 13: 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252},
		{251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 13: 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251},
		// 55
		{250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 13: 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250},
		{249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 13: 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249},
		{248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 13: 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248},
		{247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 13: 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247},
		{246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 13: 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246},
		// 60
		{245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 13: 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245},
		{244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 13: 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244},
		{243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 13: 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243},
		{242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 13: 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242},
		{241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 13: 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241},
		// 65
		{240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 13: 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 139: 240, 168: 240},
		{239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 13: 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239},
		{238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 13: 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238},
		{237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 13: 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237},
		{236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 13: 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236},
		// 70
		{235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 13: 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235},
		{234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 13: 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234},
		{233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 13: 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233},
		{232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 13: 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232},
		{231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 13: 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231},
		// 75
		{230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 13: 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230},
		{229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 13: 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229},
		{228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 13: 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228},
		{227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 13: 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227},
		{226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 13: 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226},
		// 80
		{225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 13: 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225},
		{45: 681},
		{45: 680},
		{45: 679},
		{45: 671},
		// 85
		{214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 13: 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214},
		{4: 399, 401, 12: 402, 42: 345, 435, 389, 386, 413, 395, 388, 433, 387, 394, 396, 398, 407, 419, 426, 424, 432, 429, 408, 409, 421, 390, 416, 428, 392, 391, 410, 414, 411, 417, 397, 406, 412, 427, 404, 415, 423, 422, 418, 420, 425, 393, 405, 378, 357, 358, 379, 434, 368, 361, 360, 381, 365, 373, 372, 367, 382, 376, 369, 366, 403, 374, 385, 371, 370, 359, 363, 375, 380, 362, 377, 431, 430, 364, 383, 384, 670},
		{37, 37, 37, 4: 460, 473, 37, 37, 37, 10: 456, 459, 13: 471, 37, 469, 472, 458, 457, 464, 463, 461, 465, 466, 462, 467, 470, 37, 468, 37, 37, 37, 37, 37},
		{4: 399, 401, 12: 402, 42: 345, 435, 389, 386, 413, 395, 388, 433, 387, 394, 396, 398, 407, 419, 426, 424, 432, 429, 408, 409, 421, 390, 416, 428, 392, 391, 410, 414, 411, 417, 397, 406, 412, 427, 404, 415, 423, 422, 418, 420, 425, 393, 405, 378, 357, 358, 379, 434, 368, 361, 360, 381, 365, 373, 372, 367, 382, 376, 369, 366, 403, 374, 385, 371, 370, 359, 363, 375, 380, 362, 377, 431, 430, 364, 383, 384, 669},
		{4: 399, 401, 12: 402, 27: 43, 29: 341, 42: 345, 435, 389, 386, 413, 395, 388, 433, 387, 394, 396, 398, 407, 419, 426, 424, 432, 429, 408, 409, 421, 390, 416, 428, 392, 391, 410, 414, 411, 417, 397, 406, 412, 427, 404, 415, 423, 422, 418, 420, 425, 393, 405, 378, 357, 358, 379, 434, 368, 361, 360, 381, 365, 373, 372, 367, 382, 376, 369, 366, 403, 374, 385, 371, 370, 359, 363, 375, 380, 362, 377, 431, 430, 364, 383, 384, 667, 141: 340, 147: 339, 439, 151: 438},
		// 90
		{12: 661},
		{12: 194},
		{12: 193},
		{12: 192},
		{12: 191},
		// 95
		{12: 190},
		{12: 189},
		{12: 188},
		{12: 187},
		{12: 186},
		// 100
		{12: 185},
		{12: 184},
		{12: 183},
		{12: 182},
		{12: 181},
		// 105
		{12: 180},
		{12: 179},
		{12: 652},
		{12: 646},
		{12: 642},
		// 110
		{12: 638},
		{12: 634},
		{12: 630},
		{12: 626},
		{12: 619},
		// 115
		{12: 606},
		{12: 585},
		{136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 13: 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136},
		{135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 13: 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135},
		{4: 399, 401, 12: 402, 35: 573, 42: 345, 435, 389, 386, 413, 395, 388, 433, 387, 394, 396, 398, 407, 419, 426, 424, 432, 429, 408, 409, 421, 390, 416, 428, 392, 391, 410, 414, 411, 417, 397, 406, 412, 427, 404, 415, 423, 422, 418, 420, 425, 393, 405, 378, 357, 358, 379, 434, 368, 361, 360, 381, 365, 373, 372, 367, 382, 376, 369, 366, 403, 374, 385, 371, 370, 359, 363, 375, 380, 362, 377, 431, 430, 364, 383, 384, 570, 172: 572, 235: 571},
		// 120
		{12: 437, 89: 436},
		{120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 13: 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120},
		{4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 13: 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 139: 4, 168: 4},
		{122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 13: 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122},
		{27: 43, 29: 341, 141: 340, 147: 339, 439, 151: 438},
		// 125
		{569},
		{27: 441, 227: 440},
		{9: 507, 157: 506},
		{4: 164, 164, 10: 444, 12: 164, 42: 164, 44: 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 136: 442, 443},
		{4: 163, 163, 12: 163, 42: 163, 44: 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163},
		// 130
		{4: 399, 401, 12: 402, 42: 345, 449, 389, 386, 413, 395, 388, 433, 387, 394, 396, 398, 407, 419, 426, 424, 432, 429, 408, 409, 421, 390, 416, 428, 392, 391, 410, 414, 411, 417, 397, 406, 412, 427, 404, 415, 423, 422, 418, 420, 425, 393, 405, 378, 357, 358, 379, 434, 368, 361, 360, 381, 365, 373, 372, 367, 382, 376, 369, 366, 403, 374, 385, 371, 370, 359, 363, 375, 380, 362, 377, 431, 430, 364, 383, 384, 445, 144: 448, 228: 447, 273: 446},
		{9: 116},
		{108, 108, 108, 108, 460, 473, 108, 108, 108, 108, 456, 459, 13: 471, 15: 469, 472, 458, 457, 464, 463, 461, 465, 466, 462, 467, 470, 28: 468, 36: 108, 108, 39: 476, 249: 475, 474},
		{3: 454, 9: 117},
		{3: 115, 9: 115},
		// 135
		{3: 113, 9: 113},
		{3: 4, 4, 4, 9: 4, 4, 4, 13: 4, 15: 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 28: 4, 39: 4, 139: 4, 184: 450},
		{3: 110, 9: 110, 239: 451, 266: 452},
		{3: 112, 9: 112},
		{45: 386, 48: 388, 50: 387, 88: 453},
		// 140
		{3: 109, 9: 109},
		{4: 399, 401, 12: 402, 42: 345, 449, 389, 386, 413, 395, 388, 433, 387, 394, 396, 398, 407, 419, 426, 424, 432, 429, 408, 409, 421, 390, 416, 428, 392, 391, 410, 414, 411, 417, 397, 406, 412, 427, 404, 415, 423, 422, 418, 420, 425, 393, 405, 378, 357, 358, 379, 434, 368, 361, 360, 381, 365, 373, 372, 367, 382, 376, 369, 366, 403, 374, 385, 371, 370, 359, 363, 375, 380, 362, 377, 431, 430, 364, 383, 384, 445, 144: 448, 228: 455},
		{3: 114, 9: 114},
		{4: 399, 401, 12: 402, 42: 345, 435, 389, 386, 413, 395, 388, 433, 387, 394, 396, 398, 407, 419, 426, 424, 432, 429, 408, 409, 421, 390, 416, 428, 392, 391, 410, 414, 411, 417, 397, 406, 412, 427, 404, 415, 423, 422, 418, 420, 425, 393, 405, 378, 357, 358, 379, 434, 368, 361, 360, 381, 365, 373, 372, 367, 382, 376, 369, 366, 403, 374, 385, 371, 370, 359, 363, 375, 380, 362, 377, 431, 430, 364, 383, 384, 505},
		{4: 399, 401, 12: 402, 42: 345, 435, 389, 386, 413, 395, 388, 433, 387, 394, 396, 398, 407, 419, 426, 424, 432, 429, 408, 409, 421, 390, 416, 428, 392, 391, 410, 414, 411, 417, 397, 406, 412, 427, 404, 415, 423, 422, 418, 420, 425, 393, 405, 378, 357, 358, 379, 434, 368, 361, 360, 381, 365, 373, 372, 367, 382, 376, 369, 366, 403, 374, 385, 371, 370, 359, 363, 375, 380, 362, 377, 431, 430, 364, 383, 384, 504},
		// 145
		{4: 399, 401, 12: 402, 42: 345, 435, 389, 386, 413, 395, 388, 433, 387, 394, 396, 398, 407, 419, 426, 424, 432, 429, 408, 409, 421, 390, 416, 428, 392, 391, 410, 414, 411, 417, 397, 406, 412, 427, 404, 415, 423, 422, 418, 420, 425, 393, 405, 378, 357, 358, 379, 434, 368, 361, 360, 381, 365, 373, 372, 367, 382, 376, 369, 366, 403, 374, 385, 371, 370, 359, 363, 375, 380, 362, 377, 431, 430, 364, 383, 384, 503},
		{4: 399, 401, 12: 402, 42: 345, 435, 389, 386, 413, 395, 388, 433, 387, 394, 396, 398, 407, 419, 426, 424, 432, 429, 408, 409, 421, 390, 416, 428, 392, 391, 410, 414, 411, 417, 397, 406, 412, 427, 404, 415, 423, 422, 418, 420, 425, 393, 405, 378, 357, 358, 379, 434, 368, 361, 360, 381, 365, 373, 372, 367, 382, 376, 369, 366, 403, 374, 385, 371, 370, 359, 363, 375, 380, 362, 377, 431, 430, 364, 383, 384, 502},
		{4: 399, 401, 12: 402, 42: 345, 435, 389, 386, 413, 395, 388, 433, 387, 394, 396, 398, 407, 419, 426, 424, 432, 429, 408, 409, 421, 390, 416, 428, 392, 391, 410, 414, 411, 417, 397, 406, 412, 427, 404, 415, 423, 422, 418, 420, 425, 393, 405, 378, 357, 358, 379, 434, 368, 361, 360, 381, 365, 373, 372, 367, 382, 376, 369, 366, 403, 374, 385, 371, 370, 359, 363, 375, 380, 362, 377, 431, 430, 364, 383, 384, 501},
		{4: 399, 401, 12: 402, 42: 345, 435, 389, 386, 413, 395, 388, 433, 387, 394, 396, 398, 407, 419, 426, 424, 432, 429, 408, 409, 421, 390, 416, 428, 392, 391, 410, 414, 411, 417, 397, 406, 412, 427, 404, 415, 423, 422, 418, 420, 425, 393, 405, 378, 357, 358, 379, 434, 368, 361, 360, 381, 365, 373, 372, 367, 382, 376, 369, 366, 403, 374, 385, 371, 370, 359, 363, 375, 380, 362, 377, 431, 430, 364, 383, 384, 500},
		{4: 399, 401, 12: 402, 42: 345, 435, 389, 386, 413, 395, 388, 433, 387, 394, 396, 398, 407, 419, 426, 424, 432, 429, 408, 409, 421, 390, 416, 428, 392, 391, 410, 414, 411, 417, 397, 406, 412, 427, 404, 415, 423, 422, 418, 420, 425, 393, 405, 378, 357, 358, 379, 434, 368, 361, 360, 381, 365, 373, 372, 367, 382, 376, 369, 366, 403, 374, 385, 371, 370, 359, 363, 375, 380, 362, 377, 431, 430, 364, 383, 384, 499},
		// 150
		{4: 399, 401, 12: 402, 42: 345, 435, 389, 386, 413, 395, 388, 433, 387, 394, 396, 398, 407, 419, 426, 424, 432, 429, 408, 409, 421, 390, 416, 428, 392, 391, 410, 414, 411, 417, 397, 406, 412, 427, 404, 415, 423, 422, 418, 420, 425, 393, 405, 378, 357, 358, 379, 434, 368, 361, 360, 381, 365, 373, 372, 367, 382, 376, 369, 366, 403, 374, 385, 371, 370, 359, 363, 375, 380, 362, 377, 431, 430, 364, 383, 384, 498},
		{4: 399, 401, 12: 402, 42: 345, 435, 389, 386, 413, 395, 388, 433, 387, 394, 396, 398, 407, 419, 426, 424, 432, 429, 408, 409, 421, 390, 416, 428, 392, 391, 410, 414, 411, 417, 397, 406, 412, 427, 404, 415, 423, 422, 418, 420, 425, 393, 405, 378, 357, 358, 379, 434, 368, 361, 360, 381, 365, 373, 372, 367, 382, 376, 369, 366, 403, 374, 385, 371, 370, 359, 363, 375, 380, 362, 377, 431, 430, 364, 383, 384, 497},
		{4: 399, 401, 12: 402, 42: 345, 435, 389, 386, 413, 395, 388, 433, 387, 394, 396, 398, 407, 419, 426, 424, 432, 429, 408, 409, 421, 390, 416, 428, 392, 391, 410, 414, 411, 417, 397, 406, 412, 427, 404, 415, 423, 422, 418, 420, 425, 393, 405, 378, 357, 358, 379, 434, 368, 361, 360, 381, 365, 373, 372, 367, 382, 376, 369, 366, 403, 374, 385, 371, 370, 359, 363, 375, 380, 362, 377, 431, 430, 364, 383, 384, 496},
		{4: 399, 401, 12: 402, 42: 345, 435, 389, 386, 413, 395, 388, 433, 387, 394, 396, 398, 407, 419, 426, 424, 432, 429, 408, 409, 421, 390, 416, 428, 392, 391, 410, 414, 411, 417, 397, 406, 412, 427, 404, 415, 423, 422, 418, 420, 425, 393, 405, 378, 357, 358, 379, 434, 368, 361, 360, 381, 365, 373, 372, 367, 382, 376, 369, 366, 403, 374, 385, 371, 370, 359, 363, 375, 380, 362, 377, 431, 430, 364, 383, 384, 495},
		{4: 399, 401, 12: 402, 42: 345, 435, 389, 386, 413, 395, 388, 433, 387, 394, 396, 398, 407, 419, 426, 424, 432, 429, 408, 409, 421, 390, 416, 428, 392, 391, 410, 414, 411, 417, 397, 406, 412, 427, 404, 415, 423, 422, 418, 420, 425, 393, 405, 378, 357, 358, 379, 434, 368, 361, 360, 381, 365, 373, 372, 367, 382, 376, 369, 366, 403, 374, 385, 371, 370, 359, 363, 375, 380, 362, 377, 431, 430, 364, 383, 384, 494},
		// 155
		{4: 399, 401, 12: 402, 42: 345, 435, 389, 386, 413, 395, 388, 433, 387, 394, 396, 398, 407, 419, 426, 424, 432, 429, 408, 409, 421, 390, 416, 428, 392, 391, 410, 414, 411, 417, 397, 406, 412, 427, 404, 415, 423, 422, 418, 420, 425, 393, 405, 378, 357, 358, 379, 434, 368, 361, 360, 381, 365, 373, 372, 367, 382, 376, 369, 366, 403, 374, 385, 371, 370, 359, 363, 375, 380, 362, 377, 431, 430, 364, 383, 384, 493},
		{4: 399, 401, 12: 402, 42: 345, 435, 389, 386, 413, 395, 388, 433, 387, 394, 396, 398, 407, 419, 426, 424, 432, 429, 408, 409, 421, 390, 416, 428, 392, 391, 410, 414, 411, 417, 397, 406, 412, 427, 404, 415, 423, 422, 418, 420, 425, 393, 405, 378, 357, 358, 379, 434, 368, 361, 360, 381, 365, 373, 372, 367, 382, 376, 369, 366, 403, 374, 385, 371, 370, 359, 363, 375, 380, 362, 377, 431, 430, 364, 383, 384, 492},
		{4: 399, 401, 12: 402, 42: 345, 435, 389, 386, 413, 395, 388, 433, 387, 394, 396, 398, 407, 419, 426, 424, 432, 429, 408, 409, 421, 390, 416, 428, 392, 391, 410, 414, 411, 417, 397, 406, 412, 427, 404, 415, 423, 422, 418, 420, 425, 393, 405, 378, 357, 358, 379, 434, 368, 361, 360, 381, 365, 373, 372, 367, 382, 376, 369, 366, 403, 374, 385, 371, 370, 359, 363, 375, 380, 362, 377, 431, 430, 364, 383, 384, 491},
		{5: 489, 222: 488},
		{12: 481, 213: 487},
		// 160
		{16: 479},
		{111, 111, 111, 111, 6: 111, 111, 111, 111, 36: 111, 111},
		{107, 107, 107, 107, 6: 107, 107, 107, 107, 36: 107, 107},
		{42: 345, 477, 45: 478},
		{106, 106, 106, 106, 6: 106, 106, 106, 106, 36: 106, 106},
		// 165
		{105, 105, 105, 105, 6: 105, 105, 105, 105, 36: 105, 105},
		{12: 481, 213: 480},
		{126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 13: 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126},
		{4: 399, 401, 12: 402, 42: 345, 435, 389, 386, 413, 395, 388, 433, 387, 394, 396, 398, 407, 419, 426, 424, 432, 429, 408, 409, 421, 390, 416, 428, 392, 391, 410, 414, 411, 417, 397, 406, 412, 427, 404, 415, 423, 422, 418, 420, 425, 393, 405, 378, 357, 358, 379, 434, 368, 361, 360, 381, 365, 373, 372, 367, 382, 376, 369, 366, 403, 374, 385, 371, 370, 359, 363, 375, 380, 362, 377, 431, 430, 364, 383, 384, 482, 280: 483},
		{124, 3: 124, 460, 473, 10: 456, 459, 13: 471, 15: 469, 472, 458, 457, 464, 463, 461, 465, 466, 462, 467, 470, 28: 468},
		// 170
		{484, 3: 485},
		{125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 13: 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125},
		{4: 399, 401, 12: 402, 42: 345, 435, 389, 386, 413, 395, 388, 433, 387, 394, 396, 398, 407, 419, 426, 424, 432, 429, 408, 409, 421, 390, 416, 428, 392, 391, 410, 414, 411, 417, 397, 406, 412, 427, 404, 415, 423, 422, 418, 420, 425, 393, 405, 378, 357, 358, 379, 434, 368, 361, 360, 381, 365, 373, 372, 367, 382, 376, 369, 366, 403, 374, 385, 371, 370, 359, 363, 375, 380, 362, 377, 431, 430, 364, 383, 384, 486},
		{123, 3: 123, 460, 473, 10: 456, 459, 13: 471, 15: 469, 472, 458, 457, 464, 463, 461, 465, 466, 462, 467, 470, 28: 468},
		{127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 13: 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127},
		// 175
		{151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 13: 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151},
		{222: 490},
		{150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 13: 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150},
		{197, 197, 197, 197, 460, 473, 197, 197, 197, 197, 456, 459, 13: 471, 197, 469, 472, 458, 457, 464, 463, 461, 465, 466, 462, 197, 197, 197, 468, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197},
		{199, 199, 199, 199, 460, 473, 199, 199, 199, 199, 456, 459, 13: 471, 199, 199, 472, 458, 457, 464, 463, 461, 465, 466, 462, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199},
		// 180
		{200, 200, 200, 200, 460, 473, 200, 200, 200, 200, 456, 459, 13: 471, 200, 469, 472, 458, 457, 464, 463, 461, 465, 466, 462, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200},
		{201, 201, 201, 201, 460, 473, 201, 201, 201, 201, 456, 459, 13: 471, 201, 469, 472, 458, 457, 464, 463, 461, 465, 466, 462, 201, 201, 201, 468, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201},
		{202, 202, 202, 202, 460, 473, 202, 202, 202, 202, 456, 459, 13: 202, 202, 202, 202, 458, 457, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202},
		{203, 203, 203, 203, 460, 473, 203, 203, 203, 203, 456, 459, 13: 203, 203, 203, 203, 458, 457, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203},
		{204, 204, 204, 204, 460, 473, 204, 204, 204, 204, 456, 459, 13: 204, 204, 204, 204, 458, 457, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204},
		// 185
		{205, 205, 205, 205, 460, 473, 205, 205, 205, 205, 456, 459, 13: 205, 205, 205, 205, 458, 457, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205},
		{206, 206, 206, 206, 460, 473, 206, 206, 206, 206, 456, 459, 13: 206, 206, 206, 206, 458, 457, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206},
		{207, 207, 207, 207, 460, 473, 207, 207, 207, 207, 456, 459, 13: 207, 207, 207, 207, 458, 457, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207},
		{208, 208, 208, 208, 208, 473, 208, 208, 208, 208, 456, 208, 13: 208, 208, 208, 208, 458, 457, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208},
		{209, 209, 209, 209, 209, 473, 209, 209, 209, 209, 456, 209, 13: 209, 209, 209, 209, 458, 457, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209},
		// 190
		{210, 210, 210, 210, 210, 473, 210, 210, 210, 210, 210, 210, 13: 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210},
		{211, 211, 211, 211, 211, 473, 211, 211, 211, 211, 211, 211, 13: 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211},
		{212, 212, 212, 212, 212, 473, 212, 212, 212, 212, 212, 212, 13: 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212},
		{38, 38, 38, 6: 38, 38, 38, 14: 38, 119: 356, 143: 540},
		{218: 510, 509, 263: 508},
		// 195
		{104, 104, 104, 538, 6: 104, 104, 104, 14: 104, 119: 104},
		{103, 103, 103, 103, 6: 103, 103, 103, 14: 103, 119: 103},
		{12: 513, 123: 352, 154: 350, 349, 165: 512, 169: 348, 351, 256: 511},
		{99, 99, 99, 99, 6: 99, 99, 99, 14: 99, 119: 99, 534, 254: 535, 533},
		{96, 96, 96, 96, 6: 96, 96, 96, 14: 96, 119: 96, 96},
		// 200
		{66, 12: 353, 66, 42: 345, 518, 123: 352, 128: 66, 142: 517, 154: 350, 349, 165: 515, 169: 348, 351, 516, 265: 514},
		{530, 3: 531},
		{94, 3: 94},
		{529},
		{63, 13: 523, 126: 63, 63, 522, 175: 520, 178: 521, 260: 519},
		// 205
		{65, 65, 65, 65, 9: 65, 13: 65, 46: 65, 126: 65, 65, 65, 133: 65, 156: 65},
		{67, 126: 67, 67},
		{42: 345, 526, 146: 525, 214: 524},
		{62, 126: 62, 62},
		{42: 61},
		// 210
		{42: 60},
		{64, 10: 64, 64, 121: 64, 64, 124: 64, 64, 64, 64, 140: 527},
		{59, 10: 59, 59, 121: 59, 59, 124: 59, 59, 59, 59, 140: 59},
		{5, 5, 5, 10: 5, 5, 5, 121: 5, 5, 124: 5, 5, 5, 5, 140: 5},
		{42: 345, 526, 146: 528},
		// 215
		{58, 10: 58, 58, 121: 58, 58, 124: 58, 58, 58, 58, 140: 58},
		{76, 76, 76, 76, 76, 6: 76, 76, 76, 12: 76, 14: 76, 27: 76, 29: 76, 76, 76, 76, 76, 119: 76, 76, 130: 76, 76, 76, 134: 76, 149: 76, 76},
		{95, 95, 95, 95, 6: 95, 95, 95, 14: 95, 119: 95, 95},
		{12: 353, 123: 352, 154: 350, 349, 165: 532, 169: 348, 351},
		{93, 3: 93},
		// 220
		{97, 97, 97, 97, 6: 97, 97, 97, 14: 97, 119: 97, 272: 537},
		{42: 345, 344, 145: 536},
		{98, 98, 98, 98, 6: 98, 98, 98, 14: 98, 119: 98},
		{100, 100, 100, 100, 6: 100, 100, 100, 14: 100, 119: 100},
		{101, 101, 101, 101, 6: 101, 101, 101, 14: 101, 119: 101},
		// 225
		{218: 510, 539},
		{102, 102, 102, 102, 6: 102, 102, 102, 14: 102, 119: 102},
		{36, 36, 36, 6: 36, 36, 36, 14: 542, 158: 541},
		{28, 28, 28, 6: 28, 28, 553, 159: 552},
		{187: 543},
		// 230
		{4: 399, 401, 12: 402, 42: 345, 435, 389, 386, 413, 395, 388, 433, 387, 394, 396, 398, 407, 419, 426, 424, 432, 429, 408, 409, 421, 390, 416, 428, 392, 391, 410, 414, 411, 417, 397, 406, 412, 427, 404, 415, 423, 422, 418, 420, 425, 393, 405, 378, 357, 358, 379, 434, 368, 361, 360, 381, 365, 373, 372, 367, 382, 376, 369, 366, 403, 374, 385, 371, 370, 359, 363, 375, 380, 362, 377, 431, 430, 364, 383, 384, 445, 144: 546, 173: 545, 188: 544},
		{35, 35, 35, 550, 6: 35, 35, 35},
		{34, 34, 34, 34, 6: 34, 34, 34},
		{32, 32, 32, 32, 6: 32, 32, 32, 36: 548, 549, 264: 547},
		{31, 31, 31, 31, 6: 31, 31, 31},
		// 235
		{30, 30, 30, 30, 6: 30, 30, 30},
		{29, 29, 29, 29, 6: 29, 29, 29},
		{4: 399, 401, 12: 402, 42: 345, 435, 389, 386, 413, 395, 388, 433, 387, 394, 396, 398, 407, 419, 426, 424, 432, 429, 408, 409, 421, 390, 416, 428, 392, 391, 410, 414, 411, 417, 397, 406, 412, 427, 404, 415, 423, 422, 418, 420, 425, 393, 405, 378, 357, 358, 379, 434, 368, 361, 360, 381, 365, 373, 372, 367, 382, 376, 369, 366, 403, 374, 385, 371, 370, 359, 363, 375, 380, 362, 377, 431, 430, 364, 383, 384, 445, 144: 546, 173: 551},
		{33, 33, 33, 33, 6: 33, 33, 33},
		{26, 26, 26, 6: 26, 556, 164: 555},
		// 240
		{4: 399, 401, 12: 402, 42: 345, 435, 389, 386, 413, 395, 388, 433, 387, 394, 396, 398, 407, 419, 426, 424, 432, 429, 408, 409, 421, 390, 416, 428, 392, 391, 410, 414, 411, 417, 397, 406, 412, 427, 404, 415, 423, 422, 418, 420, 425, 393, 405, 378, 357, 358, 379, 434, 368, 361, 360, 381, 365, 373, 372, 367, 382, 376, 369, 366, 403, 374, 385, 371, 370, 359, 363, 375, 380, 362, 377, 431, 430, 364, 383, 384, 554},
		{27, 27, 27, 4: 460, 473, 27, 27, 10: 456, 459, 13: 471, 15: 469, 472, 458, 457, 464, 463, 461, 465, 466, 462, 467, 470, 28: 468},
		{24, 24, 24, 6: 560, 162: 559},
		{187: 557},
		{4: 399, 401, 12: 402, 42: 345, 435, 389, 386, 413, 395, 388, 433, 387, 394, 396, 398, 407, 419, 426, 424, 432, 429, 408, 409, 421, 390, 416, 428, 392, 391, 410, 414, 411, 417, 397, 406, 412, 427, 404, 415, 423, 422, 418, 420, 425, 393, 405, 378, 357, 358, 379, 434, 368, 361, 360, 381, 365, 373, 372, 367, 382, 376, 369, 366, 403, 374, 385, 371, 370, 359, 363, 375, 380, 362, 377, 431, 430, 364, 383, 384, 445, 144: 546, 173: 545, 188: 558},
		// 245
		{25, 25, 25, 550, 6: 25},
		{118, 118, 118},
		{44: 564, 121: 563, 179: 562, 561},
		{23, 23, 23, 565, 163: 566},
		{20, 20, 20, 20, 163: 20},
		// 250
		{19, 19, 19, 19, 163: 19},
		{18, 18, 18, 18, 163: 18},
		{44: 564, 121: 563, 179: 562, 568},
		{44: 564, 121: 563, 179: 562, 567},
		{21, 21, 21},
		// 255
		{22, 22, 22},
		{121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 13: 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121},
		{4: 460, 473, 10: 456, 459, 13: 471, 15: 469, 472, 458, 457, 464, 463, 461, 465, 466, 462, 467, 470, 28: 468, 35: 573, 172: 572, 235: 582},
		{34: 129, 573, 38: 579, 172: 578, 199: 577},
		{34: 132, 132, 38: 132},
		// 260
		{4: 399, 401, 12: 402, 42: 345, 435, 389, 386, 413, 395, 388, 433, 387, 394, 396, 398, 407, 419, 426, 424, 432, 429, 408, 409, 421, 390, 416, 428, 392, 391, 410, 414, 411, 417, 397, 406, 412, 427, 404, 415, 423, 422, 418, 420, 425, 393, 405, 378, 357, 358, 379, 434, 368, 361, 360, 381, 365, 373, 372, 367, 382, 376, 369, 366, 403, 374, 385, 371, 370, 359, 363, 375, 380, 362, 377, 431, 430, 364, 383, 384, 574},
		{4: 460, 473, 10: 456, 459, 13: 471, 15: 469, 472, 458, 457, 464, 463, 461, 465, 466, 462, 467, 470, 28: 468, 41: 575},
		{4: 399, 401, 12: 402, 42: 345, 435, 389, 386, 413, 395, 388, 433, 387, 394, 396, 398, 407, 419, 426, 424, 432, 429, 408, 409, 421, 390, 416, 428, 392, 391, 410, 414, 411, 417, 397, 406, 412, 427, 404, 415, 423, 422, 418, 420, 425, 393, 405, 378, 357, 358, 379, 434, 368, 361, 360, 381, 365, 373, 372, 367, 382, 376, 369, 366, 403, 374, 385, 371, 370, 359, 363, 375, 380, 362, 377, 431, 430, 364, 383, 384, 576},
		{4: 460, 473, 10: 456, 459, 13: 471, 15: 469, 472, 458, 457, 464, 463, 461, 465, 466, 462, 467, 470, 28: 468, 34: 130, 130, 38: 130},
		{34: 581},
		// 265
		{34: 131, 131, 38: 131},
		{4: 399, 401, 12: 402, 42: 345, 435, 389, 386, 413, 395, 388, 433, 387, 394, 396, 398, 407, 419, 426, 424, 432, 429, 408, 409, 421, 390, 416, 428, 392, 391, 410, 414, 411, 417, 397, 406, 412, 427, 404, 415, 423, 422, 418, 420, 425, 393, 405, 378, 357, 358, 379, 434, 368, 361, 360, 381, 365, 373, 372, 367, 382, 376, 369, 366, 403, 374, 385, 371, 370, 359, 363, 375, 380, 362, 377, 431, 430, 364, 383, 384, 580},
		{4: 460, 473, 10: 456, 459, 13: 471, 15: 469, 472, 458, 457, 464, 463, 461, 465, 466, 462, 467, 470, 28: 468, 34: 128},
		{133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 13: 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133},
		{34: 129, 573, 38: 579, 172: 578, 199: 583},
		// 270
		{34: 584},
		{134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 13: 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134},
		{4: 399, 401, 12: 402, 42: 345, 435, 389, 386, 413, 395, 388, 433, 387, 394, 396, 398, 407, 419, 426, 424, 432, 429, 408, 409, 421, 390, 416, 428, 392, 391, 410, 414, 411, 417, 397, 406, 412, 427, 404, 415, 423, 422, 418, 420, 425, 393, 405, 378, 357, 358, 379, 434, 368, 361, 360, 381, 365, 373, 372, 367, 382, 376, 369, 366, 403, 374, 385, 371, 370, 359, 363, 375, 380, 362, 377, 431, 430, 364, 383, 384, 586},
		{4: 460, 473, 10: 456, 459, 13: 471, 15: 469, 472, 458, 457, 464, 463, 461, 465, 466, 462, 467, 470, 28: 468, 39: 587},
		{47: 597, 51: 596, 598, 241: 590, 244: 588, 246: 595, 251: 594, 258: 591, 592, 262: 593, 276: 589},
		// 275
		{605},
		{148},
		{147},
		{146},
		{145},
		// 280
		{144},
		{143},
		{142},
		{141},
		{140, 236: 602},
		// 285
		{138, 236: 599},
		{47: 600},
		{238: 601},
		{137},
		{47: 603},
		// 290
		{238: 604},
		{139},
		{149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 13: 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149},
		{194: 610, 206: 611, 220: 612, 609, 226: 613, 237: 608, 248: 607, 277: 614, 615},
		{9: 616},
		// 295
		{9: 159},
		{9: 158},
		{9: 157},
		{9: 156},
		{9: 155},
		// 300
		{9: 154},
		{9: 153},
		{9: 152},
		{4: 399, 401, 12: 402, 42: 345, 435, 389, 386, 413, 395, 388, 433, 387, 394, 396, 398, 407, 419, 426, 424, 432, 429, 408, 409, 421, 390, 416, 428, 392, 391, 410, 414, 411, 417, 397, 406, 412, 427, 404, 415, 423, 422, 418, 420, 425, 393, 405, 378, 357, 358, 379, 434, 368, 361, 360, 381, 365, 373, 372, 367, 382, 376, 369, 366, 403, 374, 385, 371, 370, 359, 363, 375, 380, 362, 377, 431, 430, 364, 383, 384, 617},
		{618, 4: 460, 473, 10: 456, 459, 13: 471, 15: 469, 472, 458, 457, 464, 463, 461, 465, 466, 462, 467, 470, 28: 468},
		// 305
		{160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 13: 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160},
		{4: 164, 164, 12: 164, 42: 164, 44: 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 136: 442, 620},
		{4: 399, 401, 12: 402, 42: 345, 435, 389, 386, 413, 395, 388, 433, 387, 394, 396, 398, 407, 419, 426, 424, 432, 429, 408, 409, 421, 390, 416, 428, 392, 391, 410, 414, 411, 417, 397, 406, 412, 427, 404, 415, 423, 422, 418, 420, 425, 393, 405, 378, 357, 358, 379, 434, 368, 361, 360, 381, 365, 373, 372, 367, 382, 376, 369, 366, 403, 374, 385, 371, 370, 359, 363, 375, 380, 362, 377, 431, 430, 364, 383, 384, 621},
		{162, 3: 623, 460, 473, 10: 456, 459, 13: 471, 15: 469, 472, 458, 457, 464, 463, 461, 465, 466, 462, 467, 470, 28: 468, 261: 622},
		{625},
		// 310
		{45: 386, 48: 388, 50: 387, 88: 624},
		{161},
		{165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 13: 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165},
		{4: 164, 164, 12: 164, 42: 164, 44: 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 136: 442, 627},
		{4: 399, 401, 12: 402, 42: 345, 435, 389, 386, 413, 395, 388, 433, 387, 394, 396, 398, 407, 419, 426, 424, 432, 429, 408, 409, 421, 390, 416, 428, 392, 391, 410, 414, 411, 417, 397, 406, 412, 427, 404, 415, 423, 422, 418, 420, 425, 393, 405, 378, 357, 358, 379, 434, 368, 361, 360, 381, 365, 373, 372, 367, 382, 376, 369, 366, 403, 374, 385, 371, 370, 359, 363, 375, 380, 362, 377, 431, 430, 364, 383, 384, 628},
		// 315
		{629, 4: 460, 473, 10: 456, 459, 13: 471, 15: 469, 472, 458, 457, 464, 463, 461, 465, 466, 462, 467, 470, 28: 468},
		{166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 13: 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166},
		{4: 164, 164, 12: 164, 42: 164, 44: 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 136: 442, 631},
		{4: 399, 401, 12: 402, 42: 345, 435, 389, 386, 413, 395, 388, 433, 387, 394, 396, 398, 407, 419, 426, 424, 432, 429, 408, 409, 421, 390, 416, 428, 392, 391, 410, 414, 411, 417, 397, 406, 412, 427, 404, 415, 423, 422, 418, 420, 425, 393, 405, 378, 357, 358, 379, 434, 368, 361, 360, 381, 365, 373, 372, 367, 382, 376, 369, 366, 403, 374, 385, 371, 370, 359, 363, 375, 380, 362, 377, 431, 430, 364, 383, 384, 632},
		{633, 4: 460, 473, 10: 456, 459, 13: 471, 15: 469, 472, 458, 457, 464, 463, 461, 465, 466, 462, 467, 470, 28: 468},
		// 320
		{167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 13: 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167},
		{4: 164, 164, 12: 164, 42: 164, 44: 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 136: 442, 635},
		{4: 399, 401, 12: 402, 42: 345, 435, 389, 386, 413, 395, 388, 433, 387, 394, 396, 398, 407, 419, 426, 424, 432, 429, 408, 409, 421, 390, 416, 428, 392, 391, 410, 414, 411, 417, 397, 406, 412, 427, 404, 415, 423, 422, 418, 420, 425, 393, 405, 378, 357, 358, 379, 434, 368, 361, 360, 381, 365, 373, 372, 367, 382, 376, 369, 366, 403, 374, 385, 371, 370, 359, 363, 375, 380, 362, 377, 431, 430, 364, 383, 384, 636},
		{637, 4: 460, 473, 10: 456, 459, 13: 471, 15: 469, 472, 458, 457, 464, 463, 461, 465, 466, 462, 467, 470, 28: 468},
		{168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 13: 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168},
		// 325
		{4: 164, 164, 12: 164, 42: 164, 44: 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 136: 442, 639},
		{4: 399, 401, 12: 402, 42: 345, 435, 389, 386, 413, 395, 388, 433, 387, 394, 396, 398, 407, 419, 426, 424, 432, 429, 408, 409, 421, 390, 416, 428, 392, 391, 410, 414, 411, 417, 397, 406, 412, 427, 404, 415, 423, 422, 418, 420, 425, 393, 405, 378, 357, 358, 379, 434, 368, 361, 360, 381, 365, 373, 372, 367, 382, 376, 369, 366, 403, 374, 385, 371, 370, 359, 363, 375, 380, 362, 377, 431, 430, 364, 383, 384, 640},
		{641, 4: 460, 473, 10: 456, 459, 13: 471, 15: 469, 472, 458, 457, 464, 463, 461, 465, 466, 462, 467, 470, 28: 468},
		{169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 13: 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169},
		{4: 164, 164, 12: 164, 42: 164, 44: 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 136: 442, 643},
		// 330
		{4: 399, 401, 12: 402, 42: 345, 435, 389, 386, 413, 395, 388, 433, 387, 394, 396, 398, 407, 419, 426, 424, 432, 429, 408, 409, 421, 390, 416, 428, 392, 391, 410, 414, 411, 417, 397, 406, 412, 427, 404, 415, 423, 422, 418, 420, 425, 393, 405, 378, 357, 358, 379, 434, 368, 361, 360, 381, 365, 373, 372, 367, 382, 376, 369, 366, 403, 374, 385, 371, 370, 359, 363, 375, 380, 362, 377, 431, 430, 364, 383, 384, 644},
		{645, 4: 460, 473, 10: 456, 459, 13: 471, 15: 469, 472, 458, 457, 464, 463, 461, 465, 466, 462, 467, 470, 28: 468},
		{170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 13: 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170},
		{4: 164, 164, 10: 647, 12: 164, 42: 164, 44: 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 136: 442, 648},
		{651},
		// 335
		{4: 399, 401, 12: 402, 42: 345, 435, 389, 386, 413, 395, 388, 433, 387, 394, 396, 398, 407, 419, 426, 424, 432, 429, 408, 409, 421, 390, 416, 428, 392, 391, 410, 414, 411, 417, 397, 406, 412, 427, 404, 415, 423, 422, 418, 420, 425, 393, 405, 378, 357, 358, 379, 434, 368, 361, 360, 381, 365, 373, 372, 367, 382, 376, 369, 366, 403, 374, 385, 371, 370, 359, 363, 375, 380, 362, 377, 431, 430, 364, 383, 384, 649},
		{650, 4: 460, 473, 10: 456, 459, 13: 471, 15: 469, 472, 458, 457, 464, 463, 461, 465, 466, 462, 467, 470, 28: 468},
		{171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 13: 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171},
		{172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 13: 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172},
		{4: 399, 401, 12: 402, 42: 345, 435, 389, 386, 413, 395, 388, 433, 387, 394, 396, 398, 407, 419, 426, 424, 432, 429, 408, 409, 421, 390, 416, 428, 392, 391, 410, 414, 411, 417, 397, 406, 412, 427, 404, 415, 423, 422, 418, 420, 425, 393, 405, 378, 357, 358, 379, 434, 368, 361, 360, 381, 365, 373, 372, 367, 382, 376, 369, 366, 403, 374, 385, 371, 370, 359, 363, 375, 380, 362, 377, 431, 430, 364, 383, 384, 653},
		// 340
		{4: 460, 473, 9: 654, 456, 459, 13: 471, 15: 469, 472, 458, 457, 464, 463, 461, 465, 466, 462, 467, 470, 28: 468},
		{4: 399, 401, 12: 402, 42: 345, 435, 389, 386, 413, 395, 388, 433, 387, 394, 396, 398, 407, 419, 426, 424, 432, 429, 408, 409, 421, 390, 416, 428, 392, 391, 410, 414, 411, 417, 397, 406, 412, 427, 404, 415, 423, 422, 418, 420, 425, 393, 405, 378, 357, 358, 379, 434, 368, 361, 360, 381, 365, 373, 372, 367, 382, 376, 369, 366, 403, 374, 385, 371, 370, 359, 363, 375, 380, 362, 377, 431, 430, 364, 383, 384, 655, 274: 656},
		{175, 4: 460, 473, 10: 456, 459, 13: 471, 15: 469, 472, 458, 457, 464, 463, 461, 465, 466, 462, 467, 470, 28: 468, 40: 175},
		{174, 40: 658, 252: 657},
		{660},
		// 345
		{4: 399, 401, 12: 402, 42: 345, 435, 389, 386, 413, 395, 388, 433, 387, 394, 396, 398, 407, 419, 426, 424, 432, 429, 408, 409, 421, 390, 416, 428, 392, 391, 410, 414, 411, 417, 397, 406, 412, 427, 404, 415, 423, 422, 418, 420, 425, 393, 405, 378, 357, 358, 379, 434, 368, 361, 360, 381, 365, 373, 372, 367, 382, 376, 369, 366, 403, 374, 385, 371, 370, 359, 363, 375, 380, 362, 377, 431, 430, 364, 383, 384, 659},
		{173, 4: 460, 473, 10: 456, 459, 13: 471, 15: 469, 472, 458, 457, 464, 463, 461, 465, 466, 462, 467, 470, 28: 468},
		{176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 13: 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176},
		{4: 399, 401, 12: 402, 42: 345, 435, 389, 386, 413, 395, 388, 433, 387, 394, 396, 398, 407, 419, 426, 424, 432, 429, 408, 409, 421, 390, 416, 428, 392, 391, 410, 414, 411, 417, 397, 406, 412, 427, 404, 415, 423, 422, 418, 420, 425, 393, 405, 378, 357, 358, 379, 434, 368, 361, 360, 381, 365, 373, 372, 367, 382, 376, 369, 366, 403, 374, 385, 371, 370, 359, 363, 375, 380, 362, 377, 431, 430, 364, 383, 384, 662, 240: 663},
		{178, 3: 178, 460, 473, 10: 456, 459, 13: 471, 15: 469, 472, 458, 457, 464, 463, 461, 465, 466, 462, 467, 470, 28: 468},
		// 350
		{664, 3: 665},
		{195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 13: 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195},
		{4: 399, 401, 12: 402, 42: 345, 435, 389, 386, 413, 395, 388, 433, 387, 394, 396, 398, 407, 419, 426, 424, 432, 429, 408, 409, 421, 390, 416, 428, 392, 391, 410, 414, 411, 417, 397, 406, 412, 427, 404, 415, 423, 422, 418, 420, 425, 393, 405, 378, 357, 358, 379, 434, 368, 361, 360, 381, 365, 373, 372, 367, 382, 376, 369, 366, 403, 374, 385, 371, 370, 359, 363, 375, 380, 362, 377, 431, 430, 364, 383, 384, 666},
		{177, 3: 177, 460, 473, 10: 456, 459, 13: 471, 15: 469, 472, 458, 457, 464, 463, 461, 465, 466, 462, 467, 470, 28: 468},
		{668, 4: 460, 473, 10: 456, 459, 13: 471, 15: 469, 472, 458, 457, 464, 463, 461, 465, 466, 462, 467, 470, 28: 468},
		// 355
		{196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 13: 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196},
		{198, 198, 198, 198, 198, 473, 198, 198, 198, 198, 198, 198, 13: 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198},
		{213, 213, 213, 213, 213, 473, 213, 213, 213, 213, 213, 213, 13: 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213},
		{194: 675, 206: 676, 220: 677, 674, 226: 678, 237: 673, 245: 672},
		{221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 13: 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221},
		// 360
		{220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 13: 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220},
		{219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 13: 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219},
		{218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 13: 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218},
		{217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 13: 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217},
		{216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 13: 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216},
		// 365
		{215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 13: 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215},
		{222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 13: 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222},
		{223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 13: 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223},
		{224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 13: 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224},
		{42: 345, 684, 182: 683},
		// 370
		{262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 13: 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 152: 262},
		{7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 13: 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 152: 7},
		{174: 687, 183: 686},
		{12: 353, 123: 689, 138: 730},
		{12: 353, 123: 689, 138: 688},
		// 375
		{85, 85, 85, 85, 6: 85, 85, 85, 14: 85, 27: 85, 29: 85, 85, 85, 85, 119: 85, 85},
		{4: 695, 12: 697, 130: 693, 691, 694, 134: 692, 176: 696, 270: 690},
		{12: 353, 123: 729},
		{13: 66, 42: 345, 518, 126: 66, 66, 66, 142: 517, 171: 726},
		{72, 10: 72, 72, 72, 33: 72, 119: 72, 121: 72, 124: 72},
		// 380
		{13: 66, 42: 345, 518, 126: 66, 128: 66, 142: 517, 171: 724},
		{70, 10: 70, 70, 70, 33: 70, 119: 70, 121: 70, 124: 70},
		{68, 10: 68, 68, 68, 33: 68, 119: 68, 121: 68, 124: 68},
		{10: 709, 710, 45, 121: 711, 124: 712, 166: 713, 723},
		{4: 75, 12: 353, 123: 698, 130: 75, 75, 75, 134: 75, 233: 699},
		// 385
		{74, 4: 74, 33: 74, 119: 74, 130: 74, 74, 74, 134: 74},
		{4: 695, 130: 693, 691, 694, 134: 692, 176: 700},
		{75, 12: 353, 33: 75, 119: 75, 123: 698, 233: 701},
		{38, 33: 38, 119: 356, 143: 702},
		{54, 33: 704, 242: 705, 703},
		// 390
		{707},
		{4: 399, 401, 12: 402, 42: 345, 435, 389, 386, 413, 395, 388, 433, 387, 394, 396, 398, 407, 419, 426, 424, 432, 429, 408, 409, 421, 390, 416, 428, 392, 391, 410, 414, 411, 417, 397, 406, 412, 427, 404, 415, 423, 422, 418, 420, 425, 393, 405, 378, 357, 358, 379, 434, 368, 361, 360, 381, 365, 373, 372, 367, 382, 376, 369, 366, 403, 374, 385, 371, 370, 359, 363, 375, 380, 362, 377, 431, 430, 364, 383, 384, 706},
		{53},
		{55, 4: 460, 473, 10: 456, 459, 13: 471, 15: 469, 472, 458, 457, 464, 463, 461, 465, 466, 462, 467, 470, 28: 468},
		{10: 709, 710, 45, 121: 711, 124: 712, 166: 713, 708},
		// 395
		{12: 56},
		{12: 52, 122: 52, 125: 52},
		{12: 51, 122: 51, 125: 51},
		{12: 50, 122: 50, 125: 50},
		{3: 715, 44: 714},
		// 400
		{12: 44, 122: 44, 125: 44},
		{3: 719, 153: 718},
		{44: 716},
		{153: 717},
		{12: 46, 122: 46, 125: 46},
		// 405
		{12: 49, 122: 49, 125: 49},
		{44: 721, 153: 720},
		{12: 48, 122: 48, 125: 48},
		{153: 722},
		{12: 47, 122: 47, 125: 47},
		// 410
		{12: 57},
		{126: 725},
		{71, 10: 71, 71, 71, 33: 71, 119: 71, 121: 71, 124: 71},
		{126: 728, 727},
		{73, 10: 73, 73, 73, 33: 73, 119: 73, 121: 73, 124: 73},
		// 415
		{69, 10: 69, 69, 69, 33: 69, 119: 69, 121: 69, 124: 69},
		{80, 80, 80, 80, 6: 80, 80, 80, 14: 80, 27: 80, 29: 80, 80, 80, 80, 119: 80, 80},
		{88, 88, 88, 88, 6: 88, 88, 88, 14: 88, 27: 88, 29: 88, 88, 88, 88, 119: 88, 88},
		{12: 353, 123: 689, 138: 735},
		{12: 353, 123: 689, 138: 734},
		// 420
		{84, 84, 84, 84, 6: 84, 84, 84, 14: 84, 27: 84, 29: 84, 84, 84, 84, 119: 84, 84},
		{86, 86, 86, 86, 6: 86, 86, 86, 14: 86, 27: 86, 29: 86, 86, 86, 86, 119: 86, 86},
		{89, 89, 89, 89, 6: 89, 89, 89, 14: 89, 27: 89, 29: 89, 89, 89, 89, 119: 89, 89},
		{91, 91, 91, 91, 6: 91, 91, 91, 14: 91, 27: 91, 29: 91, 91, 91, 91, 119: 91, 91},
		{12: 353, 123: 689, 138: 740},
		// 425
		{12: 353, 123: 689, 138: 739},
		{87, 87, 87, 87, 6: 87, 87, 87, 14: 87, 27: 87, 29: 87, 87, 87, 87, 119: 87, 87},
		{90, 90, 90, 90, 6: 90, 90, 90, 14: 90, 27: 90, 29: 90, 90, 90, 90, 119: 90, 90},
		{12: 353, 123: 753},
		{12: 353, 123: 752},
		// 430
		{13: 523, 128: 522, 175: 520, 178: 748},
		{13: 523, 128: 522, 175: 520, 178: 745},
		{10: 709, 710, 121: 711, 45, 124: 712, 166: 713, 746},
		{122: 747},
		{12: 78},
		// 435
		{10: 709, 710, 121: 711, 45, 124: 712, 45, 166: 713, 749},
		{122: 751, 125: 750},
		{12: 79},
		{12: 77},
		{81, 81, 81, 81, 81, 6: 81, 81, 81, 14: 81, 27: 81, 29: 81, 81, 81, 81, 119: 81, 81, 130: 81, 81, 81, 134: 81, 149: 81, 81},
		// 440
		{82, 82, 82, 82, 82, 6: 82, 82, 82, 14: 82, 27: 82, 29: 82, 82, 82, 82, 119: 82, 82, 130: 82, 82, 82, 134: 82, 149: 82, 82},
		{27: 40, 29: 40, 40, 40, 40},
		{129: 762, 135: 761, 177: 760, 204: 759},
		{129: 279, 135: 279},
		{42: 345, 344, 145: 758},
		// 445
		{129: 278, 135: 278},
		{1: 282, 282, 791},
		{1: 277, 277, 277, 9: 277},
		{1: 66, 66, 66, 9: 66, 42: 345, 518, 46: 66, 133: 66, 142: 789},
		{42: 345, 518, 142: 763, 156: 66},
		// 450
		{156: 764},
		{42: 345, 766, 234: 765},
		{15: 767},
		{1: 273, 273, 273, 9: 273, 15: 273, 46: 273, 133: 273},
		{42: 345, 766, 234: 768},
		// 455
		{1: 271, 271, 271, 9: 271, 46: 772, 133: 271, 215: 769, 771, 770},
		{1: 274, 274, 274, 9: 274},
		{1: 268, 268, 268, 9: 268, 133: 778, 267: 777, 776},
		{1: 270, 270, 270, 9: 270, 133: 270},
		{12: 773},
		// 460
		{42: 345, 526, 146: 525, 214: 774},
		{775, 140: 527},
		{1: 269, 269, 269, 9: 269, 133: 269},
		{1: 272, 272, 272, 9: 272},
		{1: 267, 267, 267, 9: 267},
		// 465
		{12: 779},
		{42: 345, 435, 85: 378, 783, 782, 181: 781, 223: 780},
		{786, 3: 787},
		{265, 3: 265},
		{152: 784},
		// 470
		{139: 682},
		{4: 399, 401, 12: 402, 42: 345, 435, 389, 386, 413, 395, 388, 433, 387, 394, 396, 398, 407, 419, 426, 424, 432, 429, 408, 409, 421, 390, 416, 428, 392, 391, 410, 414, 411, 417, 397, 406, 412, 427, 404, 415, 423, 422, 418, 420, 425, 393, 405, 378, 357, 358, 379, 434, 368, 361, 360, 381, 365, 373, 372, 367, 382, 376, 369, 366, 403, 374, 385, 371, 370, 359, 363, 375, 380, 362, 377, 431, 430, 364, 383, 384, 785},
		{263, 3: 263, 460, 473, 10: 456, 459, 13: 471, 15: 469, 472, 458, 457, 464, 463, 461, 465, 466, 462, 467, 470, 28: 468},
		{1: 266, 266, 266, 9: 266},
		{42: 345, 435, 85: 378, 783, 782, 181: 788},
		// 475
		{264, 3: 264},
		{1: 271, 271, 271, 9: 271, 46: 772, 133: 271, 215: 790, 771, 770},
		{1: 275, 275, 275, 9: 275},
		{129: 762, 135: 761, 177: 792},
		{1: 276, 276, 276, 9: 276},
		// 480
		{1: 283, 283},
		{42: 12, 160: 797, 207: 802},
		{42: 12, 160: 797, 207: 796},
		{42: 345, 799},
		{49: 798},
		// 485
		{42: 11},
		{120: 800},
		{42: 345, 526, 146: 801},
		{1: 284, 284},
		{42: 345, 344, 145: 803},
		// 490
		{1: 285, 285},
		{42: 345, 435, 85: 378, 831, 281: 830},
		{129: 280, 135: 280, 210: 757, 756, 822},
		{42: 345, 435, 85: 378, 809, 205: 808, 253: 807},
		{3: 815, 9: 507, 157: 814},
		// 495
		{3: 16, 9: 16},
		{168: 810},
		{12: 811},
		{42: 345, 435, 85: 378, 783, 782, 181: 781, 223: 812},
		{813, 3: 787},
		// 500
		{3: 14, 9: 14},
		{1: 38, 38, 6: 38, 38, 38, 14: 38, 119: 356, 143: 817},
		{42: 345, 435, 85: 378, 809, 205: 816},
		{3: 15, 9: 15},
		{1: 36, 36, 6: 36, 36, 36, 14: 542, 158: 818},
		// 505
		{1: 28, 28, 6: 28, 28, 553, 159: 819},
		{1: 26, 26, 6: 26, 556, 164: 820},
		{1: 24, 24, 6: 560, 162: 821},
		{1: 17, 17},
		{129: 762, 135: 761, 177: 760, 204: 823},
		// 510
		{3: 791, 9: 507, 157: 824},
		{1: 38, 38, 6: 38, 38, 38, 14: 38, 119: 356, 143: 825},
		{1: 36, 36, 6: 36, 36, 36, 14: 542, 158: 826},
		{1: 28, 28, 6: 28, 28, 553, 159: 827},
		{1: 26, 26, 6: 26, 556, 164: 828},
		// 515
		{1: 24, 24, 6: 560, 162: 829},
		{1: 281, 281},
		{3: 833, 9: 507, 157: 832},
		{3: 287, 9: 287},
		{1: 38, 38, 6: 38, 38, 38, 14: 38, 119: 356, 143: 835},
		// 520
		{42: 345, 435, 85: 378, 834},
		{3: 286, 9: 286},
		{1: 36, 36, 6: 36, 36, 36, 14: 542, 158: 836},
		{1: 28, 28, 6: 28, 28, 553, 159: 837},
		{1: 26, 26, 6: 26, 556, 164: 838},
		// 525
		{1: 24, 24, 6: 560, 162: 839},
		{1: 288, 288},
		{42: 10, 160: 845, 208: 856},
		{161: 843},
		{161: 289},
		// 530
		{120: 10, 160: 845, 208: 844},
		{120: 848},
		{5: 846},
		{49: 847},
		{42: 9, 120: 9},
		// 535
		{42: 345, 526, 146: 849},
		{12: 850},
		{42: 345, 684, 182: 852, 269: 851},
		{853, 3: 854},
		{2, 3: 2},
		// 540
		{1: 291, 291},
		{42: 345, 684, 182: 855},
		{1, 3: 1},
		{42: 345, 344, 145: 857},
		{1: 292, 292},
		// 545
		{1: 295, 295, 27: 43, 29: 341, 43, 337, 43, 141: 340, 147: 339, 334, 151: 328, 185: 331, 318, 189: 332, 319, 333, 320, 321, 195: 322, 335, 323, 324, 200: 317, 336, 325, 209: 326, 224: 338, 327, 229: 859, 329, 342, 330},
		{1: 310, 310},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Errorf(format string, a ...interface{}) error
	AppendError(err error)
	AppendWarn(err error)
	Errors() (warns []error, errs []error)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEOFCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer, parser *Parser) int {
	const yyError = 294

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	parser.yylval = yySymType{}
	yyS := parser.cache

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
		parser.cache = yyS
	}
	parser.yyVAL = &yyS[yyp+1]
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yychar = yylex1(yylex, &parser.yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		*parser.yyVAL = parser.yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if !ok || msg == "" {
				msg = "syntax error"
			}
			// ignore goyacc error message
			yylex.AppendError(yylex.Errorf(""))
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEOFCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
		parser.cache = yyS
	}
	parser.yyVAL = &yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 2:
		{
			if yyS[yypt-0].statement != nil {
				parser.result = append(parser.result, yyS[yypt-0].statement)
			}
		}
	case 3:
		{
			if yyS[yypt-0].statement != nil {
				parser.result = append(parser.result, yyS[yypt-0].statement)
			}
		}
	case 18:
		{
			parser.yyVAL.statement = nil
		}
	case 19:
		{
			parser.yyVAL.statement = &ast.BeginStmt{}
		}
	case 20:
		{
			parser.yyVAL.statement = &ast.CommitStmt{}
		}
	case 21:
		{
			parser.yyVAL.statement = &ast.CreateGraphStmt{
				IfNotExists: yyS[yypt-1].item.(bool),
				Graph:       yyS[yypt-0].item.(model.CIStr),
			}
		}
	case 22:
		{
			parser.yyVAL.statement = &ast.CreateIndexStmt{
				KeyType:     yyS[yypt-7].item.(ast.IndexKeyType),
				IfNotExists: yyS[yypt-5].item.(bool),
				LabelName:   yyS[yypt-3].item.(model.CIStr),
				Properties:  yyS[yypt-1].item.([]model.CIStr),
			}
		}
	case 23:
		{
			parser.yyVAL.item = ast.IndexKeyTypeNone
		}
	case 24:
		{
			parser.yyVAL.item = ast.IndexKeyTypeUnique
		}
	case 25:
		{
			ds := &ast.DeleteStmt{
				VariableReferences: yyS[yypt-6].item.([]*ast.VariableReference),
				From:               yyS[yypt-5].item.(*ast.MatchClauseList),
			}
			if yyS[yypt-8].item != nil {
				ds.PathPatternMacros = yyS[yypt-8].item.([]*ast.PathPatternMacro)
			}
			if yyS[yypt-4].item != nil {
				ds.Where = yyS[yypt-4].item.(ast.ExprNode)
			}
			if yyS[yypt-3].item != nil {
				ds.GroupBy = yyS[yypt-3].item.(*ast.GroupByClause)
			}
			if yyS[yypt-2].item != nil {
				ds.Having = yyS[yypt-2].item.(*ast.HavingClause)
			}
			if yyS[yypt-1].item != nil {
				ds.OrderBy = yyS[yypt-1].item.(*ast.OrderByClause)
			}
			if yyS[yypt-0].item != nil {
				ds.Limit = yyS[yypt-0].item.(*ast.LimitClause)
			}
			parser.yyVAL.statement = ds
		}
	case 26:
		{
			parser.yyVAL.item = yyS[yypt-0].expr
		}
	case 27:
		{
			parser.yyVAL.item = append(yyS[yypt-2].item.([]*ast.VariableReference), yyS[yypt-0].expr.(*ast.VariableReference))
		}
	case 28:
		{
			parser.yyVAL.statement = &ast.DropGraphStmt{
				IfExists: yyS[yypt-1].item.(bool),
				Graph:    yyS[yypt-0].item.(model.CIStr),
			}
		}
	case 29:
		{
			parser.yyVAL.statement = &ast.DropIndexStmt{
				IfExists:  yyS[yypt-3].item.(bool),
				IndexName: model.NewCIStr(yyS[yypt-2].ident),
				LabelName: yyS[yypt-0].item.(model.CIStr),
			}
		}
	case 30:
		{
			parser.yyVAL.statement = &ast.ExplainStmt{
				Select: yyS[yypt-0].statement.(*ast.SelectStmt),
			}
		}
	case 31:
		{
			is := &ast.InsertStmt{
				Insertions: yyS[yypt-0].item.([]*ast.GraphElementInsertion),
			}
			if yyS[yypt-1].item != nil {
				is.IntoGraphName = yyS[yypt-1].item.(model.CIStr)
			}
			parser.yyVAL.statement = is
		}
	case 32:
		{
			is := &ast.InsertStmt{
				Insertions: yyS[yypt-6].item.([]*ast.GraphElementInsertion),
				From:       yyS[yypt-5].item.(*ast.MatchClauseList),
			}
			if yyS[yypt-9].item != nil {
				is.PathPatternMacros = yyS[yypt-9].item.([]*ast.PathPatternMacro)
			}
			if yyS[yypt-7].item != nil {
				is.IntoGraphName = yyS[yypt-7].item.(model.CIStr)
			}
			if yyS[yypt-4].item != nil {
				is.Where = yyS[yypt-4].item.(ast.ExprNode)
			}
			if yyS[yypt-3].item != nil {
				is.GroupBy = yyS[yypt-3].item.(*ast.GroupByClause)
			}
			if yyS[yypt-2].item != nil {
				is.Having = yyS[yypt-2].item.(*ast.HavingClause)
			}
			if yyS[yypt-1].item != nil {
				is.OrderBy = yyS[yypt-1].item.(*ast.OrderByClause)
			}
			if yyS[yypt-0].item != nil {
				is.Limit = yyS[yypt-0].item.(*ast.LimitClause)
			}
			parser.yyVAL.statement = is
		}
	case 33:
		{
			parser.yyVAL.item = nil
		}
	case 35:
		{
			parser.yyVAL.item = yyS[yypt-0].item
		}
	case 36:
		{
			parser.yyVAL.item = []*ast.GraphElementInsertion{yyS[yypt-0].item.(*ast.GraphElementInsertion)}
		}
	case 37:
		{
			parser.yyVAL.item = append(yyS[yypt-2].item.([]*ast.GraphElementInsertion), yyS[yypt-0].item.(*ast.GraphElementInsertion))
		}
	case 38:
		{
			insertion := &ast.GraphElementInsertion{
				InsertionType:       ast.InsertionTypeVertex,
				LabelsAndProperties: yyS[yypt-0].item.(*ast.LabelsAndProperties),
			}
			if yyS[yypt-1].item != nil {
				insertion.VariableName = yyS[yypt-1].item.(*ast.VariableReference)
			}
			parser.yyVAL.item = insertion
		}
	case 39:
		{
			insertion := &ast.GraphElementInsertion{
				InsertionType:       ast.InsertionTypeEdge,
				From:                yyS[yypt-3].ident,
				To:                  yyS[yypt-1].ident,
				LabelsAndProperties: yyS[yypt-0].item.(*ast.LabelsAndProperties),
			}
			if yyS[yypt-5].item != nil {
				insertion.VariableName = yyS[yypt-5].item.(*ast.VariableReference)
			}
			parser.yyVAL.item = insertion
		}
	case 41:
		{
			lps := &ast.LabelsAndProperties{}
			if yyS[yypt-1].item != nil {
				lps.Labels = yyS[yypt-1].item.([]model.CIStr)
			}
			if yyS[yypt-0].item != nil {
				lps.Assignments = yyS[yypt-0].item.([]*ast.PropertyAssignment)
			}
			parser.yyVAL.item = lps
		}
	case 42:
		{
			parser.yyVAL.item = nil
		}
	case 44:
		{
			parser.yyVAL.item = yyS[yypt-1].item
		}
	case 45:
		{
			parser.yyVAL.item = nil
		}
	case 47:
		{
			parser.yyVAL.item = yyS[yypt-1].item
		}
	case 48:
		{
			parser.yyVAL.item = []*ast.PropertyAssignment{yyS[yypt-0].item.(*ast.PropertyAssignment)}
		}
	case 49:
		{
			parser.yyVAL.item = append(yyS[yypt-2].item.([]*ast.PropertyAssignment), yyS[yypt-0].item.(*ast.PropertyAssignment))
		}
	case 50:
		{
			parser.yyVAL.item = &ast.PropertyAssignment{
				PropertyAccess:  yyS[yypt-2].expr.(*ast.PropertyAccess),
				ValueExpression: yyS[yypt-0].expr.(ast.ExprNode),
			}
		}
	case 51:
		{
			parser.yyVAL.expr = &ast.PropertyAccess{
				VariableName: yyS[yypt-2].expr.(*ast.VariableReference),
				PropertyName: yyS[yypt-0].item.(model.CIStr),
			}
		}
	case 73:
		{
			parser.yyVAL.expr = &ast.VariableReference{
				VariableName: yyS[yypt-0].ident,
			}
		}
	case 81:
		{
			parser.yyVAL.expr = ast.NewValueExpr(yyS[yypt-0].ident)
		}
	case 82:
		{
			parser.yyVAL.expr = ast.NewValueExpr(yyS[yypt-0].item)
		}
	case 83:
		{
			parser.yyVAL.expr = ast.NewValueExpr(yyS[yypt-0].item)
		}
	case 84:
		{
			parser.yyVAL.expr = ast.NewValueExpr(yyS[yypt-0].item)
		}
	case 85:
		{
			parser.yyVAL.expr = ast.NewValueExpr(yyS[yypt-0].item)
		}
	case 86:
		{
			parser.yyVAL.expr = ast.NewValueExpr(yyS[yypt-0].item)
		}
	case 87:
		{
			parser.yyVAL.expr = ast.NewValueExpr(false)
		}
	case 88:
		{
			parser.yyVAL.expr = ast.NewValueExpr(true)
		}
	case 89:
		{
			d, err := types.NewDateLiteral(yyS[yypt-0].ident)
			if err != nil {
				yylex.AppendError(err)
				return 1
			}
			parser.yyVAL.expr = ast.NewValueExpr(d)
		}
	case 90:
		{
			t, err := types.NewTimeLiteral(yyS[yypt-0].ident)
			if err != nil {
				yylex.AppendError(err)
				return 1
			}
			parser.yyVAL.expr = ast.NewValueExpr(t)
		}
	case 91:
		{
			t, err := types.NewTimestampLiteral(yyS[yypt-0].ident)
			if err != nil {
				yylex.AppendError(err)
				return 1
			}
			parser.yyVAL.expr = ast.NewValueExpr(t)
		}
	case 92:
		{
			i := &types.IntervalLiteral{
				Value: yyS[yypt-1].ident,
				Unit:  yyS[yypt-0].item.(types.DateTimeField),
			}
			parser.yyVAL.expr = ast.NewValueExpr(i)
		}
	case 93:
		{
			parser.yyVAL.item = types.DateTimeFieldYear
		}
	case 94:
		{
			parser.yyVAL.item = types.DateTimeFieldMonth
		}
	case 95:
		{
			parser.yyVAL.item = types.DateTimeFieldDay
		}
	case 96:
		{
			parser.yyVAL.item = types.DateTimeFieldHour
		}
	case 97:
		{
			parser.yyVAL.item = types.DateTimeFieldMinute
		}
	case 98:
		{
			parser.yyVAL.item = types.DateTimeFieldSecond
		}
	case 99:
		{
			parser.yyVAL.expr = &ast.BindVariable{}
		}
	case 100:
		{
			parser.yyVAL.expr = &ast.UnaryOperationExpr{Op: opcode.Minus, V: yyS[yypt-0].expr}
		}
	case 101:
		{
			parser.yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.Mul, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 102:
		{
			parser.yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.Div, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 103:
		{
			parser.yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.Mod, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 104:
		{
			parser.yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.Plus, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 105:
		{
			parser.yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.Minus, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 106:
		{
			parser.yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.EQ, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 107:
		{
			parser.yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.NE, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 108:
		{
			parser.yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.GT, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 109:
		{
			parser.yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.LT, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 110:
		{
			parser.yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.GE, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 111:
		{
			parser.yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.LE, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 112:
		{
			parser.yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.LogicOr, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 113:
		{
			parser.yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.LogicXor, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 114:
		{
			parser.yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.LogicAnd, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 115:
		{
			v, ok := yyS[yypt-0].expr.(*ast.ExistsSubqueryExpr)
			if ok {
				v.Not = true
				parser.yyVAL.expr = yyS[yypt-0].expr
			} else {
				parser.yyVAL.expr = &ast.UnaryOperationExpr{Op: opcode.Not, V: yyS[yypt-0].expr}
			}
		}
	case 116:
		{
			parser.yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.Concat, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 117:
		{
			parser.yyVAL.expr = &ast.ParenthesesExpr{Expr: yyS[yypt-1].expr}
		}
	case 118:
		{
			parser.yyVAL.expr = &ast.FuncCallExpr{
				FnName: model.NewCIStr(yyS[yypt-3].ident),
				Args:   yyS[yypt-1].item.([]ast.ExprNode),
			}
		}
	case 135:
		{
			parser.yyVAL.item = []ast.ExprNode{yyS[yypt-0].expr}
		}
	case 136:
		{
			parser.yyVAL.item = append(yyS[yypt-2].item.([]ast.ExprNode), yyS[yypt-0].expr)
		}
	case 137:
		{
			parser.yyVAL.expr = &ast.SubstrFuncExpr{
				Expr:  yyS[yypt-4].expr,
				Start: yyS[yypt-2].expr,
				For:   yyS[yypt-1].expr,
			}
		}
	case 139:
		{
			parser.yyVAL.expr = nil
		}
	case 140:
		{
			parser.yyVAL.expr = yyS[yypt-0].expr
		}
	case 141:
		{
			parser.yyVAL.expr = &ast.AggregateFuncExpr{
				F: yyS[yypt-3].ident,
				Args: []ast.ExprNode{
					ast.NewValueExpr(1),
				},
			}
		}
	case 142:
		{
			parser.yyVAL.expr = &ast.AggregateFuncExpr{
				F:        yyS[yypt-4].ident,
				Args:     []ast.ExprNode{yyS[yypt-1].expr},
				Distinct: yyS[yypt-2].item.(bool),
			}
		}
	case 143:
		{
			parser.yyVAL.expr = &ast.AggregateFuncExpr{
				F:        yyS[yypt-4].ident,
				Args:     []ast.ExprNode{yyS[yypt-1].expr},
				Distinct: yyS[yypt-2].item.(bool),
			}
		}
	case 144:
		{
			parser.yyVAL.expr = &ast.AggregateFuncExpr{
				F:        yyS[yypt-4].ident,
				Args:     []ast.ExprNode{yyS[yypt-1].expr},
				Distinct: yyS[yypt-2].item.(bool),
			}
		}
	case 145:
		{
			parser.yyVAL.expr = &ast.AggregateFuncExpr{
				F:        yyS[yypt-4].ident,
				Args:     []ast.ExprNode{yyS[yypt-1].expr},
				Distinct: yyS[yypt-2].item.(bool),
			}
		}
	case 146:
		{
			parser.yyVAL.expr = &ast.AggregateFuncExpr{
				F:        yyS[yypt-4].ident,
				Args:     []ast.ExprNode{yyS[yypt-1].expr},
				Distinct: yyS[yypt-2].item.(bool),
			}
		}
	case 147:
		{
			parser.yyVAL.expr = &ast.AggregateFuncExpr{
				F:        yyS[yypt-4].ident,
				Args:     []ast.ExprNode{yyS[yypt-1].expr},
				Distinct: yyS[yypt-2].item.(bool),
			}
		}
	case 148:
		{
			expr := &ast.AggregateFuncExpr{
				F:        yyS[yypt-5].ident,
				Args:     []ast.ExprNode{yyS[yypt-2].expr},
				Distinct: yyS[yypt-3].item.(bool),
			}
			if yyS[yypt-1].expr != nil {
				expr.Args = append(expr.Args, yyS[yypt-1].expr)
			}
			parser.yyVAL.expr = expr
		}
	case 149:
		{
			parser.yyVAL.item = false
		}
	case 150:
		{
			parser.yyVAL.item = true
		}
	case 151:
		{
			parser.yyVAL.expr = nil
		}
	case 152:
		{
			parser.yyVAL.expr = yyS[yypt-0].expr
		}
	case 153:
		{
			parser.yyVAL.expr = &ast.ExtractFuncExpr{
				ExtractField: yyS[yypt-3].item.(ast.ExtractField),
				Expr:         yyS[yypt-1].expr,
			}
		}
	case 154:
		{
			parser.yyVAL.item = ast.ExtractFieldYear
		}
	case 155:
		{
			parser.yyVAL.item = ast.ExtractFieldMonth
		}
	case 156:
		{
			parser.yyVAL.item = ast.ExtractFieldDay
		}
	case 157:
		{
			parser.yyVAL.item = ast.ExtractFieldHour
		}
	case 158:
		{
			parser.yyVAL.item = ast.ExtractFieldMinute
		}
	case 159:
		{
			parser.yyVAL.item = ast.ExtractFieldSecond
		}
	case 160:
		{
			parser.yyVAL.item = ast.ExtractFieldTimezoneHour
		}
	case 161:
		{
			parser.yyVAL.item = ast.ExtractFieldTimezoneMinute
		}
	case 162:
		{
			parser.yyVAL.expr = &ast.IsNullExpr{
				Expr: yyS[yypt-2].expr,
			}
		}
	case 163:
		{
			parser.yyVAL.expr = &ast.IsNullExpr{
				Expr: yyS[yypt-3].expr,
				Not:  true,
			}
		}
	case 164:
		{
			parser.yyVAL.expr = &ast.CastFuncExpr{
				Expr:     yyS[yypt-3].expr,
				DataType: yyS[yypt-1].item.(ast.DataType),
			}
		}
	case 165:
		{
			parser.yyVAL.item = ast.DataTypeString
		}
	case 166:
		{
			parser.yyVAL.item = ast.DataTypeBoolean
		}
	case 167:
		{
			parser.yyVAL.item = ast.DataTypeInteger
		}
	case 168:
		{
			parser.yyVAL.item = ast.DataTypeInt
		}
	case 169:
		{
			parser.yyVAL.item = ast.DataTypeLong
		}
	case 170:
		{
			parser.yyVAL.item = ast.DataTypeFloat
		}
	case 171:
		{
			parser.yyVAL.item = ast.DataTypeDouble
		}
	case 172:
		{
			parser.yyVAL.item = ast.DataTypeDouble
		}
	case 173:
		{
			parser.yyVAL.item = ast.DataTypeTime
		}
	case 174:
		{
			parser.yyVAL.item = ast.DataTypeTimeWithZone
		}
	case 175:
		{
			parser.yyVAL.item = ast.DataTypeTimestamp
		}
	case 176:
		{
			parser.yyVAL.item = ast.DataTypeTimestampWithZone
		}
	case 179:
		{
			parser.yyVAL.expr = &ast.CaseExpr{
				Value:       yyS[yypt-3].expr,
				WhenClauses: yyS[yypt-2].item.([]*ast.WhenClause),
				ElseClause:  yyS[yypt-1].expr,
			}
		}
	case 180:
		{
			parser.yyVAL.expr = &ast.CaseExpr{
				WhenClauses: yyS[yypt-2].item.([]*ast.WhenClause),
				ElseClause:  yyS[yypt-1].expr,
			}
		}
	case 181:
		{
			parser.yyVAL.item = []*ast.WhenClause{yyS[yypt-0].item.(*ast.WhenClause)}
		}
	case 182:
		{
			parser.yyVAL.item = append(yyS[yypt-1].item.([]*ast.WhenClause), yyS[yypt-0].item.(*ast.WhenClause))
		}
	case 183:
		{
			parser.yyVAL.item = &ast.WhenClause{
				Expr:   yyS[yypt-2].expr,
				Result: yyS[yypt-0].expr,
			}
		}
	case 184:
		{
			parser.yyVAL.expr = nil
		}
	case 185:
		{
			parser.yyVAL.expr = yyS[yypt-0].expr
		}
	case 186:
		{
			parser.yyVAL.expr = &ast.PatternInExpr{
				Expr: yyS[yypt-2].expr,
				List: yyS[yypt-0].item.([]ast.ExprNode),
			}
		}
	case 187:
		{
			parser.yyVAL.expr = &ast.PatternInExpr{
				Expr: yyS[yypt-3].expr,
				List: yyS[yypt-0].item.([]ast.ExprNode),
				Not:  true,
			}
		}
	case 188:
		{
			parser.yyVAL.item = yyS[yypt-1].item
		}
	case 189:
		{
			parser.yyVAL.item = []ast.ExprNode{yyS[yypt-0].expr}
		}
	case 190:
		{
			parser.yyVAL.item = append(yyS[yypt-2].item.([]ast.ExprNode), yyS[yypt-0].expr)
		}
	case 191:
		{
			parser.yyVAL.expr = &ast.ExistsSubqueryExpr{
				Sel: yyS[yypt-0].expr,
			}
		}
	case 192:
		{
			parser.yyVAL.expr = &ast.SubqueryExpr{
				Query: yyS[yypt-1].statement.(*ast.SelectStmt),
			}
		}
	case 195:
		{
			ss := &ast.SelectStmt{
				Select: yyS[yypt-6].item.(*ast.SelectClause),
				From:   yyS[yypt-5].item.(*ast.MatchClauseList),
			}
			if yyS[yypt-7].item != nil {
				ss.PathPatternMacros = yyS[yypt-7].item.([]*ast.PathPatternMacro)
			}
			if yyS[yypt-4].item != nil {
				ss.Where = yyS[yypt-4].item.(ast.ExprNode)
			}
			if yyS[yypt-3].item != nil {
				ss.GroupBy = yyS[yypt-3].item.(*ast.GroupByClause)
			}
			if yyS[yypt-2].item != nil {
				ss.Having = yyS[yypt-2].item.(*ast.HavingClause)
			}
			if yyS[yypt-1].item != nil {
				ss.OrderBy = yyS[yypt-1].item.(*ast.OrderByClause)
			}
			if yyS[yypt-0].item != nil {
				ss.Limit = yyS[yypt-0].item.(*ast.LimitClause)
			}
			parser.yyVAL.statement = ss
		}
	case 196:
		{
			parser.yyVAL.item = &ast.SelectClause{
				Distinct: yyS[yypt-1].item.(bool),
				Elements: yyS[yypt-0].item.([]*ast.SelectElement),
			}
		}
	case 197:
		{
			parser.yyVAL.item = &ast.SelectClause{
				Star: true,
			}
		}
	case 198:
		{
			parser.yyVAL.item = []*ast.SelectElement{yyS[yypt-0].item.(*ast.SelectElement)}
		}
	case 199:
		{
			parser.yyVAL.item = append(yyS[yypt-2].item.([]*ast.SelectElement), yyS[yypt-0].item.(*ast.SelectElement))
		}
	case 200:
		{
			parser.yyVAL.item = &ast.SelectElement{
				ExpAsVar: yyS[yypt-0].item.(*ast.ExpAsVar),
			}
		}
	case 201:
		{
			parser.yyVAL.item = &ast.SelectElement{
				Identifier: yyS[yypt-2].ident,
				Prefix:     yyS[yypt-0].item.(string),
			}
		}
	case 202:
		{
			ev := &ast.ExpAsVar{
				Expr: yyS[yypt-1].expr.(ast.ExprNode),
			}
			if yyS[yypt-0].item != nil {
				ev.AsName = yyS[yypt-0].item.(model.CIStr)
			}
			parser.yyVAL.item = ev
		}
	case 203:
		{
			parser.yyVAL.item = ""
		}
	case 204:
		{
			parser.yyVAL.item = yyS[yypt-1].ident
		}
	case 205:
		{
			parser.yyVAL.item = nil
		}
	case 206:
		{
			parser.yyVAL.item = yyS[yypt-0].item.(model.CIStr)
		}
	case 207:
		{
			parser.yyVAL.item = model.NewCIStr(yyS[yypt-0].ident)
		}
	case 208:
		{
			parser.yyVAL.item = model.NewCIStr(yyS[yypt-0].ident)
		}
	case 209:
		{
			parser.yyVAL.item = yyS[yypt-0].item.(*ast.MatchClauseList)
		}
	case 210:
		{
			parser.yyVAL.item = &ast.MatchClauseList{
				Matches: []*ast.MatchClause{yyS[yypt-0].item.(*ast.MatchClause)},
			}
		}
	case 211:
		{
			ml := yyS[yypt-2].item.(*ast.MatchClauseList)
			ml.Matches = append(ml.Matches, yyS[yypt-0].item.(*ast.MatchClause))
			parser.yyVAL.item = ml
		}
	case 212:
		{
			mc := &ast.MatchClause{
				Paths: yyS[yypt-2].item.([]*ast.PathPattern),
			}
			if yyS[yypt-1].item != nil {
				mc.Graph = yyS[yypt-1].item.(model.CIStr)
			}
			parser.yyVAL.item = mc
		}
	case 213:
		{
			parser.yyVAL.item = yyS[yypt-0].item.(model.CIStr)
		}
	case 214:
		{
			parser.yyVAL.item = nil
		}
	case 217:
		{
			parser.yyVAL.item = []*ast.PathPattern{yyS[yypt-0].item.(*ast.PathPattern)}
		}
	case 218:
		{
			parser.yyVAL.item = yyS[yypt-1].item.([]*ast.PathPattern)
		}
	case 219:
		{
			parser.yyVAL.item = yyS[yypt-0].item.(*ast.PathPattern)
		}
	case 220:
		{
			parser.yyVAL.item = append(yyS[yypt-2].item.([]*ast.PathPattern), yyS[yypt-0].item.(*ast.PathPattern))
		}
	case 221:
		{
			pp := yyS[yypt-0].item.(*ast.PathPattern)
			pp.Tp = ast.PathPatternSimple
			parser.yyVAL.item = pp
		}
	case 222:
		{
			pp := yyS[yypt-0].item.(*ast.PathPattern)
			pp.Tp = ast.PathPatternAny
			parser.yyVAL.item = pp
		}
	case 223:
		{
			pp := yyS[yypt-0].item.(*ast.PathPattern)
			pp.Tp = ast.PathPatternAnyShortest
			parser.yyVAL.item = pp
		}
	case 224:
		{
			pp := yyS[yypt-0].item.(*ast.PathPattern)
			pp.Tp = ast.PathPatternAllShortest
			parser.yyVAL.item = pp
		}
	case 225:
		{
			pp := yyS[yypt-0].item.(*ast.PathPattern)
			pp.Tp = ast.PathPatternTopKShortest
			pp.TopK = yyS[yypt-2].item.(int64)
			parser.yyVAL.item = pp
		}
	case 226:
		{
			pp := yyS[yypt-0].item.(*ast.PathPattern)
			pp.Tp = ast.PathPatternAnyCheapest
			parser.yyVAL.item = pp
		}
	case 227:
		{
			pp := yyS[yypt-0].item.(*ast.PathPattern)
			pp.Tp = ast.PathPatternAllCheapest
			parser.yyVAL.item = pp
		}
	case 228:
		{
			pp := yyS[yypt-0].item.(*ast.PathPattern)
			pp.Tp = ast.PathPatternTopKCheapest
			pp.TopK = yyS[yypt-2].item.(int64)
			parser.yyVAL.item = pp
		}
	case 229:
		{
			pp := yyS[yypt-0].item.(*ast.PathPattern)
			pp.Tp = ast.PathPatternAll
			parser.yyVAL.item = pp
		}
	case 230:
		{
			parser.yyVAL.item = &ast.PathPattern{Vertices: []*ast.VertexPattern{yyS[yypt-0].item.(*ast.VertexPattern)}}
		}
	case 231:
		{
			pp := yyS[yypt-2].item.(*ast.PathPattern)
			pp.Vertices = append(pp.Vertices, yyS[yypt-0].item.(*ast.VertexPattern))
			pp.Connections = append(pp.Connections, yyS[yypt-1].item.(*ast.ReachabilityPathExpr))
			parser.yyVAL.item = pp
		}
	case 232:
		{
			pp := yyS[yypt-2].item.(*ast.PathPattern)
			pp.Vertices = append(pp.Vertices, yyS[yypt-0].item.(*ast.VertexPattern))
			pp.Connections = append(pp.Connections, yyS[yypt-1].item.(*ast.EdgePattern))
			parser.yyVAL.item = pp
		}
	case 233:
		{
			parser.yyVAL.item = &ast.PathPattern{
				Vertices:    []*ast.VertexPattern{yyS[yypt-2].item.(*ast.VertexPattern), yyS[yypt-0].item.(*ast.VertexPattern)},
				Connections: []ast.VertexPairConnection{yyS[yypt-1].item.(*ast.QuantifiedPathExpr)},
			}
		}
	case 234:
		{
			parser.yyVAL.item = &ast.ReachabilityPathExpr{
				Labels:     yyS[yypt-2].item.([]model.CIStr),
				Direction:  ast.EdgeDirectionOutgoing,
				Quantifier: yyS[yypt-1].item.(*ast.PatternQuantifier),
			}
		}
	case 235:
		{
			parser.yyVAL.item = &ast.ReachabilityPathExpr{
				Labels:     yyS[yypt-2].item.([]model.CIStr),
				Direction:  ast.EdgeDirectionIncoming,
				Quantifier: yyS[yypt-1].item.(*ast.PatternQuantifier),
			}
		}
	case 236:
		{
			parser.yyVAL.item = &ast.ReachabilityPathExpr{
				Labels:     yyS[yypt-2].item.([]model.CIStr),
				Direction:  ast.EdgeDirectionAnyDirected,
				Quantifier: yyS[yypt-1].item.(*ast.PatternQuantifier),
			}
		}
	case 237:
		{
			parser.yyVAL.item = &ast.VertexPattern{Variable: yyS[yypt-1].item.(*ast.VariableSpec)}
		}
	case 238:
		{
			parser.yyVAL.item = (*ast.VertexPattern)(nil)
		}
	case 240:
		{
			parser.yyVAL.item = &ast.EdgePattern{
				Variable:  yyS[yypt-1].item.(*ast.VariableSpec),
				Direction: ast.EdgeDirectionOutgoing,
			}
		}
	case 241:
		{
			parser.yyVAL.item = &ast.EdgePattern{Direction: ast.EdgeDirectionOutgoing}
		}
	case 242:
		{
			parser.yyVAL.item = &ast.EdgePattern{
				Variable:  yyS[yypt-1].item.(*ast.VariableSpec),
				Direction: ast.EdgeDirectionIncoming,
			}
		}
	case 243:
		{
			parser.yyVAL.item = &ast.EdgePattern{Direction: ast.EdgeDirectionIncoming}
		}
	case 244:
		{
			parser.yyVAL.item = &ast.EdgePattern{
				Variable:  yyS[yypt-1].item.(*ast.VariableSpec),
				Direction: ast.EdgeDirectionAnyDirected,
			}
		}
	case 245:
		{
			parser.yyVAL.item = &ast.EdgePattern{Direction: ast.EdgeDirectionAnyDirected}
		}
	case 246:
		{
			v := &ast.VariableSpec{
				Name:   yyS[yypt-1].item.(model.CIStr),
				Labels: yyS[yypt-0].item.([]model.CIStr),
			}
			if v.Name.L == "" {
				v.Anonymous = true
			}
			parser.yyVAL.item = v
		}
	case 247:
		{
			parser.yyVAL.item = model.CIStr{}
		}
	case 248:
		{
			parser.yyVAL.item = model.NewCIStr(yyS[yypt-0].ident)
		}
	case 249:
		{
			parser.yyVAL.item = yyS[yypt-0].item.([]model.CIStr)
		}
	case 250:
		{
			parser.yyVAL.item = []model.CIStr(nil)
		}
	case 254:
		{
			parser.yyVAL.item = []model.CIStr{yyS[yypt-0].item.(model.CIStr)}
		}
	case 255:
		{
			parser.yyVAL.item = append(yyS[yypt-2].item.([]model.CIStr), yyS[yypt-0].item.(model.CIStr))
		}
	case 256:
		{
			parser.yyVAL.item = &ast.QuantifiedPathExpr{
				Edge:       yyS[yypt-1].item.(*ast.EdgePattern),
				Quantifier: yyS[yypt-0].item.(*ast.PatternQuantifier),
			}
		}
	case 257:
		{
			q := &ast.QuantifiedPathExpr{
				Edge:        yyS[yypt-5].item.(*ast.EdgePattern),
				Quantifier:  yyS[yypt-0].item.(*ast.PatternQuantifier),
				Source:      yyS[yypt-6].item.(*ast.VertexPattern),
				Destination: yyS[yypt-4].item.(*ast.VertexPattern),
			}
			if yyS[yypt-3].item != nil {
				q.Where = yyS[yypt-3].item.(ast.ExprNode)
			}
			if yyS[yypt-2].item != nil {
				q.Cost = yyS[yypt-2].item.(ast.ExprNode)
			}
			parser.yyVAL.item = q
		}
	case 258:
		{
			parser.yyVAL.item = yyS[yypt-0].expr.(ast.ExprNode)
		}
	case 259:
		{
			parser.yyVAL.item = nil
		}
	case 261:
		{
			parser.yyVAL.item = &ast.PatternQuantifier{Tp: ast.PatternQuantifierZeroOrMore, M: math.MaxInt64}
		}
	case 262:
		{
			parser.yyVAL.item = &ast.PatternQuantifier{Tp: ast.PatternQuantifierOneOrMore, N: 1, M: math.MaxInt64}
		}
	case 263:
		{
			parser.yyVAL.item = &ast.PatternQuantifier{Tp: ast.PatternQuantifierOptional, N: 0, M: 1}
		}
	case 264:
		{
			parser.yyVAL.item = &ast.PatternQuantifier{Tp: ast.PatternQuantifierExactlyN, N: yyS[yypt-1].item.(int64), M: yyS[yypt-1].item.(int64)}
		}
	case 265:
		{
			parser.yyVAL.item = &ast.PatternQuantifier{Tp: ast.PatternQuantifierNOrMore, N: yyS[yypt-2].item.(int64), M: math.MaxInt64}
		}
	case 266:
		{
			parser.yyVAL.item = &ast.PatternQuantifier{Tp: ast.PatternQuantifierBetweenNAndM, N: yyS[yypt-3].item.(int64), M: yyS[yypt-1].item.(int64)}
		}
	case 267:
		{
			parser.yyVAL.item = &ast.PatternQuantifier{Tp: ast.PatternQuantifierBetweenZeroAndM, N: 0, M: yyS[yypt-1].item.(int64)}
		}
	case 268:
		{
			parser.yyVAL.item = (*ast.PatternQuantifier)(nil)
		}
	case 270:
		{
			parser.yyVAL.item = nil
		}
	case 272:
		{
			parser.yyVAL.item = []*ast.PathPatternMacro{yyS[yypt-0].item.(*ast.PathPatternMacro)}
		}
	case 273:
		{
			parser.yyVAL.item = append(yyS[yypt-1].item.([]*ast.PathPatternMacro), yyS[yypt-0].item.(*ast.PathPatternMacro))
		}
	case 274:
		{
			p := &ast.PathPatternMacro{
				Name: model.NewCIStr(yyS[yypt-3].ident),
				Path: yyS[yypt-1].item.(*ast.PathPattern),
			}
			if yyS[yypt-0].item != nil {
				p.Where = yyS[yypt-0].item.(ast.ExprNode)
			}
			parser.yyVAL.item = p
		}
	case 275:
		{
			parser.yyVAL.item = nil
		}
	case 276:
		{
			parser.yyVAL.item = yyS[yypt-0].expr
		}
	case 277:
		{
			parser.yyVAL.item = nil
		}
	case 278:
		{
			parser.yyVAL.item = &ast.GroupByClause{Items: yyS[yypt-0].item.([]*ast.ByItem)}
		}
	case 279:
		{
			parser.yyVAL.item = []*ast.ByItem{yyS[yypt-0].item.(*ast.ByItem)}
		}
	case 280:
		{
			parser.yyVAL.item = append(yyS[yypt-2].item.([]*ast.ByItem), yyS[yypt-0].item.(*ast.ByItem))
		}
	case 281:
		{
			parser.yyVAL.item = &ast.ByItem{
				Expr:      yyS[yypt-0].item.(*ast.ExpAsVar),
				NullOrder: true,
			}
		}
	case 282:
		{
			parser.yyVAL.item = &ast.ByItem{
				Expr: yyS[yypt-1].item.(*ast.ExpAsVar),
				Desc: yyS[yypt-0].item.(bool),
			}
		}
	case 283:
		{
			parser.yyVAL.item = false
		}
	case 284:
		{
			parser.yyVAL.item = true
		}
	case 285:
		{
			parser.yyVAL.item = nil
		}
	case 286:
		{
			parser.yyVAL.item = &ast.HavingClause{
				Expr: yyS[yypt-0].expr,
			}
		}
	case 287:
		{
			parser.yyVAL.item = nil
		}
	case 288:
		{
			parser.yyVAL.item = &ast.OrderByClause{
				Items: yyS[yypt-0].item.([]*ast.ByItem),
			}
		}
	case 289:
		{
			parser.yyVAL.item = nil
		}
	case 290:
		{
			parser.yyVAL.item = &ast.LimitClause{
				Count: yyS[yypt-0].expr,
			}
		}
	case 291:
		{
			parser.yyVAL.item = &ast.LimitClause{
				Count:  yyS[yypt-0].expr.(ast.ExprNode),
				Offset: yyS[yypt-2].expr.(ast.ExprNode),
			}
		}
	case 292:
		{
			parser.yyVAL.item = &ast.LimitClause{
				Count:  yyS[yypt-2].expr.(ast.ExprNode),
				Offset: yyS[yypt-0].expr.(ast.ExprNode),
			}
		}
	case 294:
		{
			parser.yyVAL.expr = &ast.BindVariable{}
		}
	case 295:
		{
			parser.yyVAL.expr = ast.NewValueExpr(yyS[yypt-0].item)
		}
	case 296:
		{
			us := &ast.UpdateStmt{
				Updates: yyS[yypt-6].item.([]*ast.GraphElementUpdate),
				From:    yyS[yypt-5].item.(*ast.MatchClauseList),
			}
			if yyS[yypt-8].item != nil {
				us.PathPatternMacros = yyS[yypt-8].item.([]*ast.PathPatternMacro)
			}
			if yyS[yypt-4].item != nil {
				us.Where = yyS[yypt-4].item.(ast.ExprNode)
			}
			if yyS[yypt-3].item != nil {
				us.GroupBy = yyS[yypt-3].item.(*ast.GroupByClause)
			}
			if yyS[yypt-2].item != nil {
				us.Having = yyS[yypt-2].item.(*ast.HavingClause)
			}
			if yyS[yypt-1].item != nil {
				us.OrderBy = yyS[yypt-1].item.(*ast.OrderByClause)
			}
			if yyS[yypt-0].item != nil {
				us.Limit = yyS[yypt-0].item.(*ast.LimitClause)
			}
			parser.yyVAL.statement = us
		}
	case 297:
		{
			parser.yyVAL.item = []*ast.GraphElementUpdate{yyS[yypt-0].item.(*ast.GraphElementUpdate)}
		}
	case 298:
		{
			parser.yyVAL.item = append(yyS[yypt-2].item.([]*ast.GraphElementUpdate), yyS[yypt-0].item.(*ast.GraphElementUpdate))
		}
	case 299:
		{
			parser.yyVAL.item = &ast.GraphElementUpdate{
				VariableName: yyS[yypt-4].expr.(*ast.VariableReference),
				Assignments:  yyS[yypt-1].item.([]*ast.PropertyAssignment),
			}
		}
	case 300:
		{
			parser.yyVAL.statement = &ast.UseStmt{}
		}
	case 301:
		{
			parser.yyVAL.item = false
		}
	case 302:
		{
			parser.yyVAL.item = true
		}
	case 303:
		{
			parser.yyVAL.item = false
		}
	case 304:
		{
			parser.yyVAL.item = true
		}
	case 305:
		{
			parser.yyVAL.item = model.NewCIStr(yyS[yypt-0].ident)
		}
	case 306:
		{
			parser.yyVAL.item = model.NewCIStr(yyS[yypt-0].ident)
		}
	case 307:
		{
			parser.yyVAL.item = model.NewCIStr(yyS[yypt-0].ident)
		}
	case 308:
		{
			parser.yyVAL.item = model.NewCIStr(yyS[yypt-0].ident)
		}
	case 312:
		{
			parser.yyVAL.item = append(yyS[yypt-2].item.([]model.CIStr), yyS[yypt-0].item.(model.CIStr))
		}

	}

	if !parser.lexer.skipPositionRecording {
		yySetOffset(parser.yyVAL, parser.yyVAL.offset)
	}

	if yyEx != nil && yyEx.Reduced(r, exState, parser.yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}

%{
// Copyright 2013 The ql Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSES/QL-LICENSE file.

// Copyright 2022 zGraph Authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Initial yacc source generated by ebnf2y[1]
// at 2013-10-04 23:10:47.861401015 +0200 CEST
//
//  $ ebnf2y -o ql.y -oe ql.ebnf -start StatementList -pkg ql -p _
//
//   [1]: http://github.com/cznic/ebnf2y

// The parser implements the PGQL specification
//
// - https://pgql-lang.org/spec/1.5/
//

package parser

import (
	"strings"

	"github.com/vescale/zgraph/parser/ast"
)

%}

%union {
	offset int // offset
	item interface{}
	ident string
	expr ast.ExprNode
	statement ast.StmtNode
}

%token	<ident>

	/*yy:token "%c"     */
	identifier "identifier"

	/*yy:token "_%c"    */
	underscoreCS "UNDERSCORE_CHARSET"

	/*yy:token "\"%c\"" */
	stringLit          "string literal"
	singleAtIdentifier "identifier with single leading at"
	doubleAtIdentifier "identifier with double leading at"
	invalid            "a special token never used by parser, used by lexer to indicate error"
	andand             "&&"
	pipes              "||"

	/* Reserved keywords */
	as                    "AS"
	asc                   "ASC"
	bigIntType            "BIGINT"
	by                    "BY"
	character             "CHARACTER"
	charType              "CHAR"
	create                "CREATE"
	currentTs             "CURRENT_TIMESTAMP"
	database              "DATABASE"
	decimalType           "DECIMAL"
	defaultKwd            "DEFAULT"
	deleteKwd             "DELETE"
	desc                  "DESC"
	destination           "DESTINATION"
	doubleType            "DOUBLE"
	drop                  "DROP"
	edge                  "EDGE"
	exists                "EXISTS"
	falseKwd              "FALSE"
	floatType             "FLOAT"
	from                  "FROM"
	group                 "GROUP"
	having                "HAVING"
	ifKwd                 "IF"
	index                 "INDEX"
	insert                "INSERT"
	int1Type              "INT1"
	int2Type              "INT2"
	int3Type              "INT3"
	int4Type              "INT4"
	int8Type              "INT8"
	integerType           "INTEGER"
	into                  "INTO"
	intType               "INT"
	is                    "IS"
	key                   "KEY"
	limit                 "LIMIT"
	localTime             "LOCALTIME"
	localTs               "LOCALTIMESTAMP"
	longtextType          "LONGTEXT"
	match                 "MATCH"
	mediumIntType         "MEDIUMINT"
	mediumtextType        "MEDIUMTEXT"
	not                   "NOT"
	null                  "NULL"
	numericType           "NUMERIC"
	on                    "ON"
	order                 "ORDER"
	precisionType         "PRECISION"
	primary               "PRIMARY"
	realType              "REAL"
	references            "REFERENCES"
	selectKwd             "SELECT"
	set                   "SET"
	smallIntType          "SMALLINT"
	source                "SOURCE"
	tableKwd              "TABLE"
	tinyIntType           "TINYINT"
	tinytextType          "TINYTEXT"
	trueKwd               "TRUE"
	unique                "UNIQUE"
	unsigned              "UNSIGNED"
	update                "UPDATE"
	use                   "USE"
	values                "VALUES"
	varcharacter          "VARCHARACTER"
	varcharType           "VARCHAR"
	varying               "VARYING"
	vertex                "VERTEX"
	where                 "WHERE"
	xor                   "XOR"
	zerofill              "ZEROFILL"
	or                    "OR"
	and                   "AND"

	/* Unreserved keywords */
	begin                 "BEGIN"
	commit                "COMMIT"
	comment               "COMMENT"
	booleanType           "BOOLEAN"
	boolType              "BOOL"
	explain               "EXPLAIN"
	fixed                 "FIXED"
	bitType               "BIT"
	national              "NATIONAL"
	ncharType             "NCHAR"
	yearType              "YEAR"
	textType              "TEXT"
	data                  "DATA"
	datetimeType          "DATETIME"
	dateType              "DATE"
	day                   "DAY"
	timestampType         "TIMESTAMP"
	timeType              "TIME"
	signed                "SIGNED"
	value                 "VALUE"
	duplicate             "DUPLICATE"
	rollback              "ROLLBACK"
	offset                "OFFSET"
	autoIncrement         "AUTO_INCREMENT"
	visible               "VISIBLE"
	invisible             "INVISIBLE"
	nvarcharType          "NVARCHAR"
	sqlTsiYear            "SQL_TSI_YEAR"
	pipesAsOr
	graph                 "GRAPH"
	all                   "ALL"
	any                   "ANY"
	shortest              "SHORTEST"
	cheapest              "CHEAPEST"
	top                   "TOP"
	cost                  "COST"
	path                  "PATH"

%token	<item>

	/*yy:token "1.%d"   */
	floatLit "floating-point literal"

	/*yy:token "1.%d"   */
	decLit "decimal literal"

	/*yy:token "%d"     */
	intLit "integer literal"

	/*yy:token "%x"     */
	hexLit "hexadecimal literal"

	/*yy:token "%b"     */
	bitLit       "bit literal"
	andnot       "&^"
	assignmentEq ":="
	eq           "="
	ge           ">="
	le           "<="
	jss          "->"
	juss         "->>"
	lsh          "<<"
	neq          "!="
	neqSynonym   "<>"
	nulleq       "<=>"
	paramMarker  "?"
	rsh          ">>"
	leftArrow    "<-"
	dashSlash    "-/"
	slashDash    "/-"
	dashBracket  "-["
	bracketDash  "]-"
	bLeftArrow   "<-["
	bRightArrow  "]->"
	sLeftArrow   "<-/"
	sRightArrow  "/->"

%token not2
%type	<expr>
	Expression                      "expression"
	ExprOrDefault                   "expression or default"
	Literal                         "literal value"
	SubSelect                       "Sub Select"
	StringLiteral                   "text literal"
	SignedLiteral                   "Literal or NumLiteral with sign"
	DefaultValueExpr                "DefaultValueExpr(Now or Signed Literal)"
	NowSymOptionFraction            "NowSym with optional fraction part"
	NowSymOptionFractionParentheses "NowSym with optional fraction part within potential parentheses"

%type	<statement>
	EmptyStmt                  "Empty statement"
	BeginStmt                  "BEGIN statement"
	CommitStmt                 "COMMIT statement"
	CreateDatabaseStmt         "Create graph databases ddl statement"
	CreateTableStmt            "Create vertex/edge tables ddl statement"
	DeleteStmt                 "Delete vertices/edges statement"
	DropDatabaseStmt           "Drop graph database ddl statement"
	DropTableStmt              "Drop vertices/edges ddl statement"
	ExplainStmt                "EXPLAIN statement"
	InsertStmt                 "Insert vertices/edges statement"
	RollbackStmt               "ROLLBACK statement"
	SelectStmt                 "Select statement"
	Statement                  "Statement"
	UpdateStmt                 "Update vertices/edges statement"
	UseStmt                    "USE statement"

%type	<ident>
	Identifier                 "identifier or unreserved keyword"
	FieldAsNameOpt             "Field alias name opt"
	UnreservedKeywords         "Unreserved keywords"
	GraphName                  "Graph name"
	LabelName                  "Label name"
	VariableName               "Variable name"

%type   <item>
	Assignment                             "assignment"
	AssignmentList                         "assignment list"
	AssignmentListOpt                      "assignment list opt"
	ColumnDef                              "table column definition"
	ColumnName                             "column name"
	ColumnList                             "column list"
	ColumnNameListOpt                      "column name list opt"
	ColumnSetValue                         "insert statement set value by column name"
	ColumnSetValueList                     "insert statement set value by column name list"
	ColumnOption                           "column definition option"
	ColumnOptionList                       "column definition option list"
	ColumnOptionListOpt                    "optional column definition option list"
	Constraint                             "table constraint"
	Field                                  "field expression"
	FieldList                              "field expression list"
	IfExists                               "If Exists"
	IfNotExists                            "If Not Exists"
	HavingClauseOpt                        "HAVING clause"
	IndexInvisible                         "index visible/invisible"
	IndexOptionList                        "Index Option List or empty"
	IndexName                              "index name"
	InsertValues                           "Rest part of INSERT/REPLACE INTO statement"
	LimitOption                            "Limit option could be integer or parameter marker."
	NumLiteral                             "Num/Int/Float/Decimal Literal"
	OnDuplicateKeyUpdate                   "ON DUPLICATE KEY UPDATE value list"
	Order                                  "Ordering keyword: ASC or DESC"
	ByItem                                 "BY item"
	ByList                                 "BY list"
	RowValue                               "Row value"
	SelectFieldList                       "SELECT statement field list"
	LimitClauseOpt                     "SELECT statement optional LIMIT clause"
	StatementList                          "statement list"
	StringList                             "string list"
	TableAsName                            "table alias name"
	TableAsNameOpt                         "table alias name optional"
	TableElement                           "table definition element"
	TableElementList                       "table definition element list"
	TableElementListOpt                    "table definition element list optional"
	TableName                              "Table name"
	TextString                             "text string item"
	TextStringList                         "text string list"
	Values                                 "values"
	ValuesList                             "values list"
	ValuesOpt                              "values optional"
	WhereClauseOpt                         "Optional WHERE clause"
	Type                                   "Types"
	NumericType                            "Numeric types"
	IntegerType                            "Integer Types types"
	BooleanType                            "Boolean Types types"
	FixedPointType                         "Exact value types"
	FloatingPointType                      "Approximate value types"
	BitValueType                           "bit value types"
	StringType                             "String types"
	TextType                               "Text types"
	DateAndTimeType                        "Date and Time types"
	OptFieldLen                            "Field length or empty"
	FieldLen                               "Field length"
	FieldOpts                              "Field type definition option list"
	FieldOpt                               "Field type definition option"
	FloatOpt                               "Floating-point type option"
	Precision                              "Floating-point precision option"
	NUM                                    "A number"
	LengthNum                              "Field length num(uint64)"
	MatchClause                            "Match clause"
	MatchClauseList                        "Match clause list"
	GraphOnClause                          "Graph ON Clause"
	GraphOnClauseOpt                       "Graph ON Clause optional"
	GraphPattern                           "Graph pattern"
	PathPattern                            "Path pattern"
	PathPatternList                        "Path pattern list"
	SimplePathPattern                      "Simple path pattern"
	VertexPattern                          "Vertex pattern"
	VertexPatternOpt                       "Vertex pattern optional"
	ReachabilityPathExpr                   "Reachability path expression"
	EdgePattern                            "Edge pattern"
	VariableLengthPathPattern              "Variable length path pattern"
	QuantifiedPathExpr                     "Quantified path expression"
	LabelPredicate                         "Label predicate"
	LabelPredicateOpt                      "Label predicate optional"
	PatternQuantifier                      "Pattern quantifier"
	LabelNameList                          "Label name list"
	PatternQuantifierOpt                   "Pattern quantifier optional"
	VariableSpec                           "Variable specification"
	VariableNameOpt                        "Variable name optional"
	CostClause                             "Cost clause optional"
	CostClauseOpt                          "Cost clause"
	PathPatternMacro                       "Path pattern macro"
	PathPatternMacroList                   "Path pattern macro list"

%precedence empty
%precedence value
%precedence lowerThanStringLitToken
%precedence insertValues
%precedence lowerThanKey
%precedence key

%right '('
%left ')'
%precedence higherThanParenthese
%precedence lowerThanOn
%precedence on
%right assignmentEq
%left pipes or pipesAsOr
%left xor
%left andand and
%left between
%left '|'
%left '&'
%left rsh lsh
%left '-' '+'
%left '*' '/' '%' div mod
%left '^'
%left '~' neg
%right not
%precedence ','

%start	Entry

%%

Entry:
	StatementList

StatementList:
	Statement
	{
		$$ = $1
	}
|	StatementList ';' Statement
	{}

Statement:
	EmptyStmt
|	BeginStmt
|	CommitStmt
|	CreateDatabaseStmt
|	CreateTableStmt
|	DeleteStmt
|	DropDatabaseStmt
|	DropTableStmt
|	ExplainStmt
|	InsertStmt
|	RollbackStmt
|	SelectStmt
|	UpdateStmt
|	UseStmt

EmptyStmt:
	/* EMPTY */
	{}

BeginStmt:
	"BEGIN"
	{}

CommitStmt:
	"COMMIT"
	{}

CreateDatabaseStmt:
	"CREATE" "GRAPH" "DATABASE" IfNotExists GraphName
	{}

CreateTableStmt:
	"CREATE" TableType IfNotExists TableName TableElementListOpt
	{}

TableType:
	"VERTEX"
	{}
|	"EDGE"
	{}

TableElementListOpt:
	/* empty */
	{}
|	'(' TableElementList ')'
	{}

TableElementList:
	TableElement
	{}
|	TableElementList ',' TableElement
	{}

TableElement:
	ColumnDef
|	Constraint

ColumnDef:
	ColumnName Type ColumnOptionListOpt
	{}

ColumnOptionListOpt:
	{}
|	ColumnOptionList

ColumnOptionList:
	ColumnOption
	{}
|	ColumnOptionList ColumnOption
	{}

ColumnOption:
	"NOT" "NULL"
	{}
|	"NULL"
	{}
|	"AUTO_INCREMENT"
	{}
|	"PRIMARY" "KEY"
	{}
|	"UNIQUE" %prec lowerThanKey
	{}
|	"UNIQUE" "KEY"
	{}
|	"SOURCE" "KEY"
	{}
|	"DESTINATION" "KEY"
	{}
|	"DEFAULT" DefaultValueExpr
	{}
|	"COMMENT" stringLit
	{}
|	"REFERENCES" TableName '(' ColumnName ')'
	{}

DefaultValueExpr:
	SignedLiteral
|	NowSymOptionFractionParentheses

SignedLiteral:
	Literal
	{}
|	'+' NumLiteral
	{}
|	'-' NumLiteral
	{ß}

Literal:
	"FALSE"
	{}
|	"NULL"
	{}
|	"TRUE"
	{}
|	floatLit
	{}
|	decLit
	{}
|	intLit
	{}
|	StringLiteral %prec lowerThanStringLitToken
	{}
|	hexLit
	{}
|	bitLit
	{}

StringLiteral:
	stringLit
	{}
|	StringLiteral stringLit
	{}

NumLiteral:
	intLit
|	floatLit
|	decLit


NowSymOptionFractionParentheses:
	'(' NowSymOptionFractionParentheses ')'
	{}
|	NowSymOptionFraction

NowSymOptionFraction:
	NowSym
	{}
|	NowSymFunc '(' ')'
	{}
|	NowSymFunc '(' NUM ')'
	{}

NowSymFunc:
	"CURRENT_TIMESTAMP"
|	"LOCALTIME"
|	"LOCALTIMESTAMP"

NowSym:
	"CURRENT_TIMESTAMP"
|	"LOCALTIME"
|	"LOCALTIMESTAMP"

Constraint:
	"PRIMARY" "KEY" IndexName '(' ColumnList ')' IndexOptionList
	{}
|	KeyOrIndex IfNotExists IndexName '(' ColumnList ')' IndexOptionList
	{}
|	"UNIQUE" KeyOrIndexOpt IndexName '(' ColumnList ')' IndexOptionList
	{}

ColumnList:
	Identifier
	{}
|	ColumnList ',' Identifier
	{}

ColumnNameList:
	ColumnName
	{}
|	ColumnNameList ',' ColumnName
	{}

ColumnNameListOpt:
	/* EMPTY */
	{}
|	ColumnNameList
	{}

KeyOrIndex:
	"KEY"
|	"INDEX"

KeyOrIndexOpt:
	{}
|	KeyOrIndex

IndexOptionList:
	{
		$$ = nil
	}
|
	IndexInvisible
	{}
|	"COMMENT" stringLit
	{}

IndexInvisible:
	"VISIBLE"
	{
		$$ = ast.IndexVisibilityVisible
	}
|	"INVISIBLE"
	{
		$$ = ast.IndexVisibilityInvisible
	}

/*************************************Type Begin***************************************/
Type:
	NumericType
|	StringType
|	DateAndTimeType

NumericType:
	IntegerType OptFieldLen FieldOpts
	{}
|	BooleanType FieldOpts
	{}
|	FixedPointType FloatOpt FieldOpts
	{}
|	FloatingPointType FloatOpt FieldOpts
	{}
|	BitValueType OptFieldLen
	{}

IntegerType:
	"TINYINT"
	{}
|	"SMALLINT"
	{}
|	"MEDIUMINT"
	{}
|	"INT"
	{}
|	"INT1"
	{}
|	"INT2"
	{}
|	"INT3"
	{}
|	"INT4"
	{}
|	"INT8"
	{}
|	"INTEGER"
	{}
|	"BIGINT"
	{}

BooleanType:
	"BOOL"
	{}
|	"BOOLEAN"
	{}

FixedPointType:
	"DECIMAL"
	{}
|	"NUMERIC"
	{}
|	"FIXED"
	{}

FloatingPointType:
	"FLOAT"
	{}
|	"REAL"
	{}
|	"DOUBLE"
	{}
|	"DOUBLE" "PRECISION"
	{}

BitValueType:
	"BIT"
	{}

StringType:
	Char FieldLen
	{}
|	Char
	{}
|	NChar FieldLen
	{}
|	NChar
	{}
|	Varchar FieldLen
	{}
|	NVarchar FieldLen
	{}

Char:
	"CHARACTER"
|	"CHAR"

NChar:
	"NCHAR"
|	"NATIONAL" "CHARACTER"
|	"NATIONAL" "CHAR"

Varchar:
	"CHARACTER" "VARYING"
|	"CHAR" "VARYING"
|	"VARCHAR"
|	"VARCHARACTER"

NVarchar:
	"NATIONAL" "VARCHAR"
|	"NATIONAL" "VARCHARACTER"
|	"NVARCHAR"
|	"NCHAR" "VARCHAR"
|	"NCHAR" "VARCHARACTER"
|	"NATIONAL" "CHARACTER" "VARYING"
|	"NATIONAL" "CHAR" "VARYING"
|	"NCHAR" "VARYING"

Year:
	"YEAR"
|	"SQL_TSI_YEAR"

TextType:
	"TINYTEXT"
	{}
|	"TEXT" OptFieldLen
	{}
|	"MEDIUMTEXT"
	{}
|	"LONGTEXT"
	{}

DateAndTimeType:
	"DATE"
	{}
|	"DATETIME" OptFieldLen
	{}
|	"TIMESTAMP" OptFieldLen
	{}
|	"TIME" OptFieldLen
	{}
|	Year OptFieldLen FieldOpts
	{}

FieldLen:
	'(' LengthNum ')'
	{}

OptFieldLen:
	{}
|	FieldLen

FieldOpt:
	"UNSIGNED"
	{}
|	"SIGNED"
	{}
|	"ZEROFILL"
	{}

FieldOpts:
	{}
|	FieldOpts FieldOpt
	{}

FloatOpt:
	{}
|	FieldLen
	{}
|	Precision

Precision:
	'(' LengthNum ',' LengthNum ')'
	{}

StringList:
	stringLit
	{}
|	StringList ',' stringLit
	{}

TextString:
	stringLit
	{}
|	hexLit
	{}
|	bitLit
	{}

TextStringList:
	TextString
	{}
|	TextStringList ',' TextString
	{}

NUM:
	intLit

DeleteStmt:
	"DELETE" "FROM" TableName TableAsNameOpt WhereClauseOpt OrderByClauseOpt LimitClauseOpt
	{}

TableAsNameOpt:
	%prec empty
	{
		$$ = model.CIStr{}
	}
|	TableAsName

TableAsName:
	Identifier
	{
		$$ = model.NewCIStr($1)
	}
|	"AS" Identifier
	{
		$$ = model.NewCIStr($2)
	}

DropDatabaseStmt:
	"DROP" "DATABASE" IfExists GraphName
	{}

DropTableStmt:
	"DROP" "TABLE" IfExists TableName
	{}

ExplainStmt:
	"EXPLAIN" SelectStmt
	{}

InsertStmt:
	"INSERT" IntoOpt TableName InsertValues OnDuplicateKeyUpdate
	{}

IntoOpt:
	{}
|	"INTO"

InsertValues:
	'(' ColumnNameListOpt ')' ValueSym ValuesList
	{}
|	'(' ColumnNameListOpt ')' SelectStmt
	{}
|	'(' ColumnNameListOpt ')' SubSelect
	{}
|	ValueSym ValuesList %prec insertValues
	{}
|	"SET" ColumnSetValueList
	{}

ValueSym:
	"VALUE"
|	"VALUES"

ValuesList:
	RowValue
	{
		$$ = [][]ast.ExprNode{$1.([]ast.ExprNode)}
	}
|	ValuesList ',' RowValue
	{
		$$ = append($1.([][]ast.ExprNode), $3.([]ast.ExprNode))
	}

RowValue:
	'(' ValuesOpt ')'
	{
		$$ = $2
	}

ValuesOpt:
	{
		$$ = []ast.ExprNode{}
	}
|	Values

Values:
	Values ',' ExprOrDefault
	{}
|	ExprOrDefault
	{}

ExprOrDefault:
	Expression
|	"DEFAULT"
	{
		$$ = &ast.DefaultExpr{}
	}

ColumnSetValue:
	ColumnName eq ExprOrDefault
	{
		$$ = &ast.Assignment{
			Column: $1.(*ast.ColumnName),
			Expr:   $3,
		}
	}

ColumnSetValueList:
	{
		$$ = []*ast.Assignment{}
	}
|	ColumnSetValue
	{
		$$ = []*ast.Assignment{$1.(*ast.Assignment)}
	}
|	ColumnSetValueList ',' ColumnSetValue
	{
		$$ = append($1.([]*ast.Assignment), $3.(*ast.Assignment))
	}

/*
 * ON DUPLICATE KEY UPDATE col_name=expr [, col_name=expr] ...
 * See https://dev.mysql.com/doc/refman/5.7/en/insert-on-duplicate.html
 */
OnDuplicateKeyUpdate:
	{
		$$ = nil
	}
|	"ON" "DUPLICATE" "KEY" "UPDATE" AssignmentList
	{
		$$ = $5
	}
/*******************************************************************************************/
Assignment:
	ColumnName eq ExprOrDefault
	{
		$$ = &ast.Assignment{Column: $1.(*ast.ColumnName), Expr: $3}
	}

AssignmentList:
	Assignment
	{
		$$ = []*ast.Assignment{$1.(*ast.Assignment)}
	}
|	AssignmentList ',' Assignment
	{
		$$ = append($1.([]*ast.Assignment), $3.(*ast.Assignment))
	}

AssignmentListOpt:
	/* EMPTY */
	{
		$$ = []*ast.Assignment{}
	}
|	AssignmentList

RollbackStmt:
	"ROLLBACK"
	{}

/*************************************Select Statement***************************************/
SubSelect:
	'(' SelectStmt ')'
	{}

SelectStmt:
	"SELECT" SelectFieldList "FROM" MatchClauseList WhereClauseOpt GroupByClauseOpt HavingClauseOpt OrderByClauseOpt LimitClauseOpt
	{}

SelectFieldList:
	FieldList
	{}

FieldList:
	Field
	{}
|	FieldList ',' Field
	{}
Field:
	'*' %prec '*'
	{}
|	Identifier '.' '*' %prec '*'
	{}
|	Identifier '.' Identifier '.' '*' %prec '*'
	{}
|	Expression FieldAsNameOpt
	{}

FieldAsNameOpt:
	/* EMPTY */
	{
		$$ = ""
	}
|	FieldAsName
	{}

FieldAsName:
	Identifier
|	"AS" Identifier
	{}
|	stringLit
|	"AS" stringLit
	{}

Expression:
	singleAtIdentifier assignmentEq Expression %prec assignmentEq
	{}
|	Expression logOr Expression %prec pipes
	{}
|	Expression "XOR" Expression %prec xor
	{}
|	Expression logAnd Expression %prec andand
	{}
|	"NOT" Expression %prec not
	{}

logOr:
	pipesAsOr
|	"OR"

logAnd:
	"&&"
|	"AND"

MatchClauseList:
	MatchClause
	{
		$$ = &ast.MatchClauseList{Matches: []*ast.MatchClause{$1.(*ast.MatchClause)}}
	}
|	MatchClauseList ',' MatchClause
	{
		ml := $1.(*ast.MatchClauseList)
		ml.Matches = append(ml.Matches, $3.(*ast.MatchClause))
		$$ = ml
	}

MatchClause:
	"MATCH" GraphPattern GraphOnClauseOpt RowsPerMatchOpt
	{
		$$ = &ast.MatchClause{
			Graph: $3.(*ast.GraphName),
			Paths: $2.([]*ast.PathPattern),
		}
	}

GraphOnClause:
	"ON" GraphName
	{
		$$ = $2
	}

GraphOnClauseOpt:
	%prec lowerThanOn
	{
		$$ = (*ast.GraphName)(nil)
	}
|	GraphOnClause

RowsPerMatchOpt:
	{}

GraphPattern:
	PathPattern
	{
		$$ = []*ast.PathPattern{$1.(*ast.PathPattern)}
	}
|	'(' PathPatternList ')'
	{
		$$ = $2.([]*ast.PathPattern)
	}

PathPatternList:
	PathPattern
	{
		$$ = $1.(*ast.PathPattern)
	}
|	PathPatternList ',' PathPattern
	{
		$$ = append($1.([]*ast.PathPattern), $3.(*ast.PathPattern))
	}

PathPattern:
	SimplePathPattern
	{
		pp := $1.(*ast.PathPattern)
		pp.Tp = ast.PathPatternSimple
		$$ = pp
	}
|	"ANY" VariableLengthPathPattern
	{
		pp := $2.(*ast.PathPattern)
		pp.Tp = ast.PathPatternAny
		$$ = pp
	}
|	"ANY" "SHORTEST" VariableLengthPathPattern
	{
		pp := $3.(*ast.PathPattern)
		pp.Tp = ast.PathPatternAnyShortest
		$$ = pp
	}
|	"ALL" "SHORTEST" VariableLengthPathPattern
	{
		pp := $3.(*ast.PathPattern)
		pp.Tp = ast.PathPatternAllShortest
		$$ = pp
	}
|	"TOP" LengthNum "SHORTEST" VariableLengthPathPattern
	{
		pp := $4.(*ast.PathPattern)
		pp.Tp = ast.PathPatternTopKShortest
		pp.TopK = $2.(uint64)
		$$ = pp
	}
|	"ANY" "CHEAPEST" VariableLengthPathPattern
	{
		pp := $3.(*ast.PathPattern)
		pp.Tp = ast.PathPatternAnyCheapest
		$$ = pp
	}
|	"ALL" "CHEAPEST" VariableLengthPathPattern
	{
		pp := $3.(*ast.PathPattern)
		pp.Tp = ast.PathPatternAllCheapest
		$$ = pp
	}
|	"TOP" LengthNum "CHEAPEST" VariableLengthPathPattern
	{
		pp := $4.(*ast.PathPattern)
		pp.Tp = ast.PathPatternTopKCheapest
		pp.TopK = $2.(uint64)
		$$ = pp
	}
|	"ALL" VariableLengthPathPattern
	{
		pp := $2.(*ast.PathPattern)
		pp.Tp = ast.PathPatternAll
		$$ = pp
	}

SimplePathPattern:
	VertexPattern
	{
		$$ = &ast.PathPattern{Vertices: []*ast.VertexPattern{$1.(*ast.VertexPattern)}}
	}
|	SimplePathPattern ReachabilityPathExpr VertexPattern
	{
		pp := $1.(*ast.PathPattern)
		pp.Vertices = append(pp.Vertices, $3.(*ast.VertexPattern))
		pp.Connections = append(pp.Connections, $2.(*ast.ReachabilityPathExpr))
		$$ = pp
	}
|	SimplePathPattern EdgePattern VertexPattern
	{
		pp := $1.(*ast.PathPattern)
		pp.Vertices = append(pp.Vertices, $3.(*ast.VertexPattern))
		pp.Connections = append(pp.Connections, $2.(*ast.EdgePattern))
		$$ = pp
	}

VariableLengthPathPattern:
	VertexPattern QuantifiedPathExpr VertexPattern
	{
		$$ = &ast.PathPattern{
			Vertices:    []*ast.VertexPattern{$1.(*ast.VertexPattern), $3.(*ast.VertexPattern)},
			Connections: []ast.VertexPairConnection{$2.(*ast.QuantifiedPathExpr)},
		}
	}

ReachabilityPathExpr:
	"-/" LabelPredicate PatternQuantifierOpt "/->"
	{
		$$ = &ast.ReachabilityPathExpr{
			Labels:     $2.([]model.CIStr),
			Direction:  ast.EdgeDirectionOutgoing,
			Quantifier: $3.(*ast.PatternQuantifier),
		}
	}
|	"<-/" LabelPredicate PatternQuantifierOpt "/-"
	{
		$$ = &ast.ReachabilityPathExpr{
			Labels:     $2.([]model.CIStr),
			Direction:  ast.EdgeDirectionIncoming,
			Quantifier: $3.(*ast.PatternQuantifier),
		}
	}
|	"-/" LabelPredicate PatternQuantifierOpt "/-"
	{
		$$ = &ast.ReachabilityPathExpr{
			Labels:     $2.([]model.CIStr),
			Direction:  ast.EdgeDirectionAnyDirected,
			Quantifier: $3.(*ast.PatternQuantifier),
		}
	}

VertexPattern:
	'(' VariableSpec ')'
	{
		$$ = &ast.VertexPattern{Variable: $2.(*ast.VariableSpec)}
	}

VertexPatternOpt:
	{
		$$ = (*ast.VertexPattern)(nil)
	}
|	VertexPattern

EdgePattern:
	"-[" VariableSpec "]->"
	{
		$$ = &ast.EdgePattern{
			Variable:  $2.(*ast.VariableSpec),
			Direction: ast.EdgeDirectionOutgoing,
		}
	}
|	"->"
	{
		$$ = &ast.EdgePattern{Direction: ast.EdgeDirectionOutgoing}
	}
|	"<-[" VariableSpec "]-"
	{
		$$ = &ast.EdgePattern{
			Variable:  $2.(*ast.VariableSpec),
			Direction: ast.EdgeDirectionIncoming,
		}
	}
|	"<-"
	{
		$$ = &ast.EdgePattern{Direction: ast.EdgeDirectionIncoming}
	}
|	"-[" VariableSpec "]-"
	{
		$$ = &ast.EdgePattern{
			Variable:  $2.(*ast.VariableSpec),
			Direction: ast.EdgeDirectionAnyDirected,
		}
	}
|	'-'
	{
		$$ = &ast.EdgePattern{Direction: ast.EdgeDirectionAnyDirected}
	}

VariableSpec:
	VariableNameOpt LabelPredicateOpt
	{
		v := &ast.VariableSpec{
			Name:   $1.(model.CIStr),
			Labels: $2.([]model.CIStr),
		}
		if v.Name.L == "" {
			v.Anonymous = true
		}
		$$ = v
	}

VariableNameOpt:
	{
		$$ = model.CIStr{}
	}
|	Identifier
	{
		$$ = model.NewCIStr($1)
	}

LabelPredicate:
	ColonOrIsKeyword LabelNameList
	{
		$$ = $2.([]model.CIStr)
	}

LabelPredicateOpt:
	{
		$$ = []model.CIStr(nil)
	}
|	LabelPredicate

ColonOrIsKeyword:
	':'
|	"IS"

LabelList:
	Label:
	{}
|	LabelList '|' Label
	{}

Label:
	Identifier

LabelNameList:
	LabelName
	{
		$$ = []model.CIStr{$1.(model.CIStr)}
	}
|	LabelNameList '|' LabelName
	{
		$$ = append($1.([]model.CIStr), $3.(model.CIStr))
	}

QuantifiedPathExpr:
	EdgePattern PatternQuantifierOpt
	{
		$$ = &ast.QuantifiedPathExpr{
			Edge:       $1.(*ast.EdgePattern),
			Quantifier: $2.(*ast.PatternQuantifier),
		}
	}
|	'(' VertexPatternOpt EdgePattern VertexPatternOpt WhereClauseOpt CostClauseOpt ')' PatternQuantifierOpt
	{
		q := &ast.QuantifiedPathExpr{
			Edge:        $3.(*ast.EdgePattern),
			Quantifier:  $8.(*ast.PatternQuantifier),
			Source:      $2.(*ast.VertexPattern),
			Destination: $4.(*ast.VertexPattern),
		}
		if $5 != nil {
			q.Where = $5.(ast.ExprNode)
		}
		if $6 != nil {
			q.Cost = $6.(ast.ExprNode)
		}
		$$ = q
	}

CostClause:
	"COST" Expression
	{
		$$ = $2.(ast.ExprNode)
	}

CostClauseOpt:
	{
		$$ = nil
	}
|	CostClause

PatternQuantifier:
	'*'
	{
		$$ = &ast.PatternQuantifier{Tp: ast.PatternQuantifierZeroOrMore, M: 18446744073709551615}
	}
|	'+'
	{
		$$ = &ast.PatternQuantifier{Tp: ast.PatternQuantifierOneOrMore, N: 1, M: 18446744073709551615}
	}
// '?' is declared as paramMarker before.
|	paramMarker
	{
		$$ = &ast.PatternQuantifier{Tp: ast.PatternQuantifierOptional, N: 0, M: 1}
	}
|	'{' LengthNum '}'
	{
		$$ = &ast.PatternQuantifier{Tp: ast.PatternQuantifierExactlyN, N: $2.(uint64), M: $2.(uint64)}
	}
|	'{' LengthNum ',' '}'
	{
		$$ = &ast.PatternQuantifier{Tp: ast.PatternQuantifierNOrMore, N: $2.(uint64), M: 18446744073709551615}
	}
|	'{' LengthNum ',' LengthNum '}'
	{
		$$ = &ast.PatternQuantifier{Tp: ast.PatternQuantifierBetweenNAndM, N: $2.(uint64), M: $4.(uint64)}
	}
|	'{' ',' LengthNum '}'
	{
		$$ = &ast.PatternQuantifier{Tp: ast.PatternQuantifierBetweenZeroAndM, N: 0, M: $3.(uint64)}
	}

PatternQuantifierOpt:
	{
		$$ = (*ast.PatternQuantifier)(nil)
	}
|	PatternQuantifier

PathPatternMacroList:
	PathPatternMacro
	{
		$$ = []*ast.PathPatternMacro{$1.(*ast.PathPatternMacro)}
	}
|	PathPatternMacroList PathPatternMacro
	{
		$$ = append($1.([]*ast.PathPatternMacro), $2.(*ast.PathPatternMacro))
	}

PathPatternMacro:
	"PATH" Identifier "AS" PathPattern WhereClauseOpt
	{
		p := &ast.PathPatternMacro{
			Name: model.NewCIStr($2),
			Path: $4.(*ast.PathPattern),
		}
		if $5 != nil {
			p.Where = $5.(ast.ExprNode)
		}
		$$ = p
	}

WhereClauseOpt:
 	{}
|	"WHERE" Expression
	{}

GroupByClauseOpt:
 	{}
|	"GROUP" "BY" ByList
	{}

ByList:
	ByItem
	{}
|	ByList ',' ByItem
	{}

ByItem:
	Expression
	{}
|	Expression Order
	{}

Order:
	"ASC"
	{
		$$ = false
	}
|	"DESC"
	{
		$$ = true
	}

HavingClauseOpt:
	{
		$$ = nil
	}
|	"HAVING" Expression
	{}

OrderByClauseOpt:
 	{}
|	"ORDER" "BY" ByList
	{}

LimitClauseOpt:
 	{}
|	"LIMIT" LimitOption
	{}
|	"LIMIT" LimitOption ',' LimitOption
	{}
|	"LIMIT" LimitOption "OFFSET" LimitOption
	{}

LimitOption:
	LengthNum
	{}
|	paramMarker
	{}

LengthNum:
	NUM
	{}

UpdateStmt:
	"UPDATE" TableName TableAsNameOpt "SET" AssignmentList WhereClauseOpt OrderByClauseOpt LimitClauseOpt
	{}

UseStmt:
	"USE" GraphName
	{}

IfExists:
	{
		$$ = false
	}
|	"IF" "EXISTS"
	{
		$$ = true
	}

IfNotExists:
	{
		$$ = false
	}
|	"IF" "NOT" "EXISTS"
	{
		$$ = true
	}

GraphName:
	Identifier

TableName:
	Identifier
	{}
|	Identifier '.' Identifier
	{}

ColumnName:
	Identifier
	{}
|	Identifier '.' Identifier
	{}
|	Identifier '.' Identifier '.' Identifier
	{}

IndexName:
	{}
|	Identifier
	{}

LabelName:
	Identifier
	{
		$$ = model.NewCIStr($1)
	}

VariableName:
	Identifier

Identifier:
	identifier
|	UnreservedKeywords

UnreservedKeywords:
	"BEGIN"
|	"COMMIT"
|	"COMMENT"
|	"BOOLEAN"
|	"BOOL"
|	"EXPLAIN"
|	"FIXED"
|	"BIT"
|	"NATIONAL"
|	"NCHAR"
|	"YEAR"
|	"TEXT"
|	"DATA"
|	"DATETIME"
|	"DATE"
|	"DAY"
|	"TIMESTAMP"
|	"TIME"
|	"SIGNED"
|	"VALUE"
|	"DUPLICATE"
|	"ROLLBACK"
|	"OFFSET"
|	"AUTO_INCREMENT"
|	"VISIBLE"
|	"INVISIBLE"
|	"NVARCHAR"
|	"SQL_TSI_YEAR"
|	"GRAPH"

%%
